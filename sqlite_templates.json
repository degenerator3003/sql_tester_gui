{
  "meta": {
    "generated_at": "2025-09-28T13:57:31.920591Z",
    "generator": "SQLite GUI Tester Template Generator (pure Python)",
    "counts": {
      "query_templates": 606,
      "db_templates": 600
    }
  },
  "query_templates": [
    {
      "name": "Create table people",
      "category": "DDL/Create",
      "description": "Create people table.",
      "sql": "CREATE TABLE IF NOT EXISTS people(\n  id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  age INTEGER,\n  city TEXT,\n  created_at TEXT\n);"
    },
    {
      "name": "Drop table people",
      "category": "DDL/Drop",
      "description": "Drop people table.",
      "sql": "DROP TABLE IF EXISTS people;"
    },
    {
      "name": "Create index on people.name",
      "category": "DDL/Index",
      "description": "Index on people(name).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_people_name ON people(name);"
    },
    {
      "name": "Create index on people.age",
      "category": "DDL/Index",
      "description": "Index on people(age).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_people_age ON people(age);"
    },
    {
      "name": "Create table customers",
      "category": "DDL/Create",
      "description": "Create customers table.",
      "sql": "CREATE TABLE IF NOT EXISTS customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);"
    },
    {
      "name": "Drop table customers",
      "category": "DDL/Drop",
      "description": "Drop customers table.",
      "sql": "DROP TABLE IF EXISTS customers;"
    },
    {
      "name": "Create index on customers.name",
      "category": "DDL/Index",
      "description": "Index on customers(name).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_customers_name ON customers(name);"
    },
    {
      "name": "Create table products",
      "category": "DDL/Create",
      "description": "Create products table.",
      "sql": "CREATE TABLE IF NOT EXISTS products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);"
    },
    {
      "name": "Drop table products",
      "category": "DDL/Drop",
      "description": "Drop products table.",
      "sql": "DROP TABLE IF EXISTS products;"
    },
    {
      "name": "Create index on products.name",
      "category": "DDL/Index",
      "description": "Index on products(name).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_products_name ON products(name);"
    },
    {
      "name": "Create index on products.price",
      "category": "DDL/Index",
      "description": "Index on products(price).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_products_price ON products(price);"
    },
    {
      "name": "Create table orders",
      "category": "DDL/Create",
      "description": "Create orders table.",
      "sql": "CREATE TABLE IF NOT EXISTS orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL\n);"
    },
    {
      "name": "Drop table orders",
      "category": "DDL/Drop",
      "description": "Drop orders table.",
      "sql": "DROP TABLE IF EXISTS orders;"
    },
    {
      "name": "Create table order_items",
      "category": "DDL/Create",
      "description": "Create order_items table.",
      "sql": "CREATE TABLE IF NOT EXISTS order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0)\n);"
    },
    {
      "name": "Drop table order_items",
      "category": "DDL/Drop",
      "description": "Drop order_items table.",
      "sql": "DROP TABLE IF EXISTS order_items;"
    },
    {
      "name": "Create index on order_items.qty",
      "category": "DDL/Index",
      "description": "Index on order_items(qty).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_order_items_qty ON order_items(qty);"
    },
    {
      "name": "Create table employees",
      "category": "DDL/Create",
      "description": "Create employees table.",
      "sql": "CREATE TABLE IF NOT EXISTS employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT\n);"
    },
    {
      "name": "Drop table employees",
      "category": "DDL/Drop",
      "description": "Drop employees table.",
      "sql": "DROP TABLE IF EXISTS employees;"
    },
    {
      "name": "Create index on employees.first_name",
      "category": "DDL/Index",
      "description": "Index on employees(first_name).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_employees_first_name ON employees(first_name);"
    },
    {
      "name": "Create index on employees.salary",
      "category": "DDL/Index",
      "description": "Index on employees(salary).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_employees_salary ON employees(salary);"
    },
    {
      "name": "Create table departments",
      "category": "DDL/Create",
      "description": "Create departments table.",
      "sql": "CREATE TABLE IF NOT EXISTS departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT NOT NULL\n);"
    },
    {
      "name": "Drop table departments",
      "category": "DDL/Drop",
      "description": "Drop departments table.",
      "sql": "DROP TABLE IF EXISTS departments;"
    },
    {
      "name": "Create index on departments.dept_name",
      "category": "DDL/Index",
      "description": "Index on departments(dept_name).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_departments_dept_name ON departments(dept_name);"
    },
    {
      "name": "Create table posts",
      "category": "DDL/Create",
      "description": "Create posts table.",
      "sql": "CREATE TABLE IF NOT EXISTS posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);"
    },
    {
      "name": "Drop table posts",
      "category": "DDL/Drop",
      "description": "Drop posts table.",
      "sql": "DROP TABLE IF EXISTS posts;"
    },
    {
      "name": "Create index on posts.title",
      "category": "DDL/Index",
      "description": "Index on posts(title).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_posts_title ON posts(title);"
    },
    {
      "name": "Create table comments",
      "category": "DDL/Create",
      "description": "Create comments table.",
      "sql": "CREATE TABLE IF NOT EXISTS comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT\n);"
    },
    {
      "name": "Drop table comments",
      "category": "DDL/Drop",
      "description": "Drop comments table.",
      "sql": "DROP TABLE IF EXISTS comments;"
    },
    {
      "name": "Create index on comments.author",
      "category": "DDL/Index",
      "description": "Index on comments(author).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_comments_author ON comments(author);"
    },
    {
      "name": "Create table tags",
      "category": "DDL/Create",
      "description": "Create tags table.",
      "sql": "CREATE TABLE IF NOT EXISTS tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);"
    },
    {
      "name": "Drop table tags",
      "category": "DDL/Drop",
      "description": "Drop tags table.",
      "sql": "DROP TABLE IF EXISTS tags;"
    },
    {
      "name": "Create index on tags.name",
      "category": "DDL/Index",
      "description": "Index on tags(name).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_tags_name ON tags(name);"
    },
    {
      "name": "Create table post_tags",
      "category": "DDL/Create",
      "description": "Create post_tags table.",
      "sql": "CREATE TABLE IF NOT EXISTS post_tags(\n  post_id INTEGER,\n  tag_id INTEGER\n);"
    },
    {
      "name": "Drop table post_tags",
      "category": "DDL/Drop",
      "description": "Drop post_tags table.",
      "sql": "DROP TABLE IF EXISTS post_tags;"
    },
    {
      "name": "Create table books",
      "category": "DDL/Create",
      "description": "Create books table.",
      "sql": "CREATE TABLE IF NOT EXISTS books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL\n);"
    },
    {
      "name": "Drop table books",
      "category": "DDL/Drop",
      "description": "Drop books table.",
      "sql": "DROP TABLE IF EXISTS books;"
    },
    {
      "name": "Create index on books.title",
      "category": "DDL/Index",
      "description": "Index on books(title).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_books_title ON books(title);"
    },
    {
      "name": "Create index on books.price",
      "category": "DDL/Index",
      "description": "Index on books(price).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_books_price ON books(price);"
    },
    {
      "name": "Create table authors",
      "category": "DDL/Create",
      "description": "Create authors table.",
      "sql": "CREATE TABLE IF NOT EXISTS authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);"
    },
    {
      "name": "Drop table authors",
      "category": "DDL/Drop",
      "description": "Drop authors table.",
      "sql": "DROP TABLE IF EXISTS authors;"
    },
    {
      "name": "Create index on authors.name",
      "category": "DDL/Index",
      "description": "Index on authors(name).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_authors_name ON authors(name);"
    },
    {
      "name": "Create table loans",
      "category": "DDL/Create",
      "description": "Create loans table.",
      "sql": "CREATE TABLE IF NOT EXISTS loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT\n);"
    },
    {
      "name": "Drop table loans",
      "category": "DDL/Drop",
      "description": "Drop loans table.",
      "sql": "DROP TABLE IF EXISTS loans;"
    },
    {
      "name": "Create table members",
      "category": "DDL/Create",
      "description": "Create members table.",
      "sql": "CREATE TABLE IF NOT EXISTS members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);"
    },
    {
      "name": "Drop table members",
      "category": "DDL/Drop",
      "description": "Drop members table.",
      "sql": "DROP TABLE IF EXISTS members;"
    },
    {
      "name": "Create index on members.name",
      "category": "DDL/Index",
      "description": "Index on members(name).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_members_name ON members(name);"
    },
    {
      "name": "Create table devices",
      "category": "DDL/Create",
      "description": "Create devices table.",
      "sql": "CREATE TABLE IF NOT EXISTS devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);"
    },
    {
      "name": "Drop table devices",
      "category": "DDL/Drop",
      "description": "Drop devices table.",
      "sql": "DROP TABLE IF EXISTS devices;"
    },
    {
      "name": "Create index on devices.name",
      "category": "DDL/Index",
      "description": "Index on devices(name).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_devices_name ON devices(name);"
    },
    {
      "name": "Create table sensors",
      "category": "DDL/Create",
      "description": "Create sensors table.",
      "sql": "CREATE TABLE IF NOT EXISTS sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT\n);"
    },
    {
      "name": "Drop table sensors",
      "category": "DDL/Drop",
      "description": "Drop sensors table.",
      "sql": "DROP TABLE IF EXISTS sensors;"
    },
    {
      "name": "Create index on sensors.kind",
      "category": "DDL/Index",
      "description": "Index on sensors(kind).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_sensors_kind ON sensors(kind);"
    },
    {
      "name": "Create table readings",
      "category": "DDL/Create",
      "description": "Create readings table.",
      "sql": "CREATE TABLE IF NOT EXISTS readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT\n);"
    },
    {
      "name": "Drop table readings",
      "category": "DDL/Drop",
      "description": "Drop readings table.",
      "sql": "DROP TABLE IF EXISTS readings;"
    },
    {
      "name": "Create index on readings.value",
      "category": "DDL/Index",
      "description": "Index on readings(value).",
      "sql": "CREATE INDEX IF NOT EXISTS idx_readings_value ON readings(value);"
    },
    {
      "name": "Create view orders_with_customer",
      "category": "DDL/View",
      "description": "View joining orders with customers",
      "sql": "CREATE VIEW IF NOT EXISTS v_orders_with_customer AS\nSELECT o.order_id, o.created_at, c.customer_id, c.name AS customer_name\nFROM orders o JOIN customers c ON o.customer_id=c.customer_id;"
    },
    {
      "name": "Drop view orders_with_customer",
      "category": "DDL/View",
      "description": "Drop the demo view",
      "sql": "DROP VIEW IF EXISTS v_orders_with_customer;"
    },
    {
      "name": "ALTER TABLE people ADD COLUMN email",
      "category": "DDL/Alter",
      "description": "Add a column (SQLite supports limited ALTER)",
      "sql": "ALTER TABLE people ADD COLUMN email TEXT;"
    },
    {
      "name": "ALTER TABLE people RENAME COLUMN name TO full_name",
      "category": "DDL/Alter",
      "description": "Rename a column (requires modern SQLite).",
      "sql": "ALTER TABLE people RENAME COLUMN name TO full_name;"
    },
    {
      "name": "ALTER TABLE people RENAME TO people_old",
      "category": "DDL/Alter",
      "description": "Rename table (demo).",
      "sql": "ALTER TABLE people RENAME TO people_old;"
    },
    {
      "name": "Insert into people (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into people.",
      "sql": "-- Example parameterized insert\nINSERT INTO people(name, age, city) VALUES(?, ?, ?);"
    },
    {
      "name": "Insert multiple rows into people",
      "category": "DML/Insert",
      "description": "Insert 3 rows into people.",
      "sql": "INSERT INTO people(name, age, city) VALUES\n(?, ?, ?),\n(?, ?, ?),\n(?, ?, ?);"
    },
    {
      "name": "Update people set name",
      "category": "DML/Update",
      "description": "Update a column in people.",
      "sql": "UPDATE people SET name = ? WHERE id = ?;"
    },
    {
      "name": "Delete from people by id",
      "category": "DML/Delete",
      "description": "Delete a row from people.",
      "sql": "DELETE FROM people WHERE id = ?;"
    },
    {
      "name": "Insert into customers (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into customers.",
      "sql": "-- Example parameterized insert\nINSERT INTO customers(name, email) VALUES(?, ?);"
    },
    {
      "name": "Insert multiple rows into customers",
      "category": "DML/Insert",
      "description": "Insert 3 rows into customers.",
      "sql": "INSERT INTO customers(name, email) VALUES\n(?, ?),\n(?, ?),\n(?, ?);"
    },
    {
      "name": "Update customers set name",
      "category": "DML/Update",
      "description": "Update a column in customers.",
      "sql": "UPDATE customers SET name = ? WHERE customer_id = ?;"
    },
    {
      "name": "Delete from customers by customer_id",
      "category": "DML/Delete",
      "description": "Delete a row from customers.",
      "sql": "DELETE FROM customers WHERE customer_id = ?;"
    },
    {
      "name": "Insert into products (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into products.",
      "sql": "-- Example parameterized insert\nINSERT INTO products(name, price, category) VALUES(?, ?, ?);"
    },
    {
      "name": "Insert multiple rows into products",
      "category": "DML/Insert",
      "description": "Insert 3 rows into products.",
      "sql": "INSERT INTO products(name, price, category) VALUES\n(?, ?, ?),\n(?, ?, ?),\n(?, ?, ?);"
    },
    {
      "name": "Update products set name",
      "category": "DML/Update",
      "description": "Update a column in products.",
      "sql": "UPDATE products SET name = ? WHERE product_id = ?;"
    },
    {
      "name": "Delete from products by product_id",
      "category": "DML/Delete",
      "description": "Delete a row from products.",
      "sql": "DELETE FROM products WHERE product_id = ?;"
    },
    {
      "name": "Insert into orders (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into orders.",
      "sql": "-- Example parameterized insert\nINSERT INTO orders(customer_id) VALUES(?);"
    },
    {
      "name": "Insert multiple rows into orders",
      "category": "DML/Insert",
      "description": "Insert 3 rows into orders.",
      "sql": "INSERT INTO orders(customer_id) VALUES\n(?),\n(?),\n(?);"
    },
    {
      "name": "Update orders set customer_id",
      "category": "DML/Update",
      "description": "Update a column in orders.",
      "sql": "UPDATE orders SET customer_id = ? WHERE order_id = ?;"
    },
    {
      "name": "Delete from orders by order_id",
      "category": "DML/Delete",
      "description": "Delete a row from orders.",
      "sql": "DELETE FROM orders WHERE order_id = ?;"
    },
    {
      "name": "Insert into order_items (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into order_items.",
      "sql": "-- Example parameterized insert\nINSERT INTO order_items(order_id, product_id, qty) VALUES(?, ?, ?);"
    },
    {
      "name": "Insert multiple rows into order_items",
      "category": "DML/Insert",
      "description": "Insert 3 rows into order_items.",
      "sql": "INSERT INTO order_items(order_id, product_id, qty) VALUES\n(?, ?, ?),\n(?, ?, ?),\n(?, ?, ?);"
    },
    {
      "name": "Update order_items set qty",
      "category": "DML/Update",
      "description": "Update a column in order_items.",
      "sql": "UPDATE order_items SET qty = ? WHERE order_id = ?;"
    },
    {
      "name": "Delete from order_items by order_id",
      "category": "DML/Delete",
      "description": "Delete a row from order_items.",
      "sql": "DELETE FROM order_items WHERE order_id = ?;"
    },
    {
      "name": "Insert into employees (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into employees.",
      "sql": "-- Example parameterized insert\nINSERT INTO employees(first_name, last_name, dept_id, salary) VALUES(?, ?, ?, ?);"
    },
    {
      "name": "Insert multiple rows into employees",
      "category": "DML/Insert",
      "description": "Insert 3 rows into employees.",
      "sql": "INSERT INTO employees(first_name, last_name, dept_id, salary) VALUES\n(?, ?, ?, ?),\n(?, ?, ?, ?),\n(?, ?, ?, ?);"
    },
    {
      "name": "Update employees set first_name",
      "category": "DML/Update",
      "description": "Update a column in employees.",
      "sql": "UPDATE employees SET first_name = ? WHERE emp_id = ?;"
    },
    {
      "name": "Delete from employees by emp_id",
      "category": "DML/Delete",
      "description": "Delete a row from employees.",
      "sql": "DELETE FROM employees WHERE emp_id = ?;"
    },
    {
      "name": "Insert into departments (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into departments.",
      "sql": "-- Example parameterized insert\nINSERT INTO departments(dept_name) VALUES(?);"
    },
    {
      "name": "Insert multiple rows into departments",
      "category": "DML/Insert",
      "description": "Insert 3 rows into departments.",
      "sql": "INSERT INTO departments(dept_name) VALUES\n(?),\n(?),\n(?);"
    },
    {
      "name": "Update departments set dept_name",
      "category": "DML/Update",
      "description": "Update a column in departments.",
      "sql": "UPDATE departments SET dept_name = ? WHERE dept_id = ?;"
    },
    {
      "name": "Delete from departments by dept_id",
      "category": "DML/Delete",
      "description": "Delete a row from departments.",
      "sql": "DELETE FROM departments WHERE dept_id = ?;"
    },
    {
      "name": "Insert into posts (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into posts.",
      "sql": "-- Example parameterized insert\nINSERT INTO posts(author_id, title, body) VALUES(?, ?, ?);"
    },
    {
      "name": "Insert multiple rows into posts",
      "category": "DML/Insert",
      "description": "Insert 3 rows into posts.",
      "sql": "INSERT INTO posts(author_id, title, body) VALUES\n(?, ?, ?),\n(?, ?, ?),\n(?, ?, ?);"
    },
    {
      "name": "Update posts set title",
      "category": "DML/Update",
      "description": "Update a column in posts.",
      "sql": "UPDATE posts SET title = ? WHERE post_id = ?;"
    },
    {
      "name": "Delete from posts by post_id",
      "category": "DML/Delete",
      "description": "Delete a row from posts.",
      "sql": "DELETE FROM posts WHERE post_id = ?;"
    },
    {
      "name": "Insert into comments (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into comments.",
      "sql": "-- Example parameterized insert\nINSERT INTO comments(post_id, author, body) VALUES(?, ?, ?);"
    },
    {
      "name": "Insert multiple rows into comments",
      "category": "DML/Insert",
      "description": "Insert 3 rows into comments.",
      "sql": "INSERT INTO comments(post_id, author, body) VALUES\n(?, ?, ?),\n(?, ?, ?),\n(?, ?, ?);"
    },
    {
      "name": "Update comments set author",
      "category": "DML/Update",
      "description": "Update a column in comments.",
      "sql": "UPDATE comments SET author = ? WHERE comment_id = ?;"
    },
    {
      "name": "Delete from comments by comment_id",
      "category": "DML/Delete",
      "description": "Delete a row from comments.",
      "sql": "DELETE FROM comments WHERE comment_id = ?;"
    },
    {
      "name": "Insert into tags (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into tags.",
      "sql": "-- Example parameterized insert\nINSERT INTO tags(name) VALUES(?);"
    },
    {
      "name": "Insert multiple rows into tags",
      "category": "DML/Insert",
      "description": "Insert 3 rows into tags.",
      "sql": "INSERT INTO tags(name) VALUES\n(?),\n(?),\n(?);"
    },
    {
      "name": "Update tags set name",
      "category": "DML/Update",
      "description": "Update a column in tags.",
      "sql": "UPDATE tags SET name = ? WHERE tag_id = ?;"
    },
    {
      "name": "Delete from tags by tag_id",
      "category": "DML/Delete",
      "description": "Delete a row from tags.",
      "sql": "DELETE FROM tags WHERE tag_id = ?;"
    },
    {
      "name": "Insert into post_tags (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into post_tags.",
      "sql": "-- Example parameterized insert\nINSERT INTO post_tags(post_id, tag_id) VALUES(?, ?);"
    },
    {
      "name": "Insert multiple rows into post_tags",
      "category": "DML/Insert",
      "description": "Insert 3 rows into post_tags.",
      "sql": "INSERT INTO post_tags(post_id, tag_id) VALUES\n(?, ?),\n(?, ?),\n(?, ?);"
    },
    {
      "name": "Update post_tags set post_id",
      "category": "DML/Update",
      "description": "Update a column in post_tags.",
      "sql": "UPDATE post_tags SET post_id = ? WHERE post_id = ?;"
    },
    {
      "name": "Delete from post_tags by post_id",
      "category": "DML/Delete",
      "description": "Delete a row from post_tags.",
      "sql": "DELETE FROM post_tags WHERE post_id = ?;"
    },
    {
      "name": "Insert into books (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into books.",
      "sql": "-- Example parameterized insert\nINSERT INTO books(title, author_id, price) VALUES(?, ?, ?);"
    },
    {
      "name": "Insert multiple rows into books",
      "category": "DML/Insert",
      "description": "Insert 3 rows into books.",
      "sql": "INSERT INTO books(title, author_id, price) VALUES\n(?, ?, ?),\n(?, ?, ?),\n(?, ?, ?);"
    },
    {
      "name": "Update books set title",
      "category": "DML/Update",
      "description": "Update a column in books.",
      "sql": "UPDATE books SET title = ? WHERE book_id = ?;"
    },
    {
      "name": "Delete from books by book_id",
      "category": "DML/Delete",
      "description": "Delete a row from books.",
      "sql": "DELETE FROM books WHERE book_id = ?;"
    },
    {
      "name": "Insert into authors (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into authors.",
      "sql": "-- Example parameterized insert\nINSERT INTO authors(name) VALUES(?);"
    },
    {
      "name": "Insert multiple rows into authors",
      "category": "DML/Insert",
      "description": "Insert 3 rows into authors.",
      "sql": "INSERT INTO authors(name) VALUES\n(?),\n(?),\n(?);"
    },
    {
      "name": "Update authors set name",
      "category": "DML/Update",
      "description": "Update a column in authors.",
      "sql": "UPDATE authors SET name = ? WHERE author_id = ?;"
    },
    {
      "name": "Delete from authors by author_id",
      "category": "DML/Delete",
      "description": "Delete a row from authors.",
      "sql": "DELETE FROM authors WHERE author_id = ?;"
    },
    {
      "name": "Insert into loans (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into loans.",
      "sql": "-- Example parameterized insert\nINSERT INTO loans(book_id, member_id) VALUES(?, ?);"
    },
    {
      "name": "Insert multiple rows into loans",
      "category": "DML/Insert",
      "description": "Insert 3 rows into loans.",
      "sql": "INSERT INTO loans(book_id, member_id) VALUES\n(?, ?),\n(?, ?),\n(?, ?);"
    },
    {
      "name": "Update loans set book_id",
      "category": "DML/Update",
      "description": "Update a column in loans.",
      "sql": "UPDATE loans SET book_id = ? WHERE loan_id = ?;"
    },
    {
      "name": "Delete from loans by loan_id",
      "category": "DML/Delete",
      "description": "Delete a row from loans.",
      "sql": "DELETE FROM loans WHERE loan_id = ?;"
    },
    {
      "name": "Insert into members (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into members.",
      "sql": "-- Example parameterized insert\nINSERT INTO members(name, city) VALUES(?, ?);"
    },
    {
      "name": "Insert multiple rows into members",
      "category": "DML/Insert",
      "description": "Insert 3 rows into members.",
      "sql": "INSERT INTO members(name, city) VALUES\n(?, ?),\n(?, ?),\n(?, ?);"
    },
    {
      "name": "Update members set name",
      "category": "DML/Update",
      "description": "Update a column in members.",
      "sql": "UPDATE members SET name = ? WHERE member_id = ?;"
    },
    {
      "name": "Delete from members by member_id",
      "category": "DML/Delete",
      "description": "Delete a row from members.",
      "sql": "DELETE FROM members WHERE member_id = ?;"
    },
    {
      "name": "Insert into devices (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into devices.",
      "sql": "-- Example parameterized insert\nINSERT INTO devices(name, location) VALUES(?, ?);"
    },
    {
      "name": "Insert multiple rows into devices",
      "category": "DML/Insert",
      "description": "Insert 3 rows into devices.",
      "sql": "INSERT INTO devices(name, location) VALUES\n(?, ?),\n(?, ?),\n(?, ?);"
    },
    {
      "name": "Update devices set name",
      "category": "DML/Update",
      "description": "Update a column in devices.",
      "sql": "UPDATE devices SET name = ? WHERE device_id = ?;"
    },
    {
      "name": "Delete from devices by device_id",
      "category": "DML/Delete",
      "description": "Delete a row from devices.",
      "sql": "DELETE FROM devices WHERE device_id = ?;"
    },
    {
      "name": "Insert into sensors (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into sensors.",
      "sql": "-- Example parameterized insert\nINSERT INTO sensors(device_id, kind) VALUES(?, ?);"
    },
    {
      "name": "Insert multiple rows into sensors",
      "category": "DML/Insert",
      "description": "Insert 3 rows into sensors.",
      "sql": "INSERT INTO sensors(device_id, kind) VALUES\n(?, ?),\n(?, ?),\n(?, ?);"
    },
    {
      "name": "Update sensors set kind",
      "category": "DML/Update",
      "description": "Update a column in sensors.",
      "sql": "UPDATE sensors SET kind = ? WHERE sensor_id = ?;"
    },
    {
      "name": "Delete from sensors by sensor_id",
      "category": "DML/Delete",
      "description": "Delete a row from sensors.",
      "sql": "DELETE FROM sensors WHERE sensor_id = ?;"
    },
    {
      "name": "Insert into readings (placeholders)",
      "category": "DML/Insert",
      "description": "Parameterized insert into readings.",
      "sql": "-- Example parameterized insert\nINSERT INTO readings(sensor_id, value) VALUES(?, ?);"
    },
    {
      "name": "Insert multiple rows into readings",
      "category": "DML/Insert",
      "description": "Insert 3 rows into readings.",
      "sql": "INSERT INTO readings(sensor_id, value) VALUES\n(?, ?),\n(?, ?),\n(?, ?);"
    },
    {
      "name": "Update readings set value",
      "category": "DML/Update",
      "description": "Update a column in readings.",
      "sql": "UPDATE readings SET value = ? WHERE reading_id = ?;"
    },
    {
      "name": "Delete from readings by reading_id",
      "category": "DML/Delete",
      "description": "Delete a row from readings.",
      "sql": "DELETE FROM readings WHERE reading_id = ?;"
    },
    {
      "name": "Upsert product by product_id",
      "category": "DML/Upsert",
      "description": "INSERT ... ON CONFLICT DO UPDATE (SQLite)",
      "sql": "INSERT INTO products(product_id, name, price)\nVALUES(?, ?, ?)\nON CONFLICT(product_id) DO UPDATE SET name=excluded.name, price=excluded.price;"
    },
    {
      "name": "Select all from people",
      "category": "DQL/Select/Basics",
      "description": "All rows from people.",
      "sql": "SELECT * FROM people;"
    },
    {
      "name": "Select top 10 from people",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from people.",
      "sql": "SELECT * FROM people LIMIT 10;"
    },
    {
      "name": "Select from people where name",
      "category": "DQL/Select/Filters",
      "description": "Filter people on name.",
      "sql": "SELECT * FROM people WHERE name = ?;"
    },
    {
      "name": "Search people by name LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on people.name.",
      "sql": "SELECT * FROM people WHERE name LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Range filter on people.age",
      "category": "DQL/Select/Filters",
      "description": "Range filter on numeric column age.",
      "sql": "SELECT * FROM people WHERE age BETWEEN ? AND ?;"
    },
    {
      "name": "Order people by id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY id DESC.",
      "sql": "SELECT * FROM people ORDER BY id DESC;"
    },
    {
      "name": "Count rows in people",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for people.",
      "sql": "SELECT COUNT(*) AS cnt FROM people;"
    },
    {
      "name": "Distinct people.name",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of name.",
      "sql": "SELECT DISTINCT name FROM people;"
    },
    {
      "name": "CASE demo on people",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM people;"
    },
    {
      "name": "ROW_NUMBER over people by id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY id) AS rn FROM people;"
    },
    {
      "name": "Filter people by date (last 30 days)",
      "category": "DQL/DateTime",
      "description": "Date filter using SQLite date functions.",
      "sql": "SELECT * FROM people WHERE created_at >= date('now','-30 days');"
    },
    {
      "name": "Select all from customers",
      "category": "DQL/Select/Basics",
      "description": "All rows from customers.",
      "sql": "SELECT * FROM customers;"
    },
    {
      "name": "Select top 10 from customers",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from customers.",
      "sql": "SELECT * FROM customers LIMIT 10;"
    },
    {
      "name": "Select from customers where name",
      "category": "DQL/Select/Filters",
      "description": "Filter customers on name.",
      "sql": "SELECT * FROM customers WHERE name = ?;"
    },
    {
      "name": "Search customers by name LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on customers.name.",
      "sql": "SELECT * FROM customers WHERE name LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Order customers by customer_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY customer_id DESC.",
      "sql": "SELECT * FROM customers ORDER BY customer_id DESC;"
    },
    {
      "name": "Count rows in customers",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for customers.",
      "sql": "SELECT COUNT(*) AS cnt FROM customers;"
    },
    {
      "name": "Distinct customers.name",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of name.",
      "sql": "SELECT DISTINCT name FROM customers;"
    },
    {
      "name": "CASE demo on customers",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN customer_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM customers;"
    },
    {
      "name": "ROW_NUMBER over customers by customer_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY customer_id) AS rn FROM customers;"
    },
    {
      "name": "Filter customers by date (last 30 days)",
      "category": "DQL/DateTime",
      "description": "Date filter using SQLite date functions.",
      "sql": "SELECT * FROM customers WHERE created_at >= date('now','-30 days');"
    },
    {
      "name": "Select all from products",
      "category": "DQL/Select/Basics",
      "description": "All rows from products.",
      "sql": "SELECT * FROM products;"
    },
    {
      "name": "Select top 10 from products",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from products.",
      "sql": "SELECT * FROM products LIMIT 10;"
    },
    {
      "name": "Select from products where name",
      "category": "DQL/Select/Filters",
      "description": "Filter products on name.",
      "sql": "SELECT * FROM products WHERE name = ?;"
    },
    {
      "name": "Search products by name LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on products.name.",
      "sql": "SELECT * FROM products WHERE name LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Range filter on products.price",
      "category": "DQL/Select/Filters",
      "description": "Range filter on numeric column price.",
      "sql": "SELECT * FROM products WHERE price BETWEEN ? AND ?;"
    },
    {
      "name": "Order products by product_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY product_id DESC.",
      "sql": "SELECT * FROM products ORDER BY product_id DESC;"
    },
    {
      "name": "Count rows in products",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for products.",
      "sql": "SELECT COUNT(*) AS cnt FROM products;"
    },
    {
      "name": "Distinct products.name",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of name.",
      "sql": "SELECT DISTINCT name FROM products;"
    },
    {
      "name": "CASE demo on products",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN product_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM products;"
    },
    {
      "name": "ROW_NUMBER over products by product_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY product_id) AS rn FROM products;"
    },
    {
      "name": "Select all from orders",
      "category": "DQL/Select/Basics",
      "description": "All rows from orders.",
      "sql": "SELECT * FROM orders;"
    },
    {
      "name": "Select top 10 from orders",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from orders.",
      "sql": "SELECT * FROM orders LIMIT 10;"
    },
    {
      "name": "Select from orders where order_id",
      "category": "DQL/Select/Filters",
      "description": "Filter orders on order_id.",
      "sql": "SELECT * FROM orders WHERE order_id = ?;"
    },
    {
      "name": "Order orders by order_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC.",
      "sql": "SELECT * FROM orders ORDER BY order_id DESC;"
    },
    {
      "name": "Count rows in orders",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for orders.",
      "sql": "SELECT COUNT(*) AS cnt FROM orders;"
    },
    {
      "name": "CASE demo on orders",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN order_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM orders;"
    },
    {
      "name": "ROW_NUMBER over orders by order_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY order_id) AS rn FROM orders;"
    },
    {
      "name": "Filter orders by date (last 30 days)",
      "category": "DQL/DateTime",
      "description": "Date filter using SQLite date functions.",
      "sql": "SELECT * FROM orders WHERE created_at >= date('now','-30 days');"
    },
    {
      "name": "Select all from order_items",
      "category": "DQL/Select/Basics",
      "description": "All rows from order_items.",
      "sql": "SELECT * FROM order_items;"
    },
    {
      "name": "Select top 10 from order_items",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from order_items.",
      "sql": "SELECT * FROM order_items LIMIT 10;"
    },
    {
      "name": "Select from order_items where qty",
      "category": "DQL/Select/Filters",
      "description": "Filter order_items on qty.",
      "sql": "SELECT * FROM order_items WHERE qty = ?;"
    },
    {
      "name": "Range filter on order_items.qty",
      "category": "DQL/Select/Filters",
      "description": "Range filter on numeric column qty.",
      "sql": "SELECT * FROM order_items WHERE qty BETWEEN ? AND ?;"
    },
    {
      "name": "Order order_items by order_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC.",
      "sql": "SELECT * FROM order_items ORDER BY order_id DESC;"
    },
    {
      "name": "Count rows in order_items",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for order_items.",
      "sql": "SELECT COUNT(*) AS cnt FROM order_items;"
    },
    {
      "name": "CASE demo on order_items",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN order_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM order_items;"
    },
    {
      "name": "ROW_NUMBER over order_items by order_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY order_id) AS rn FROM order_items;"
    },
    {
      "name": "Select all from employees",
      "category": "DQL/Select/Basics",
      "description": "All rows from employees.",
      "sql": "SELECT * FROM employees;"
    },
    {
      "name": "Select top 10 from employees",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from employees.",
      "sql": "SELECT * FROM employees LIMIT 10;"
    },
    {
      "name": "Select from employees where first_name",
      "category": "DQL/Select/Filters",
      "description": "Filter employees on first_name.",
      "sql": "SELECT * FROM employees WHERE first_name = ?;"
    },
    {
      "name": "Search employees by first_name LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on employees.first_name.",
      "sql": "SELECT * FROM employees WHERE first_name LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Range filter on employees.salary",
      "category": "DQL/Select/Filters",
      "description": "Range filter on numeric column salary.",
      "sql": "SELECT * FROM employees WHERE salary BETWEEN ? AND ?;"
    },
    {
      "name": "Order employees by emp_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY emp_id DESC.",
      "sql": "SELECT * FROM employees ORDER BY emp_id DESC;"
    },
    {
      "name": "Count rows in employees",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for employees.",
      "sql": "SELECT COUNT(*) AS cnt FROM employees;"
    },
    {
      "name": "Distinct employees.first_name",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of first_name.",
      "sql": "SELECT DISTINCT first_name FROM employees;"
    },
    {
      "name": "CASE demo on employees",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN emp_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM employees;"
    },
    {
      "name": "ROW_NUMBER over employees by emp_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY emp_id) AS rn FROM employees;"
    },
    {
      "name": "Filter employees by date (last 30 days)",
      "category": "DQL/DateTime",
      "description": "Date filter using SQLite date functions.",
      "sql": "SELECT * FROM employees WHERE hired_at >= date('now','-30 days');"
    },
    {
      "name": "Select all from departments",
      "category": "DQL/Select/Basics",
      "description": "All rows from departments.",
      "sql": "SELECT * FROM departments;"
    },
    {
      "name": "Select top 10 from departments",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from departments.",
      "sql": "SELECT * FROM departments LIMIT 10;"
    },
    {
      "name": "Select from departments where dept_name",
      "category": "DQL/Select/Filters",
      "description": "Filter departments on dept_name.",
      "sql": "SELECT * FROM departments WHERE dept_name = ?;"
    },
    {
      "name": "Search departments by dept_name LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on departments.dept_name.",
      "sql": "SELECT * FROM departments WHERE dept_name LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Order departments by dept_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY dept_id DESC.",
      "sql": "SELECT * FROM departments ORDER BY dept_id DESC;"
    },
    {
      "name": "Count rows in departments",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for departments.",
      "sql": "SELECT COUNT(*) AS cnt FROM departments;"
    },
    {
      "name": "Distinct departments.dept_name",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of dept_name.",
      "sql": "SELECT DISTINCT dept_name FROM departments;"
    },
    {
      "name": "CASE demo on departments",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN dept_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM departments;"
    },
    {
      "name": "ROW_NUMBER over departments by dept_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY dept_id) AS rn FROM departments;"
    },
    {
      "name": "Select all from posts",
      "category": "DQL/Select/Basics",
      "description": "All rows from posts.",
      "sql": "SELECT * FROM posts;"
    },
    {
      "name": "Select top 10 from posts",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from posts.",
      "sql": "SELECT * FROM posts LIMIT 10;"
    },
    {
      "name": "Select from posts where title",
      "category": "DQL/Select/Filters",
      "description": "Filter posts on title.",
      "sql": "SELECT * FROM posts WHERE title = ?;"
    },
    {
      "name": "Search posts by title LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on posts.title.",
      "sql": "SELECT * FROM posts WHERE title LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Order posts by post_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC.",
      "sql": "SELECT * FROM posts ORDER BY post_id DESC;"
    },
    {
      "name": "Count rows in posts",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for posts.",
      "sql": "SELECT COUNT(*) AS cnt FROM posts;"
    },
    {
      "name": "Distinct posts.title",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of title.",
      "sql": "SELECT DISTINCT title FROM posts;"
    },
    {
      "name": "CASE demo on posts",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN post_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM posts;"
    },
    {
      "name": "ROW_NUMBER over posts by post_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY post_id) AS rn FROM posts;"
    },
    {
      "name": "Filter posts by date (last 30 days)",
      "category": "DQL/DateTime",
      "description": "Date filter using SQLite date functions.",
      "sql": "SELECT * FROM posts WHERE published_at >= date('now','-30 days');"
    },
    {
      "name": "Select all from comments",
      "category": "DQL/Select/Basics",
      "description": "All rows from comments.",
      "sql": "SELECT * FROM comments;"
    },
    {
      "name": "Select top 10 from comments",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from comments.",
      "sql": "SELECT * FROM comments LIMIT 10;"
    },
    {
      "name": "Select from comments where author",
      "category": "DQL/Select/Filters",
      "description": "Filter comments on author.",
      "sql": "SELECT * FROM comments WHERE author = ?;"
    },
    {
      "name": "Search comments by author LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on comments.author.",
      "sql": "SELECT * FROM comments WHERE author LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Order comments by comment_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY comment_id DESC.",
      "sql": "SELECT * FROM comments ORDER BY comment_id DESC;"
    },
    {
      "name": "Count rows in comments",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for comments.",
      "sql": "SELECT COUNT(*) AS cnt FROM comments;"
    },
    {
      "name": "Distinct comments.author",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of author.",
      "sql": "SELECT DISTINCT author FROM comments;"
    },
    {
      "name": "CASE demo on comments",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN comment_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM comments;"
    },
    {
      "name": "ROW_NUMBER over comments by comment_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY comment_id) AS rn FROM comments;"
    },
    {
      "name": "Filter comments by date (last 30 days)",
      "category": "DQL/DateTime",
      "description": "Date filter using SQLite date functions.",
      "sql": "SELECT * FROM comments WHERE created_at >= date('now','-30 days');"
    },
    {
      "name": "Select all from tags",
      "category": "DQL/Select/Basics",
      "description": "All rows from tags.",
      "sql": "SELECT * FROM tags;"
    },
    {
      "name": "Select top 10 from tags",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from tags.",
      "sql": "SELECT * FROM tags LIMIT 10;"
    },
    {
      "name": "Select from tags where name",
      "category": "DQL/Select/Filters",
      "description": "Filter tags on name.",
      "sql": "SELECT * FROM tags WHERE name = ?;"
    },
    {
      "name": "Search tags by name LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on tags.name.",
      "sql": "SELECT * FROM tags WHERE name LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Order tags by tag_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY tag_id DESC.",
      "sql": "SELECT * FROM tags ORDER BY tag_id DESC;"
    },
    {
      "name": "Count rows in tags",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for tags.",
      "sql": "SELECT COUNT(*) AS cnt FROM tags;"
    },
    {
      "name": "Distinct tags.name",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of name.",
      "sql": "SELECT DISTINCT name FROM tags;"
    },
    {
      "name": "CASE demo on tags",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN tag_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM tags;"
    },
    {
      "name": "ROW_NUMBER over tags by tag_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY tag_id) AS rn FROM tags;"
    },
    {
      "name": "Select all from post_tags",
      "category": "DQL/Select/Basics",
      "description": "All rows from post_tags.",
      "sql": "SELECT * FROM post_tags;"
    },
    {
      "name": "Select top 10 from post_tags",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from post_tags.",
      "sql": "SELECT * FROM post_tags LIMIT 10;"
    },
    {
      "name": "Select from post_tags where post_id",
      "category": "DQL/Select/Filters",
      "description": "Filter post_tags on post_id.",
      "sql": "SELECT * FROM post_tags WHERE post_id = ?;"
    },
    {
      "name": "Order post_tags by post_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC.",
      "sql": "SELECT * FROM post_tags ORDER BY post_id DESC;"
    },
    {
      "name": "Count rows in post_tags",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for post_tags.",
      "sql": "SELECT COUNT(*) AS cnt FROM post_tags;"
    },
    {
      "name": "CASE demo on post_tags",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN post_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM post_tags;"
    },
    {
      "name": "ROW_NUMBER over post_tags by post_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY post_id) AS rn FROM post_tags;"
    },
    {
      "name": "Select all from books",
      "category": "DQL/Select/Basics",
      "description": "All rows from books.",
      "sql": "SELECT * FROM books;"
    },
    {
      "name": "Select top 10 from books",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from books.",
      "sql": "SELECT * FROM books LIMIT 10;"
    },
    {
      "name": "Select from books where title",
      "category": "DQL/Select/Filters",
      "description": "Filter books on title.",
      "sql": "SELECT * FROM books WHERE title = ?;"
    },
    {
      "name": "Search books by title LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on books.title.",
      "sql": "SELECT * FROM books WHERE title LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Range filter on books.price",
      "category": "DQL/Select/Filters",
      "description": "Range filter on numeric column price.",
      "sql": "SELECT * FROM books WHERE price BETWEEN ? AND ?;"
    },
    {
      "name": "Order books by book_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY book_id DESC.",
      "sql": "SELECT * FROM books ORDER BY book_id DESC;"
    },
    {
      "name": "Count rows in books",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for books.",
      "sql": "SELECT COUNT(*) AS cnt FROM books;"
    },
    {
      "name": "Distinct books.title",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of title.",
      "sql": "SELECT DISTINCT title FROM books;"
    },
    {
      "name": "CASE demo on books",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN book_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM books;"
    },
    {
      "name": "ROW_NUMBER over books by book_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY book_id) AS rn FROM books;"
    },
    {
      "name": "Select all from authors",
      "category": "DQL/Select/Basics",
      "description": "All rows from authors.",
      "sql": "SELECT * FROM authors;"
    },
    {
      "name": "Select top 10 from authors",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from authors.",
      "sql": "SELECT * FROM authors LIMIT 10;"
    },
    {
      "name": "Select from authors where name",
      "category": "DQL/Select/Filters",
      "description": "Filter authors on name.",
      "sql": "SELECT * FROM authors WHERE name = ?;"
    },
    {
      "name": "Search authors by name LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on authors.name.",
      "sql": "SELECT * FROM authors WHERE name LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Order authors by author_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY author_id DESC.",
      "sql": "SELECT * FROM authors ORDER BY author_id DESC;"
    },
    {
      "name": "Count rows in authors",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for authors.",
      "sql": "SELECT COUNT(*) AS cnt FROM authors;"
    },
    {
      "name": "Distinct authors.name",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of name.",
      "sql": "SELECT DISTINCT name FROM authors;"
    },
    {
      "name": "CASE demo on authors",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN author_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM authors;"
    },
    {
      "name": "ROW_NUMBER over authors by author_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY author_id) AS rn FROM authors;"
    },
    {
      "name": "Select all from loans",
      "category": "DQL/Select/Basics",
      "description": "All rows from loans.",
      "sql": "SELECT * FROM loans;"
    },
    {
      "name": "Select top 10 from loans",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from loans.",
      "sql": "SELECT * FROM loans LIMIT 10;"
    },
    {
      "name": "Select from loans where loan_id",
      "category": "DQL/Select/Filters",
      "description": "Filter loans on loan_id.",
      "sql": "SELECT * FROM loans WHERE loan_id = ?;"
    },
    {
      "name": "Order loans by loan_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY loan_id DESC.",
      "sql": "SELECT * FROM loans ORDER BY loan_id DESC;"
    },
    {
      "name": "Count rows in loans",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for loans.",
      "sql": "SELECT COUNT(*) AS cnt FROM loans;"
    },
    {
      "name": "CASE demo on loans",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN loan_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM loans;"
    },
    {
      "name": "ROW_NUMBER over loans by loan_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY loan_id) AS rn FROM loans;"
    },
    {
      "name": "Filter loans by date (last 30 days)",
      "category": "DQL/DateTime",
      "description": "Date filter using SQLite date functions.",
      "sql": "SELECT * FROM loans WHERE loaned_at >= date('now','-30 days');"
    },
    {
      "name": "Select all from members",
      "category": "DQL/Select/Basics",
      "description": "All rows from members.",
      "sql": "SELECT * FROM members;"
    },
    {
      "name": "Select top 10 from members",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from members.",
      "sql": "SELECT * FROM members LIMIT 10;"
    },
    {
      "name": "Select from members where name",
      "category": "DQL/Select/Filters",
      "description": "Filter members on name.",
      "sql": "SELECT * FROM members WHERE name = ?;"
    },
    {
      "name": "Search members by name LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on members.name.",
      "sql": "SELECT * FROM members WHERE name LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Order members by member_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY member_id DESC.",
      "sql": "SELECT * FROM members ORDER BY member_id DESC;"
    },
    {
      "name": "Count rows in members",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for members.",
      "sql": "SELECT COUNT(*) AS cnt FROM members;"
    },
    {
      "name": "Distinct members.name",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of name.",
      "sql": "SELECT DISTINCT name FROM members;"
    },
    {
      "name": "CASE demo on members",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN member_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM members;"
    },
    {
      "name": "ROW_NUMBER over members by member_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY member_id) AS rn FROM members;"
    },
    {
      "name": "Filter members by date (last 30 days)",
      "category": "DQL/DateTime",
      "description": "Date filter using SQLite date functions.",
      "sql": "SELECT * FROM members WHERE joined_at >= date('now','-30 days');"
    },
    {
      "name": "Select all from devices",
      "category": "DQL/Select/Basics",
      "description": "All rows from devices.",
      "sql": "SELECT * FROM devices;"
    },
    {
      "name": "Select top 10 from devices",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from devices.",
      "sql": "SELECT * FROM devices LIMIT 10;"
    },
    {
      "name": "Select from devices where name",
      "category": "DQL/Select/Filters",
      "description": "Filter devices on name.",
      "sql": "SELECT * FROM devices WHERE name = ?;"
    },
    {
      "name": "Search devices by name LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on devices.name.",
      "sql": "SELECT * FROM devices WHERE name LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Order devices by device_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY device_id DESC.",
      "sql": "SELECT * FROM devices ORDER BY device_id DESC;"
    },
    {
      "name": "Count rows in devices",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for devices.",
      "sql": "SELECT COUNT(*) AS cnt FROM devices;"
    },
    {
      "name": "Distinct devices.name",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of name.",
      "sql": "SELECT DISTINCT name FROM devices;"
    },
    {
      "name": "CASE demo on devices",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN device_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM devices;"
    },
    {
      "name": "ROW_NUMBER over devices by device_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY device_id) AS rn FROM devices;"
    },
    {
      "name": "Select all from sensors",
      "category": "DQL/Select/Basics",
      "description": "All rows from sensors.",
      "sql": "SELECT * FROM sensors;"
    },
    {
      "name": "Select top 10 from sensors",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from sensors.",
      "sql": "SELECT * FROM sensors LIMIT 10;"
    },
    {
      "name": "Select from sensors where kind",
      "category": "DQL/Select/Filters",
      "description": "Filter sensors on kind.",
      "sql": "SELECT * FROM sensors WHERE kind = ?;"
    },
    {
      "name": "Search sensors by kind LIKE",
      "category": "DQL/Select/Filters",
      "description": "LIKE search on sensors.kind.",
      "sql": "SELECT * FROM sensors WHERE kind LIKE ?; -- e.g. '%abc%'"
    },
    {
      "name": "Order sensors by sensor_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY sensor_id DESC.",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id DESC;"
    },
    {
      "name": "Count rows in sensors",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for sensors.",
      "sql": "SELECT COUNT(*) AS cnt FROM sensors;"
    },
    {
      "name": "Distinct sensors.kind",
      "category": "DQL/Distinct",
      "description": "DISTINCT values of kind.",
      "sql": "SELECT DISTINCT kind FROM sensors;"
    },
    {
      "name": "CASE demo on sensors",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN sensor_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM sensors;"
    },
    {
      "name": "ROW_NUMBER over sensors by sensor_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY sensor_id) AS rn FROM sensors;"
    },
    {
      "name": "Select all from readings",
      "category": "DQL/Select/Basics",
      "description": "All rows from readings.",
      "sql": "SELECT * FROM readings;"
    },
    {
      "name": "Select top 10 from readings",
      "category": "DQL/Select/Limits",
      "description": "First 10 rows from readings.",
      "sql": "SELECT * FROM readings LIMIT 10;"
    },
    {
      "name": "Select from readings where value",
      "category": "DQL/Select/Filters",
      "description": "Filter readings on value.",
      "sql": "SELECT * FROM readings WHERE value = ?;"
    },
    {
      "name": "Range filter on readings.value",
      "category": "DQL/Select/Filters",
      "description": "Range filter on numeric column value.",
      "sql": "SELECT * FROM readings WHERE value BETWEEN ? AND ?;"
    },
    {
      "name": "Order readings by reading_id DESC",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY reading_id DESC.",
      "sql": "SELECT * FROM readings ORDER BY reading_id DESC;"
    },
    {
      "name": "Count rows in readings",
      "category": "DQL/Aggregation",
      "description": "COUNT(*) for readings.",
      "sql": "SELECT COUNT(*) AS cnt FROM readings;"
    },
    {
      "name": "CASE demo on readings",
      "category": "DQL/Expressions",
      "description": "CASE expression example.",
      "sql": "SELECT *, CASE WHEN reading_id%2=0 THEN 'even' ELSE 'odd' END AS parity FROM readings;"
    },
    {
      "name": "ROW_NUMBER over readings by reading_id",
      "category": "DQL/Windows",
      "description": "Window function example.",
      "sql": "SELECT *, ROW_NUMBER() OVER (ORDER BY reading_id) AS rn FROM readings;"
    },
    {
      "name": "Filter readings by date (last 30 days)",
      "category": "DQL/DateTime",
      "description": "Date filter using SQLite date functions.",
      "sql": "SELECT * FROM readings WHERE measured_at >= date('now','-30 days');"
    },
    {
      "name": "Join orders → customers",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN orders with customers.",
      "sql": "SELECT * FROM orders l INNER JOIN customers r ON l.customer_id=r.customer_id;"
    },
    {
      "name": "Left join orders → customers",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN orders with customers.",
      "sql": "SELECT * FROM orders l LEFT JOIN customers r ON l.customer_id=r.customer_id;"
    },
    {
      "name": "Join orders → customers aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.customer_id AS key, COUNT(*) AS cnt\nFROM orders l JOIN customers r ON l.customer_id=r.customer_id\nGROUP BY r.customer_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join orders → customers with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM orders l JOIN customers r ON l.customer_id=r.customer_id WHERE r.customer_id = ?;"
    },
    {
      "name": "Join orders → customers window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.customer_id ORDER BY l.customer_id) AS rn\nFROM orders l JOIN customers r ON l.customer_id=r.customer_id;"
    },
    {
      "name": "Join order_items → orders",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN order_items with orders.",
      "sql": "SELECT * FROM order_items l INNER JOIN orders r ON l.order_id=r.order_id;"
    },
    {
      "name": "Left join order_items → orders",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN order_items with orders.",
      "sql": "SELECT * FROM order_items l LEFT JOIN orders r ON l.order_id=r.order_id;"
    },
    {
      "name": "Join order_items → orders aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.order_id AS key, COUNT(*) AS cnt\nFROM order_items l JOIN orders r ON l.order_id=r.order_id\nGROUP BY r.order_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join order_items → orders with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM order_items l JOIN orders r ON l.order_id=r.order_id WHERE r.order_id = ?;"
    },
    {
      "name": "Join order_items → orders window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.order_id ORDER BY l.order_id) AS rn\nFROM order_items l JOIN orders r ON l.order_id=r.order_id;"
    },
    {
      "name": "Join order_items → products",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN order_items with products.",
      "sql": "SELECT * FROM order_items l INNER JOIN products r ON l.product_id=r.product_id;"
    },
    {
      "name": "Left join order_items → products",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN order_items with products.",
      "sql": "SELECT * FROM order_items l LEFT JOIN products r ON l.product_id=r.product_id;"
    },
    {
      "name": "Join order_items → products aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.product_id AS key, COUNT(*) AS cnt\nFROM order_items l JOIN products r ON l.product_id=r.product_id\nGROUP BY r.product_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join order_items → products with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM order_items l JOIN products r ON l.product_id=r.product_id WHERE r.product_id = ?;"
    },
    {
      "name": "Join order_items → products window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.product_id ORDER BY l.product_id) AS rn\nFROM order_items l JOIN products r ON l.product_id=r.product_id;"
    },
    {
      "name": "Join employees → departments",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN employees with departments.",
      "sql": "SELECT * FROM employees l INNER JOIN departments r ON l.dept_id=r.dept_id;"
    },
    {
      "name": "Left join employees → departments",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN employees with departments.",
      "sql": "SELECT * FROM employees l LEFT JOIN departments r ON l.dept_id=r.dept_id;"
    },
    {
      "name": "Join employees → departments aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.dept_id AS key, COUNT(*) AS cnt\nFROM employees l JOIN departments r ON l.dept_id=r.dept_id\nGROUP BY r.dept_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join employees → departments with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM employees l JOIN departments r ON l.dept_id=r.dept_id WHERE r.dept_id = ?;"
    },
    {
      "name": "Join employees → departments window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.dept_id ORDER BY l.dept_id) AS rn\nFROM employees l JOIN departments r ON l.dept_id=r.dept_id;"
    },
    {
      "name": "Join posts → comments",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN posts with comments.",
      "sql": "SELECT * FROM posts l INNER JOIN comments r ON l.post_id=r.post_id;"
    },
    {
      "name": "Left join posts → comments",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN posts with comments.",
      "sql": "SELECT * FROM posts l LEFT JOIN comments r ON l.post_id=r.post_id;"
    },
    {
      "name": "Join posts → comments aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.post_id AS key, COUNT(*) AS cnt\nFROM posts l JOIN comments r ON l.post_id=r.post_id\nGROUP BY r.post_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join posts → comments with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM posts l JOIN comments r ON l.post_id=r.post_id WHERE r.post_id = ?;"
    },
    {
      "name": "Join posts → comments window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.post_id ORDER BY l.post_id) AS rn\nFROM posts l JOIN comments r ON l.post_id=r.post_id;"
    },
    {
      "name": "Join books → authors",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN books with authors.",
      "sql": "SELECT * FROM books l INNER JOIN authors r ON l.author_id=r.author_id;"
    },
    {
      "name": "Left join books → authors",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN books with authors.",
      "sql": "SELECT * FROM books l LEFT JOIN authors r ON l.author_id=r.author_id;"
    },
    {
      "name": "Join books → authors aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.author_id AS key, COUNT(*) AS cnt\nFROM books l JOIN authors r ON l.author_id=r.author_id\nGROUP BY r.author_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join books → authors with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM books l JOIN authors r ON l.author_id=r.author_id WHERE r.author_id = ?;"
    },
    {
      "name": "Join books → authors window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.author_id ORDER BY l.author_id) AS rn\nFROM books l JOIN authors r ON l.author_id=r.author_id;"
    },
    {
      "name": "Join loans → books",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN loans with books.",
      "sql": "SELECT * FROM loans l INNER JOIN books r ON l.book_id=r.book_id;"
    },
    {
      "name": "Left join loans → books",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN loans with books.",
      "sql": "SELECT * FROM loans l LEFT JOIN books r ON l.book_id=r.book_id;"
    },
    {
      "name": "Join loans → books aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.book_id AS key, COUNT(*) AS cnt\nFROM loans l JOIN books r ON l.book_id=r.book_id\nGROUP BY r.book_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join loans → books with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM loans l JOIN books r ON l.book_id=r.book_id WHERE r.book_id = ?;"
    },
    {
      "name": "Join loans → books window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.book_id ORDER BY l.book_id) AS rn\nFROM loans l JOIN books r ON l.book_id=r.book_id;"
    },
    {
      "name": "Join loans → members",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN loans with members.",
      "sql": "SELECT * FROM loans l INNER JOIN members r ON l.member_id=r.member_id;"
    },
    {
      "name": "Left join loans → members",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN loans with members.",
      "sql": "SELECT * FROM loans l LEFT JOIN members r ON l.member_id=r.member_id;"
    },
    {
      "name": "Join loans → members aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.member_id AS key, COUNT(*) AS cnt\nFROM loans l JOIN members r ON l.member_id=r.member_id\nGROUP BY r.member_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join loans → members with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM loans l JOIN members r ON l.member_id=r.member_id WHERE r.member_id = ?;"
    },
    {
      "name": "Join loans → members window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.member_id ORDER BY l.member_id) AS rn\nFROM loans l JOIN members r ON l.member_id=r.member_id;"
    },
    {
      "name": "Join sensors → devices",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN sensors with devices.",
      "sql": "SELECT * FROM sensors l INNER JOIN devices r ON l.device_id=r.device_id;"
    },
    {
      "name": "Left join sensors → devices",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN sensors with devices.",
      "sql": "SELECT * FROM sensors l LEFT JOIN devices r ON l.device_id=r.device_id;"
    },
    {
      "name": "Join sensors → devices aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.device_id AS key, COUNT(*) AS cnt\nFROM sensors l JOIN devices r ON l.device_id=r.device_id\nGROUP BY r.device_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join sensors → devices with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM sensors l JOIN devices r ON l.device_id=r.device_id WHERE r.device_id = ?;"
    },
    {
      "name": "Join sensors → devices window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.device_id ORDER BY l.device_id) AS rn\nFROM sensors l JOIN devices r ON l.device_id=r.device_id;"
    },
    {
      "name": "Join readings → sensors",
      "category": "DQL/Joins/Inner",
      "description": "INNER JOIN readings with sensors.",
      "sql": "SELECT * FROM readings l INNER JOIN sensors r ON l.sensor_id=r.sensor_id;"
    },
    {
      "name": "Left join readings → sensors",
      "category": "DQL/Joins/Left",
      "description": "LEFT JOIN readings with sensors.",
      "sql": "SELECT * FROM readings l LEFT JOIN sensors r ON l.sensor_id=r.sensor_id;"
    },
    {
      "name": "Join readings → sensors aggregate",
      "category": "DQL/Joins/Aggregates",
      "description": "Join and aggregate.",
      "sql": "SELECT r.sensor_id AS key, COUNT(*) AS cnt\nFROM readings l JOIN sensors r ON l.sensor_id=r.sensor_id\nGROUP BY r.sensor_id\nHAVING COUNT(*) > 0;"
    },
    {
      "name": "Join readings → sensors with WHERE",
      "category": "DQL/Joins/Filters",
      "description": "Join with a filter on right.",
      "sql": "SELECT * FROM readings l JOIN sensors r ON l.sensor_id=r.sensor_id WHERE r.sensor_id = ?;"
    },
    {
      "name": "Join readings → sensors window ROW_NUMBER",
      "category": "DQL/Joins/Windows",
      "description": "Join with a window function.",
      "sql": "SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.sensor_id ORDER BY l.sensor_id) AS rn\nFROM readings l JOIN sensors r ON l.sensor_id=r.sensor_id;"
    },
    {
      "name": "CTE recent_orders + join customers",
      "category": "DQL/CTE",
      "description": "WITH CTE then join.",
      "sql": "WITH recent_orders AS (\n  SELECT * FROM orders WHERE created_at >= date('now','-7 days')\n)\nSELECT ro.order_id, c.name\nFROM recent_orders ro JOIN customers c ON ro.customer_id=c.customer_id;"
    },
    {
      "name": "Recursive CTE (numbers 1..10)",
      "category": "DQL/CTE/Recursive",
      "description": "Generate numbers using recursive CTE.",
      "sql": "WITH RECURSIVE nums(n) AS (\n  SELECT 1\n  UNION ALL\n  SELECT n+1 FROM nums WHERE n < 10\n)\nSELECT * FROM nums;"
    },
    {
      "name": "EXISTS example: customers with orders",
      "category": "DQL/Subqueries/EXISTS",
      "description": "Customers who have at least one order.",
      "sql": "SELECT * FROM customers c WHERE EXISTS (\n  SELECT 1 FROM orders o WHERE o.customer_id=c.customer_id\n);"
    },
    {
      "name": "IN example: products in a given set",
      "category": "DQL/Subqueries/IN",
      "description": "IN filter example.",
      "sql": "SELECT * FROM products WHERE product_id IN (SELECT product_id FROM order_items);"
    },
    {
      "name": "Scalar subquery in SELECT",
      "category": "DQL/Subqueries/Scalar",
      "description": "Count comments per post using scalar subquery.",
      "sql": "SELECT p.post_id, p.title,\n  (SELECT COUNT(*) FROM comments c WHERE c.post_id=p.post_id) AS comment_count\nFROM posts p;"
    },
    {
      "name": "UNION example",
      "category": "DQL/Sets/UNION",
      "description": "UNION two compatible SELECTs.",
      "sql": "SELECT name FROM customers\nUNION\nSELECT name FROM members;"
    },
    {
      "name": "INTERSECT example",
      "category": "DQL/Sets/INTERSECT",
      "description": "INTERSECT two sets.",
      "sql": "SELECT email FROM customers\nINTERSECT\nSELECT author FROM comments;"
    },
    {
      "name": "EXCEPT example",
      "category": "DQL/Sets/EXCEPT",
      "description": "EXCEPT two sets.",
      "sql": "SELECT name FROM customers\nEXCEPT\nSELECT name FROM people;"
    },
    {
      "name": "Transaction: BEGIN...COMMIT",
      "category": "TCL/Transaction",
      "description": "Wrap two inserts in a transaction.",
      "sql": "BEGIN;\nINSERT INTO people(name, age) VALUES('X', 1);\nINSERT INTO people(name, age) VALUES('Y', 2);\nCOMMIT;"
    },
    {
      "name": "Transaction: ROLLBACK",
      "category": "TCL/Transaction",
      "description": "Rollback demo.",
      "sql": "BEGIN;\nINSERT INTO people(name, age) VALUES('Z', 3);\nROLLBACK;"
    },
    {
      "name": "Transaction: SAVEPOINT/RELEASE",
      "category": "TCL/Savepoint",
      "description": "Savepoint demo.",
      "sql": "BEGIN;\nSAVEPOINT sp1;\nINSERT INTO people(name, age) VALUES('A',10);\nROLLBACK TO sp1;\nRELEASE sp1;\nCOMMIT;"
    },
    {
      "name": "DCL placeholder: GRANT (not in SQLite)",
      "category": "DCL/Grant",
      "description": "SQLite ignores GRANT/REVOKE; kept as commented example.",
      "sql": "-- GRANT SELECT ON table TO user; -- not supported in SQLite"
    },
    {
      "name": "DCL placeholder: REVOKE (not in SQLite)",
      "category": "DCL/Revoke",
      "description": "SQLite ignores GRANT/REVOKE; kept as commented example.",
      "sql": "-- REVOKE SELECT ON table FROM user; -- not supported in SQLite"
    },
    {
      "name": "Select people order by id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY id ASC LIMIT 5",
      "sql": "SELECT * FROM people ORDER BY id ASC LIMIT 5;"
    },
    {
      "name": "Select people order by id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY id DESC LIMIT 5",
      "sql": "SELECT * FROM people ORDER BY id DESC LIMIT 5;"
    },
    {
      "name": "Select people order by id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY id ASC LIMIT 10",
      "sql": "SELECT * FROM people ORDER BY id ASC LIMIT 10;"
    },
    {
      "name": "Select people order by id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY id DESC LIMIT 10",
      "sql": "SELECT * FROM people ORDER BY id DESC LIMIT 10;"
    },
    {
      "name": "Select people order by id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY id ASC LIMIT 20",
      "sql": "SELECT * FROM people ORDER BY id ASC LIMIT 20;"
    },
    {
      "name": "Select people order by id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY id DESC LIMIT 20",
      "sql": "SELECT * FROM people ORDER BY id DESC LIMIT 20;"
    },
    {
      "name": "Select people order by id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY id ASC LIMIT 50",
      "sql": "SELECT * FROM people ORDER BY id ASC LIMIT 50;"
    },
    {
      "name": "Select people order by id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY id DESC LIMIT 50",
      "sql": "SELECT * FROM people ORDER BY id DESC LIMIT 50;"
    },
    {
      "name": "Find people by name LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %a%",
      "sql": "SELECT * FROM people WHERE name LIKE '%a%';"
    },
    {
      "name": "Find people by name LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %e%",
      "sql": "SELECT * FROM people WHERE name LIKE '%e%';"
    },
    {
      "name": "Find people by name LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %test%",
      "sql": "SELECT * FROM people WHERE name LIKE '%test%';"
    },
    {
      "name": "Find people by name LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %@example.com",
      "sql": "SELECT * FROM people WHERE name LIKE '%@example.com';"
    },
    {
      "name": "people where age between 0 and 10",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on age.",
      "sql": "SELECT * FROM people WHERE age BETWEEN 0 AND 10;"
    },
    {
      "name": "people where age between 10 and 100",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on age.",
      "sql": "SELECT * FROM people WHERE age BETWEEN 10 AND 100;"
    },
    {
      "name": "people where age between 100 and 1000",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on age.",
      "sql": "SELECT * FROM people WHERE age BETWEEN 100 AND 1000;"
    },
    {
      "name": "Select customers order by customer_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY customer_id ASC LIMIT 5",
      "sql": "SELECT * FROM customers ORDER BY customer_id ASC LIMIT 5;"
    },
    {
      "name": "Select customers order by customer_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY customer_id DESC LIMIT 5",
      "sql": "SELECT * FROM customers ORDER BY customer_id DESC LIMIT 5;"
    },
    {
      "name": "Select customers order by customer_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY customer_id ASC LIMIT 10",
      "sql": "SELECT * FROM customers ORDER BY customer_id ASC LIMIT 10;"
    },
    {
      "name": "Select customers order by customer_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY customer_id DESC LIMIT 10",
      "sql": "SELECT * FROM customers ORDER BY customer_id DESC LIMIT 10;"
    },
    {
      "name": "Select customers order by customer_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY customer_id ASC LIMIT 20",
      "sql": "SELECT * FROM customers ORDER BY customer_id ASC LIMIT 20;"
    },
    {
      "name": "Select customers order by customer_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY customer_id DESC LIMIT 20",
      "sql": "SELECT * FROM customers ORDER BY customer_id DESC LIMIT 20;"
    },
    {
      "name": "Select customers order by customer_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY customer_id ASC LIMIT 50",
      "sql": "SELECT * FROM customers ORDER BY customer_id ASC LIMIT 50;"
    },
    {
      "name": "Select customers order by customer_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY customer_id DESC LIMIT 50",
      "sql": "SELECT * FROM customers ORDER BY customer_id DESC LIMIT 50;"
    },
    {
      "name": "Find customers by name LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %a%",
      "sql": "SELECT * FROM customers WHERE name LIKE '%a%';"
    },
    {
      "name": "Find customers by name LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %e%",
      "sql": "SELECT * FROM customers WHERE name LIKE '%e%';"
    },
    {
      "name": "Find customers by name LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %test%",
      "sql": "SELECT * FROM customers WHERE name LIKE '%test%';"
    },
    {
      "name": "Find customers by name LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %@example.com",
      "sql": "SELECT * FROM customers WHERE name LIKE '%@example.com';"
    },
    {
      "name": "Select products order by product_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY product_id ASC LIMIT 5",
      "sql": "SELECT * FROM products ORDER BY product_id ASC LIMIT 5;"
    },
    {
      "name": "Select products order by product_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY product_id DESC LIMIT 5",
      "sql": "SELECT * FROM products ORDER BY product_id DESC LIMIT 5;"
    },
    {
      "name": "Select products order by product_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY product_id ASC LIMIT 10",
      "sql": "SELECT * FROM products ORDER BY product_id ASC LIMIT 10;"
    },
    {
      "name": "Select products order by product_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY product_id DESC LIMIT 10",
      "sql": "SELECT * FROM products ORDER BY product_id DESC LIMIT 10;"
    },
    {
      "name": "Select products order by product_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY product_id ASC LIMIT 20",
      "sql": "SELECT * FROM products ORDER BY product_id ASC LIMIT 20;"
    },
    {
      "name": "Select products order by product_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY product_id DESC LIMIT 20",
      "sql": "SELECT * FROM products ORDER BY product_id DESC LIMIT 20;"
    },
    {
      "name": "Select products order by product_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY product_id ASC LIMIT 50",
      "sql": "SELECT * FROM products ORDER BY product_id ASC LIMIT 50;"
    },
    {
      "name": "Select products order by product_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY product_id DESC LIMIT 50",
      "sql": "SELECT * FROM products ORDER BY product_id DESC LIMIT 50;"
    },
    {
      "name": "Find products by name LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %a%",
      "sql": "SELECT * FROM products WHERE name LIKE '%a%';"
    },
    {
      "name": "Find products by name LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %e%",
      "sql": "SELECT * FROM products WHERE name LIKE '%e%';"
    },
    {
      "name": "Find products by name LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %test%",
      "sql": "SELECT * FROM products WHERE name LIKE '%test%';"
    },
    {
      "name": "Find products by name LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %@example.com",
      "sql": "SELECT * FROM products WHERE name LIKE '%@example.com';"
    },
    {
      "name": "products where price between 0 and 10",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on price.",
      "sql": "SELECT * FROM products WHERE price BETWEEN 0 AND 10;"
    },
    {
      "name": "products where price between 10 and 100",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on price.",
      "sql": "SELECT * FROM products WHERE price BETWEEN 10 AND 100;"
    },
    {
      "name": "products where price between 100 and 1000",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on price.",
      "sql": "SELECT * FROM products WHERE price BETWEEN 100 AND 1000;"
    },
    {
      "name": "Select orders order by order_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id ASC LIMIT 5",
      "sql": "SELECT * FROM orders ORDER BY order_id ASC LIMIT 5;"
    },
    {
      "name": "Select orders order by order_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC LIMIT 5",
      "sql": "SELECT * FROM orders ORDER BY order_id DESC LIMIT 5;"
    },
    {
      "name": "Select orders order by order_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id ASC LIMIT 10",
      "sql": "SELECT * FROM orders ORDER BY order_id ASC LIMIT 10;"
    },
    {
      "name": "Select orders order by order_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC LIMIT 10",
      "sql": "SELECT * FROM orders ORDER BY order_id DESC LIMIT 10;"
    },
    {
      "name": "Select orders order by order_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id ASC LIMIT 20",
      "sql": "SELECT * FROM orders ORDER BY order_id ASC LIMIT 20;"
    },
    {
      "name": "Select orders order by order_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC LIMIT 20",
      "sql": "SELECT * FROM orders ORDER BY order_id DESC LIMIT 20;"
    },
    {
      "name": "Select orders order by order_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id ASC LIMIT 50",
      "sql": "SELECT * FROM orders ORDER BY order_id ASC LIMIT 50;"
    },
    {
      "name": "Select orders order by order_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC LIMIT 50",
      "sql": "SELECT * FROM orders ORDER BY order_id DESC LIMIT 50;"
    },
    {
      "name": "Select order_items order by order_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id ASC LIMIT 5",
      "sql": "SELECT * FROM order_items ORDER BY order_id ASC LIMIT 5;"
    },
    {
      "name": "Select order_items order by order_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC LIMIT 5",
      "sql": "SELECT * FROM order_items ORDER BY order_id DESC LIMIT 5;"
    },
    {
      "name": "Select order_items order by order_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id ASC LIMIT 10",
      "sql": "SELECT * FROM order_items ORDER BY order_id ASC LIMIT 10;"
    },
    {
      "name": "Select order_items order by order_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC LIMIT 10",
      "sql": "SELECT * FROM order_items ORDER BY order_id DESC LIMIT 10;"
    },
    {
      "name": "Select order_items order by order_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id ASC LIMIT 20",
      "sql": "SELECT * FROM order_items ORDER BY order_id ASC LIMIT 20;"
    },
    {
      "name": "Select order_items order by order_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC LIMIT 20",
      "sql": "SELECT * FROM order_items ORDER BY order_id DESC LIMIT 20;"
    },
    {
      "name": "Select order_items order by order_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id ASC LIMIT 50",
      "sql": "SELECT * FROM order_items ORDER BY order_id ASC LIMIT 50;"
    },
    {
      "name": "Select order_items order by order_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY order_id DESC LIMIT 50",
      "sql": "SELECT * FROM order_items ORDER BY order_id DESC LIMIT 50;"
    },
    {
      "name": "order_items where qty between 0 and 10",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on qty.",
      "sql": "SELECT * FROM order_items WHERE qty BETWEEN 0 AND 10;"
    },
    {
      "name": "order_items where qty between 10 and 100",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on qty.",
      "sql": "SELECT * FROM order_items WHERE qty BETWEEN 10 AND 100;"
    },
    {
      "name": "order_items where qty between 100 and 1000",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on qty.",
      "sql": "SELECT * FROM order_items WHERE qty BETWEEN 100 AND 1000;"
    },
    {
      "name": "Select employees order by emp_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY emp_id ASC LIMIT 5",
      "sql": "SELECT * FROM employees ORDER BY emp_id ASC LIMIT 5;"
    },
    {
      "name": "Select employees order by emp_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY emp_id DESC LIMIT 5",
      "sql": "SELECT * FROM employees ORDER BY emp_id DESC LIMIT 5;"
    },
    {
      "name": "Select employees order by emp_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY emp_id ASC LIMIT 10",
      "sql": "SELECT * FROM employees ORDER BY emp_id ASC LIMIT 10;"
    },
    {
      "name": "Select employees order by emp_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY emp_id DESC LIMIT 10",
      "sql": "SELECT * FROM employees ORDER BY emp_id DESC LIMIT 10;"
    },
    {
      "name": "Select employees order by emp_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY emp_id ASC LIMIT 20",
      "sql": "SELECT * FROM employees ORDER BY emp_id ASC LIMIT 20;"
    },
    {
      "name": "Select employees order by emp_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY emp_id DESC LIMIT 20",
      "sql": "SELECT * FROM employees ORDER BY emp_id DESC LIMIT 20;"
    },
    {
      "name": "Select employees order by emp_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY emp_id ASC LIMIT 50",
      "sql": "SELECT * FROM employees ORDER BY emp_id ASC LIMIT 50;"
    },
    {
      "name": "Select employees order by emp_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY emp_id DESC LIMIT 50",
      "sql": "SELECT * FROM employees ORDER BY emp_id DESC LIMIT 50;"
    },
    {
      "name": "Find employees by first_name LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on first_name pattern %a%",
      "sql": "SELECT * FROM employees WHERE first_name LIKE '%a%';"
    },
    {
      "name": "Find employees by first_name LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on first_name pattern %e%",
      "sql": "SELECT * FROM employees WHERE first_name LIKE '%e%';"
    },
    {
      "name": "Find employees by first_name LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on first_name pattern %test%",
      "sql": "SELECT * FROM employees WHERE first_name LIKE '%test%';"
    },
    {
      "name": "Find employees by first_name LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on first_name pattern %@example.com",
      "sql": "SELECT * FROM employees WHERE first_name LIKE '%@example.com';"
    },
    {
      "name": "employees where salary between 0 and 10",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on salary.",
      "sql": "SELECT * FROM employees WHERE salary BETWEEN 0 AND 10;"
    },
    {
      "name": "employees where salary between 10 and 100",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on salary.",
      "sql": "SELECT * FROM employees WHERE salary BETWEEN 10 AND 100;"
    },
    {
      "name": "employees where salary between 100 and 1000",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on salary.",
      "sql": "SELECT * FROM employees WHERE salary BETWEEN 100 AND 1000;"
    },
    {
      "name": "Select departments order by dept_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY dept_id ASC LIMIT 5",
      "sql": "SELECT * FROM departments ORDER BY dept_id ASC LIMIT 5;"
    },
    {
      "name": "Select departments order by dept_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY dept_id DESC LIMIT 5",
      "sql": "SELECT * FROM departments ORDER BY dept_id DESC LIMIT 5;"
    },
    {
      "name": "Select departments order by dept_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY dept_id ASC LIMIT 10",
      "sql": "SELECT * FROM departments ORDER BY dept_id ASC LIMIT 10;"
    },
    {
      "name": "Select departments order by dept_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY dept_id DESC LIMIT 10",
      "sql": "SELECT * FROM departments ORDER BY dept_id DESC LIMIT 10;"
    },
    {
      "name": "Select departments order by dept_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY dept_id ASC LIMIT 20",
      "sql": "SELECT * FROM departments ORDER BY dept_id ASC LIMIT 20;"
    },
    {
      "name": "Select departments order by dept_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY dept_id DESC LIMIT 20",
      "sql": "SELECT * FROM departments ORDER BY dept_id DESC LIMIT 20;"
    },
    {
      "name": "Select departments order by dept_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY dept_id ASC LIMIT 50",
      "sql": "SELECT * FROM departments ORDER BY dept_id ASC LIMIT 50;"
    },
    {
      "name": "Select departments order by dept_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY dept_id DESC LIMIT 50",
      "sql": "SELECT * FROM departments ORDER BY dept_id DESC LIMIT 50;"
    },
    {
      "name": "Find departments by dept_name LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on dept_name pattern %a%",
      "sql": "SELECT * FROM departments WHERE dept_name LIKE '%a%';"
    },
    {
      "name": "Find departments by dept_name LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on dept_name pattern %e%",
      "sql": "SELECT * FROM departments WHERE dept_name LIKE '%e%';"
    },
    {
      "name": "Find departments by dept_name LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on dept_name pattern %test%",
      "sql": "SELECT * FROM departments WHERE dept_name LIKE '%test%';"
    },
    {
      "name": "Find departments by dept_name LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on dept_name pattern %@example.com",
      "sql": "SELECT * FROM departments WHERE dept_name LIKE '%@example.com';"
    },
    {
      "name": "Select posts order by post_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id ASC LIMIT 5",
      "sql": "SELECT * FROM posts ORDER BY post_id ASC LIMIT 5;"
    },
    {
      "name": "Select posts order by post_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC LIMIT 5",
      "sql": "SELECT * FROM posts ORDER BY post_id DESC LIMIT 5;"
    },
    {
      "name": "Select posts order by post_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id ASC LIMIT 10",
      "sql": "SELECT * FROM posts ORDER BY post_id ASC LIMIT 10;"
    },
    {
      "name": "Select posts order by post_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC LIMIT 10",
      "sql": "SELECT * FROM posts ORDER BY post_id DESC LIMIT 10;"
    },
    {
      "name": "Select posts order by post_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id ASC LIMIT 20",
      "sql": "SELECT * FROM posts ORDER BY post_id ASC LIMIT 20;"
    },
    {
      "name": "Select posts order by post_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC LIMIT 20",
      "sql": "SELECT * FROM posts ORDER BY post_id DESC LIMIT 20;"
    },
    {
      "name": "Select posts order by post_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id ASC LIMIT 50",
      "sql": "SELECT * FROM posts ORDER BY post_id ASC LIMIT 50;"
    },
    {
      "name": "Select posts order by post_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC LIMIT 50",
      "sql": "SELECT * FROM posts ORDER BY post_id DESC LIMIT 50;"
    },
    {
      "name": "Find posts by title LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on title pattern %a%",
      "sql": "SELECT * FROM posts WHERE title LIKE '%a%';"
    },
    {
      "name": "Find posts by title LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on title pattern %e%",
      "sql": "SELECT * FROM posts WHERE title LIKE '%e%';"
    },
    {
      "name": "Find posts by title LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on title pattern %test%",
      "sql": "SELECT * FROM posts WHERE title LIKE '%test%';"
    },
    {
      "name": "Find posts by title LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on title pattern %@example.com",
      "sql": "SELECT * FROM posts WHERE title LIKE '%@example.com';"
    },
    {
      "name": "Select comments order by comment_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY comment_id ASC LIMIT 5",
      "sql": "SELECT * FROM comments ORDER BY comment_id ASC LIMIT 5;"
    },
    {
      "name": "Select comments order by comment_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY comment_id DESC LIMIT 5",
      "sql": "SELECT * FROM comments ORDER BY comment_id DESC LIMIT 5;"
    },
    {
      "name": "Select comments order by comment_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY comment_id ASC LIMIT 10",
      "sql": "SELECT * FROM comments ORDER BY comment_id ASC LIMIT 10;"
    },
    {
      "name": "Select comments order by comment_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY comment_id DESC LIMIT 10",
      "sql": "SELECT * FROM comments ORDER BY comment_id DESC LIMIT 10;"
    },
    {
      "name": "Select comments order by comment_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY comment_id ASC LIMIT 20",
      "sql": "SELECT * FROM comments ORDER BY comment_id ASC LIMIT 20;"
    },
    {
      "name": "Select comments order by comment_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY comment_id DESC LIMIT 20",
      "sql": "SELECT * FROM comments ORDER BY comment_id DESC LIMIT 20;"
    },
    {
      "name": "Select comments order by comment_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY comment_id ASC LIMIT 50",
      "sql": "SELECT * FROM comments ORDER BY comment_id ASC LIMIT 50;"
    },
    {
      "name": "Select comments order by comment_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY comment_id DESC LIMIT 50",
      "sql": "SELECT * FROM comments ORDER BY comment_id DESC LIMIT 50;"
    },
    {
      "name": "Find comments by author LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on author pattern %a%",
      "sql": "SELECT * FROM comments WHERE author LIKE '%a%';"
    },
    {
      "name": "Find comments by author LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on author pattern %e%",
      "sql": "SELECT * FROM comments WHERE author LIKE '%e%';"
    },
    {
      "name": "Find comments by author LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on author pattern %test%",
      "sql": "SELECT * FROM comments WHERE author LIKE '%test%';"
    },
    {
      "name": "Find comments by author LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on author pattern %@example.com",
      "sql": "SELECT * FROM comments WHERE author LIKE '%@example.com';"
    },
    {
      "name": "Select tags order by tag_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY tag_id ASC LIMIT 5",
      "sql": "SELECT * FROM tags ORDER BY tag_id ASC LIMIT 5;"
    },
    {
      "name": "Select tags order by tag_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY tag_id DESC LIMIT 5",
      "sql": "SELECT * FROM tags ORDER BY tag_id DESC LIMIT 5;"
    },
    {
      "name": "Select tags order by tag_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY tag_id ASC LIMIT 10",
      "sql": "SELECT * FROM tags ORDER BY tag_id ASC LIMIT 10;"
    },
    {
      "name": "Select tags order by tag_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY tag_id DESC LIMIT 10",
      "sql": "SELECT * FROM tags ORDER BY tag_id DESC LIMIT 10;"
    },
    {
      "name": "Select tags order by tag_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY tag_id ASC LIMIT 20",
      "sql": "SELECT * FROM tags ORDER BY tag_id ASC LIMIT 20;"
    },
    {
      "name": "Select tags order by tag_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY tag_id DESC LIMIT 20",
      "sql": "SELECT * FROM tags ORDER BY tag_id DESC LIMIT 20;"
    },
    {
      "name": "Select tags order by tag_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY tag_id ASC LIMIT 50",
      "sql": "SELECT * FROM tags ORDER BY tag_id ASC LIMIT 50;"
    },
    {
      "name": "Select tags order by tag_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY tag_id DESC LIMIT 50",
      "sql": "SELECT * FROM tags ORDER BY tag_id DESC LIMIT 50;"
    },
    {
      "name": "Find tags by name LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %a%",
      "sql": "SELECT * FROM tags WHERE name LIKE '%a%';"
    },
    {
      "name": "Find tags by name LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %e%",
      "sql": "SELECT * FROM tags WHERE name LIKE '%e%';"
    },
    {
      "name": "Find tags by name LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %test%",
      "sql": "SELECT * FROM tags WHERE name LIKE '%test%';"
    },
    {
      "name": "Find tags by name LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %@example.com",
      "sql": "SELECT * FROM tags WHERE name LIKE '%@example.com';"
    },
    {
      "name": "Select post_tags order by post_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id ASC LIMIT 5",
      "sql": "SELECT * FROM post_tags ORDER BY post_id ASC LIMIT 5;"
    },
    {
      "name": "Select post_tags order by post_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC LIMIT 5",
      "sql": "SELECT * FROM post_tags ORDER BY post_id DESC LIMIT 5;"
    },
    {
      "name": "Select post_tags order by post_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id ASC LIMIT 10",
      "sql": "SELECT * FROM post_tags ORDER BY post_id ASC LIMIT 10;"
    },
    {
      "name": "Select post_tags order by post_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC LIMIT 10",
      "sql": "SELECT * FROM post_tags ORDER BY post_id DESC LIMIT 10;"
    },
    {
      "name": "Select post_tags order by post_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id ASC LIMIT 20",
      "sql": "SELECT * FROM post_tags ORDER BY post_id ASC LIMIT 20;"
    },
    {
      "name": "Select post_tags order by post_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC LIMIT 20",
      "sql": "SELECT * FROM post_tags ORDER BY post_id DESC LIMIT 20;"
    },
    {
      "name": "Select post_tags order by post_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id ASC LIMIT 50",
      "sql": "SELECT * FROM post_tags ORDER BY post_id ASC LIMIT 50;"
    },
    {
      "name": "Select post_tags order by post_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY post_id DESC LIMIT 50",
      "sql": "SELECT * FROM post_tags ORDER BY post_id DESC LIMIT 50;"
    },
    {
      "name": "Select books order by book_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY book_id ASC LIMIT 5",
      "sql": "SELECT * FROM books ORDER BY book_id ASC LIMIT 5;"
    },
    {
      "name": "Select books order by book_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY book_id DESC LIMIT 5",
      "sql": "SELECT * FROM books ORDER BY book_id DESC LIMIT 5;"
    },
    {
      "name": "Select books order by book_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY book_id ASC LIMIT 10",
      "sql": "SELECT * FROM books ORDER BY book_id ASC LIMIT 10;"
    },
    {
      "name": "Select books order by book_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY book_id DESC LIMIT 10",
      "sql": "SELECT * FROM books ORDER BY book_id DESC LIMIT 10;"
    },
    {
      "name": "Select books order by book_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY book_id ASC LIMIT 20",
      "sql": "SELECT * FROM books ORDER BY book_id ASC LIMIT 20;"
    },
    {
      "name": "Select books order by book_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY book_id DESC LIMIT 20",
      "sql": "SELECT * FROM books ORDER BY book_id DESC LIMIT 20;"
    },
    {
      "name": "Select books order by book_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY book_id ASC LIMIT 50",
      "sql": "SELECT * FROM books ORDER BY book_id ASC LIMIT 50;"
    },
    {
      "name": "Select books order by book_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY book_id DESC LIMIT 50",
      "sql": "SELECT * FROM books ORDER BY book_id DESC LIMIT 50;"
    },
    {
      "name": "Find books by title LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on title pattern %a%",
      "sql": "SELECT * FROM books WHERE title LIKE '%a%';"
    },
    {
      "name": "Find books by title LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on title pattern %e%",
      "sql": "SELECT * FROM books WHERE title LIKE '%e%';"
    },
    {
      "name": "Find books by title LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on title pattern %test%",
      "sql": "SELECT * FROM books WHERE title LIKE '%test%';"
    },
    {
      "name": "Find books by title LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on title pattern %@example.com",
      "sql": "SELECT * FROM books WHERE title LIKE '%@example.com';"
    },
    {
      "name": "books where price between 0 and 10",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on price.",
      "sql": "SELECT * FROM books WHERE price BETWEEN 0 AND 10;"
    },
    {
      "name": "books where price between 10 and 100",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on price.",
      "sql": "SELECT * FROM books WHERE price BETWEEN 10 AND 100;"
    },
    {
      "name": "books where price between 100 and 1000",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on price.",
      "sql": "SELECT * FROM books WHERE price BETWEEN 100 AND 1000;"
    },
    {
      "name": "Select authors order by author_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY author_id ASC LIMIT 5",
      "sql": "SELECT * FROM authors ORDER BY author_id ASC LIMIT 5;"
    },
    {
      "name": "Select authors order by author_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY author_id DESC LIMIT 5",
      "sql": "SELECT * FROM authors ORDER BY author_id DESC LIMIT 5;"
    },
    {
      "name": "Select authors order by author_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY author_id ASC LIMIT 10",
      "sql": "SELECT * FROM authors ORDER BY author_id ASC LIMIT 10;"
    },
    {
      "name": "Select authors order by author_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY author_id DESC LIMIT 10",
      "sql": "SELECT * FROM authors ORDER BY author_id DESC LIMIT 10;"
    },
    {
      "name": "Select authors order by author_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY author_id ASC LIMIT 20",
      "sql": "SELECT * FROM authors ORDER BY author_id ASC LIMIT 20;"
    },
    {
      "name": "Select authors order by author_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY author_id DESC LIMIT 20",
      "sql": "SELECT * FROM authors ORDER BY author_id DESC LIMIT 20;"
    },
    {
      "name": "Select authors order by author_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY author_id ASC LIMIT 50",
      "sql": "SELECT * FROM authors ORDER BY author_id ASC LIMIT 50;"
    },
    {
      "name": "Select authors order by author_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY author_id DESC LIMIT 50",
      "sql": "SELECT * FROM authors ORDER BY author_id DESC LIMIT 50;"
    },
    {
      "name": "Find authors by name LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %a%",
      "sql": "SELECT * FROM authors WHERE name LIKE '%a%';"
    },
    {
      "name": "Find authors by name LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %e%",
      "sql": "SELECT * FROM authors WHERE name LIKE '%e%';"
    },
    {
      "name": "Find authors by name LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %test%",
      "sql": "SELECT * FROM authors WHERE name LIKE '%test%';"
    },
    {
      "name": "Find authors by name LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %@example.com",
      "sql": "SELECT * FROM authors WHERE name LIKE '%@example.com';"
    },
    {
      "name": "Select loans order by loan_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY loan_id ASC LIMIT 5",
      "sql": "SELECT * FROM loans ORDER BY loan_id ASC LIMIT 5;"
    },
    {
      "name": "Select loans order by loan_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY loan_id DESC LIMIT 5",
      "sql": "SELECT * FROM loans ORDER BY loan_id DESC LIMIT 5;"
    },
    {
      "name": "Select loans order by loan_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY loan_id ASC LIMIT 10",
      "sql": "SELECT * FROM loans ORDER BY loan_id ASC LIMIT 10;"
    },
    {
      "name": "Select loans order by loan_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY loan_id DESC LIMIT 10",
      "sql": "SELECT * FROM loans ORDER BY loan_id DESC LIMIT 10;"
    },
    {
      "name": "Select loans order by loan_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY loan_id ASC LIMIT 20",
      "sql": "SELECT * FROM loans ORDER BY loan_id ASC LIMIT 20;"
    },
    {
      "name": "Select loans order by loan_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY loan_id DESC LIMIT 20",
      "sql": "SELECT * FROM loans ORDER BY loan_id DESC LIMIT 20;"
    },
    {
      "name": "Select loans order by loan_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY loan_id ASC LIMIT 50",
      "sql": "SELECT * FROM loans ORDER BY loan_id ASC LIMIT 50;"
    },
    {
      "name": "Select loans order by loan_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY loan_id DESC LIMIT 50",
      "sql": "SELECT * FROM loans ORDER BY loan_id DESC LIMIT 50;"
    },
    {
      "name": "Select members order by member_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY member_id ASC LIMIT 5",
      "sql": "SELECT * FROM members ORDER BY member_id ASC LIMIT 5;"
    },
    {
      "name": "Select members order by member_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY member_id DESC LIMIT 5",
      "sql": "SELECT * FROM members ORDER BY member_id DESC LIMIT 5;"
    },
    {
      "name": "Select members order by member_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY member_id ASC LIMIT 10",
      "sql": "SELECT * FROM members ORDER BY member_id ASC LIMIT 10;"
    },
    {
      "name": "Select members order by member_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY member_id DESC LIMIT 10",
      "sql": "SELECT * FROM members ORDER BY member_id DESC LIMIT 10;"
    },
    {
      "name": "Select members order by member_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY member_id ASC LIMIT 20",
      "sql": "SELECT * FROM members ORDER BY member_id ASC LIMIT 20;"
    },
    {
      "name": "Select members order by member_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY member_id DESC LIMIT 20",
      "sql": "SELECT * FROM members ORDER BY member_id DESC LIMIT 20;"
    },
    {
      "name": "Select members order by member_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY member_id ASC LIMIT 50",
      "sql": "SELECT * FROM members ORDER BY member_id ASC LIMIT 50;"
    },
    {
      "name": "Select members order by member_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY member_id DESC LIMIT 50",
      "sql": "SELECT * FROM members ORDER BY member_id DESC LIMIT 50;"
    },
    {
      "name": "Find members by name LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %a%",
      "sql": "SELECT * FROM members WHERE name LIKE '%a%';"
    },
    {
      "name": "Find members by name LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %e%",
      "sql": "SELECT * FROM members WHERE name LIKE '%e%';"
    },
    {
      "name": "Find members by name LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %test%",
      "sql": "SELECT * FROM members WHERE name LIKE '%test%';"
    },
    {
      "name": "Find members by name LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %@example.com",
      "sql": "SELECT * FROM members WHERE name LIKE '%@example.com';"
    },
    {
      "name": "Select devices order by device_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY device_id ASC LIMIT 5",
      "sql": "SELECT * FROM devices ORDER BY device_id ASC LIMIT 5;"
    },
    {
      "name": "Select devices order by device_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY device_id DESC LIMIT 5",
      "sql": "SELECT * FROM devices ORDER BY device_id DESC LIMIT 5;"
    },
    {
      "name": "Select devices order by device_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY device_id ASC LIMIT 10",
      "sql": "SELECT * FROM devices ORDER BY device_id ASC LIMIT 10;"
    },
    {
      "name": "Select devices order by device_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY device_id DESC LIMIT 10",
      "sql": "SELECT * FROM devices ORDER BY device_id DESC LIMIT 10;"
    },
    {
      "name": "Select devices order by device_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY device_id ASC LIMIT 20",
      "sql": "SELECT * FROM devices ORDER BY device_id ASC LIMIT 20;"
    },
    {
      "name": "Select devices order by device_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY device_id DESC LIMIT 20",
      "sql": "SELECT * FROM devices ORDER BY device_id DESC LIMIT 20;"
    },
    {
      "name": "Select devices order by device_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY device_id ASC LIMIT 50",
      "sql": "SELECT * FROM devices ORDER BY device_id ASC LIMIT 50;"
    },
    {
      "name": "Select devices order by device_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY device_id DESC LIMIT 50",
      "sql": "SELECT * FROM devices ORDER BY device_id DESC LIMIT 50;"
    },
    {
      "name": "Find devices by name LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %a%",
      "sql": "SELECT * FROM devices WHERE name LIKE '%a%';"
    },
    {
      "name": "Find devices by name LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %e%",
      "sql": "SELECT * FROM devices WHERE name LIKE '%e%';"
    },
    {
      "name": "Find devices by name LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %test%",
      "sql": "SELECT * FROM devices WHERE name LIKE '%test%';"
    },
    {
      "name": "Find devices by name LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on name pattern %@example.com",
      "sql": "SELECT * FROM devices WHERE name LIKE '%@example.com';"
    },
    {
      "name": "Select sensors order by sensor_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY sensor_id ASC LIMIT 5",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id ASC LIMIT 5;"
    },
    {
      "name": "Select sensors order by sensor_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY sensor_id DESC LIMIT 5",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id DESC LIMIT 5;"
    },
    {
      "name": "Select sensors order by sensor_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY sensor_id ASC LIMIT 10",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id ASC LIMIT 10;"
    },
    {
      "name": "Select sensors order by sensor_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY sensor_id DESC LIMIT 10",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id DESC LIMIT 10;"
    },
    {
      "name": "Select sensors order by sensor_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY sensor_id ASC LIMIT 20",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id ASC LIMIT 20;"
    },
    {
      "name": "Select sensors order by sensor_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY sensor_id DESC LIMIT 20",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id DESC LIMIT 20;"
    },
    {
      "name": "Select sensors order by sensor_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY sensor_id ASC LIMIT 50",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id ASC LIMIT 50;"
    },
    {
      "name": "Select sensors order by sensor_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY sensor_id DESC LIMIT 50",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id DESC LIMIT 50;"
    },
    {
      "name": "Find sensors by kind LIKE %a%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on kind pattern %a%",
      "sql": "SELECT * FROM sensors WHERE kind LIKE '%a%';"
    },
    {
      "name": "Find sensors by kind LIKE %e%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on kind pattern %e%",
      "sql": "SELECT * FROM sensors WHERE kind LIKE '%e%';"
    },
    {
      "name": "Find sensors by kind LIKE %test%",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on kind pattern %test%",
      "sql": "SELECT * FROM sensors WHERE kind LIKE '%test%';"
    },
    {
      "name": "Find sensors by kind LIKE %@example.com",
      "category": "DQL/Select/Filters/Like",
      "description": "LIKE on kind pattern %@example.com",
      "sql": "SELECT * FROM sensors WHERE kind LIKE '%@example.com';"
    },
    {
      "name": "Select readings order by reading_id ASC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY reading_id ASC LIMIT 5",
      "sql": "SELECT * FROM readings ORDER BY reading_id ASC LIMIT 5;"
    },
    {
      "name": "Select readings order by reading_id DESC limit 5",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY reading_id DESC LIMIT 5",
      "sql": "SELECT * FROM readings ORDER BY reading_id DESC LIMIT 5;"
    },
    {
      "name": "Select readings order by reading_id ASC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY reading_id ASC LIMIT 10",
      "sql": "SELECT * FROM readings ORDER BY reading_id ASC LIMIT 10;"
    },
    {
      "name": "Select readings order by reading_id DESC limit 10",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY reading_id DESC LIMIT 10",
      "sql": "SELECT * FROM readings ORDER BY reading_id DESC LIMIT 10;"
    },
    {
      "name": "Select readings order by reading_id ASC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY reading_id ASC LIMIT 20",
      "sql": "SELECT * FROM readings ORDER BY reading_id ASC LIMIT 20;"
    },
    {
      "name": "Select readings order by reading_id DESC limit 20",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY reading_id DESC LIMIT 20",
      "sql": "SELECT * FROM readings ORDER BY reading_id DESC LIMIT 20;"
    },
    {
      "name": "Select readings order by reading_id ASC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY reading_id ASC LIMIT 50",
      "sql": "SELECT * FROM readings ORDER BY reading_id ASC LIMIT 50;"
    },
    {
      "name": "Select readings order by reading_id DESC limit 50",
      "category": "DQL/Select/Ordering",
      "description": "ORDER BY reading_id DESC LIMIT 50",
      "sql": "SELECT * FROM readings ORDER BY reading_id DESC LIMIT 50;"
    },
    {
      "name": "readings where value between 0 and 10",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on value.",
      "sql": "SELECT * FROM readings WHERE value BETWEEN 0 AND 10;"
    },
    {
      "name": "readings where value between 10 and 100",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on value.",
      "sql": "SELECT * FROM readings WHERE value BETWEEN 10 AND 100;"
    },
    {
      "name": "readings where value between 100 and 1000",
      "category": "DQL/Select/Filters/Range",
      "description": "Numeric range on value.",
      "sql": "SELECT * FROM readings WHERE value BETWEEN 100 AND 1000;"
    },
    {
      "name": "Top-1 orders per customers by customer_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.customer_id ORDER BY l.customer_id DESC) rn\n  FROM orders l JOIN customers r ON l.customer_id=r.customer_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count orders per customers",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.customer_id AS key, COUNT(l.customer_id) AS child_count\nFROM customers r LEFT JOIN orders l ON l.customer_id=r.customer_id\nGROUP BY r.customer_id;"
    },
    {
      "name": "Top-1 order_items per orders by order_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.order_id ORDER BY l.order_id DESC) rn\n  FROM order_items l JOIN orders r ON l.order_id=r.order_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count order_items per orders",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.order_id AS key, COUNT(l.order_id) AS child_count\nFROM orders r LEFT JOIN order_items l ON l.order_id=r.order_id\nGROUP BY r.order_id;"
    },
    {
      "name": "Top-1 order_items per products by product_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.product_id ORDER BY l.product_id DESC) rn\n  FROM order_items l JOIN products r ON l.product_id=r.product_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count order_items per products",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.product_id AS key, COUNT(l.product_id) AS child_count\nFROM products r LEFT JOIN order_items l ON l.product_id=r.product_id\nGROUP BY r.product_id;"
    },
    {
      "name": "Top-1 employees per departments by dept_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.dept_id ORDER BY l.dept_id DESC) rn\n  FROM employees l JOIN departments r ON l.dept_id=r.dept_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count employees per departments",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.dept_id AS key, COUNT(l.dept_id) AS child_count\nFROM departments r LEFT JOIN employees l ON l.dept_id=r.dept_id\nGROUP BY r.dept_id;"
    },
    {
      "name": "Top-1 posts per comments by post_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.post_id ORDER BY l.post_id DESC) rn\n  FROM posts l JOIN comments r ON l.post_id=r.post_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count posts per comments",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.post_id AS key, COUNT(l.post_id) AS child_count\nFROM comments r LEFT JOIN posts l ON l.post_id=r.post_id\nGROUP BY r.post_id;"
    },
    {
      "name": "Top-1 books per authors by author_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.author_id ORDER BY l.author_id DESC) rn\n  FROM books l JOIN authors r ON l.author_id=r.author_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count books per authors",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.author_id AS key, COUNT(l.author_id) AS child_count\nFROM authors r LEFT JOIN books l ON l.author_id=r.author_id\nGROUP BY r.author_id;"
    },
    {
      "name": "Top-1 loans per books by book_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.book_id ORDER BY l.book_id DESC) rn\n  FROM loans l JOIN books r ON l.book_id=r.book_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count loans per books",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.book_id AS key, COUNT(l.book_id) AS child_count\nFROM books r LEFT JOIN loans l ON l.book_id=r.book_id\nGROUP BY r.book_id;"
    },
    {
      "name": "Top-1 loans per members by member_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.member_id ORDER BY l.member_id DESC) rn\n  FROM loans l JOIN members r ON l.member_id=r.member_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count loans per members",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.member_id AS key, COUNT(l.member_id) AS child_count\nFROM members r LEFT JOIN loans l ON l.member_id=r.member_id\nGROUP BY r.member_id;"
    },
    {
      "name": "Top-1 sensors per devices by device_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.device_id ORDER BY l.device_id DESC) rn\n  FROM sensors l JOIN devices r ON l.device_id=r.device_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count sensors per devices",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.device_id AS key, COUNT(l.device_id) AS child_count\nFROM devices r LEFT JOIN sensors l ON l.device_id=r.device_id\nGROUP BY r.device_id;"
    },
    {
      "name": "Top-1 readings per sensors by sensor_id",
      "category": "DQL/Joins/Windows",
      "description": "ROW_NUMBER partitioned per parent.",
      "sql": "WITH ranked AS (\n  SELECT l.*, r.*, ROW_NUMBER() OVER (PARTITION BY r.sensor_id ORDER BY l.sensor_id DESC) rn\n  FROM readings l JOIN sensors r ON l.sensor_id=r.sensor_id\n)\nSELECT * FROM ranked WHERE rn=1;"
    },
    {
      "name": "Count readings per sensors",
      "category": "DQL/Joins/Aggregates",
      "description": "Children per parent count.",
      "sql": "SELECT r.sensor_id AS key, COUNT(l.sensor_id) AS child_count\nFROM sensors r LEFT JOIN readings l ON l.sensor_id=r.sensor_id\nGROUP BY r.sensor_id;"
    },
    {
      "name": "UNION people.name vs customers.name",
      "category": "DQL/Sets/UNION",
      "description": "UNION of name between people and customers.",
      "sql": "SELECT name FROM people\nUNION\nSELECT name FROM customers;"
    },
    {
      "name": "INTERSECT people.name vs customers.name",
      "category": "DQL/Sets/INTERSECT",
      "description": "INTERSECT of name between people and customers.",
      "sql": "SELECT name FROM people\nINTERSECT\nSELECT name FROM customers;"
    },
    {
      "name": "EXCEPT people.name vs customers.name",
      "category": "DQL/Sets/EXCEPT",
      "description": "EXCEPT of name between people and customers.",
      "sql": "SELECT name FROM people\nEXCEPT\nSELECT name FROM customers;"
    },
    {
      "name": "UNION members.name vs customers.name",
      "category": "DQL/Sets/UNION",
      "description": "UNION of name between members and customers.",
      "sql": "SELECT name FROM members\nUNION\nSELECT name FROM customers;"
    },
    {
      "name": "INTERSECT members.name vs customers.name",
      "category": "DQL/Sets/INTERSECT",
      "description": "INTERSECT of name between members and customers.",
      "sql": "SELECT name FROM members\nINTERSECT\nSELECT name FROM customers;"
    },
    {
      "name": "EXCEPT members.name vs customers.name",
      "category": "DQL/Sets/EXCEPT",
      "description": "EXCEPT of name between members and customers.",
      "sql": "SELECT name FROM members\nEXCEPT\nSELECT name FROM customers;"
    },
    {
      "name": "UNION authors.name vs people.name",
      "category": "DQL/Sets/UNION",
      "description": "UNION of name between authors and people.",
      "sql": "SELECT name FROM authors\nUNION\nSELECT name FROM people;"
    },
    {
      "name": "INTERSECT authors.name vs people.name",
      "category": "DQL/Sets/INTERSECT",
      "description": "INTERSECT of name between authors and people.",
      "sql": "SELECT name FROM authors\nINTERSECT\nSELECT name FROM people;"
    },
    {
      "name": "EXCEPT authors.name vs people.name",
      "category": "DQL/Sets/EXCEPT",
      "description": "EXCEPT of name between authors and people.",
      "sql": "SELECT name FROM authors\nEXCEPT\nSELECT name FROM people;"
    },
    {
      "name": "PRAGMA table_info(people)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for people.",
      "sql": "PRAGMA table_info(people);"
    },
    {
      "name": "PRAGMA index_list(people)",
      "category": "Meta/PRAGMA",
      "description": "Index list for people.",
      "sql": "PRAGMA index_list(people);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM people",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of people.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM people;"
    },
    {
      "name": "PRAGMA table_info(customers)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for customers.",
      "sql": "PRAGMA table_info(customers);"
    },
    {
      "name": "PRAGMA index_list(customers)",
      "category": "Meta/PRAGMA",
      "description": "Index list for customers.",
      "sql": "PRAGMA index_list(customers);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM customers",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of customers.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM customers;"
    },
    {
      "name": "PRAGMA table_info(products)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for products.",
      "sql": "PRAGMA table_info(products);"
    },
    {
      "name": "PRAGMA index_list(products)",
      "category": "Meta/PRAGMA",
      "description": "Index list for products.",
      "sql": "PRAGMA index_list(products);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM products",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of products.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM products;"
    },
    {
      "name": "PRAGMA table_info(orders)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for orders.",
      "sql": "PRAGMA table_info(orders);"
    },
    {
      "name": "PRAGMA index_list(orders)",
      "category": "Meta/PRAGMA",
      "description": "Index list for orders.",
      "sql": "PRAGMA index_list(orders);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM orders",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of orders.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM orders;"
    },
    {
      "name": "PRAGMA table_info(order_items)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for order_items.",
      "sql": "PRAGMA table_info(order_items);"
    },
    {
      "name": "PRAGMA index_list(order_items)",
      "category": "Meta/PRAGMA",
      "description": "Index list for order_items.",
      "sql": "PRAGMA index_list(order_items);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM order_items",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of order_items.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM order_items;"
    },
    {
      "name": "PRAGMA table_info(employees)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for employees.",
      "sql": "PRAGMA table_info(employees);"
    },
    {
      "name": "PRAGMA index_list(employees)",
      "category": "Meta/PRAGMA",
      "description": "Index list for employees.",
      "sql": "PRAGMA index_list(employees);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM employees",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of employees.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM employees;"
    },
    {
      "name": "PRAGMA table_info(departments)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for departments.",
      "sql": "PRAGMA table_info(departments);"
    },
    {
      "name": "PRAGMA index_list(departments)",
      "category": "Meta/PRAGMA",
      "description": "Index list for departments.",
      "sql": "PRAGMA index_list(departments);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM departments",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of departments.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM departments;"
    },
    {
      "name": "PRAGMA table_info(posts)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for posts.",
      "sql": "PRAGMA table_info(posts);"
    },
    {
      "name": "PRAGMA index_list(posts)",
      "category": "Meta/PRAGMA",
      "description": "Index list for posts.",
      "sql": "PRAGMA index_list(posts);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM posts",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of posts.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM posts;"
    },
    {
      "name": "PRAGMA table_info(comments)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for comments.",
      "sql": "PRAGMA table_info(comments);"
    },
    {
      "name": "PRAGMA index_list(comments)",
      "category": "Meta/PRAGMA",
      "description": "Index list for comments.",
      "sql": "PRAGMA index_list(comments);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM comments",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of comments.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM comments;"
    },
    {
      "name": "PRAGMA table_info(tags)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for tags.",
      "sql": "PRAGMA table_info(tags);"
    },
    {
      "name": "PRAGMA index_list(tags)",
      "category": "Meta/PRAGMA",
      "description": "Index list for tags.",
      "sql": "PRAGMA index_list(tags);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM tags",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of tags.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM tags;"
    },
    {
      "name": "PRAGMA table_info(post_tags)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for post_tags.",
      "sql": "PRAGMA table_info(post_tags);"
    },
    {
      "name": "PRAGMA index_list(post_tags)",
      "category": "Meta/PRAGMA",
      "description": "Index list for post_tags.",
      "sql": "PRAGMA index_list(post_tags);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM post_tags",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of post_tags.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM post_tags;"
    },
    {
      "name": "PRAGMA table_info(books)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for books.",
      "sql": "PRAGMA table_info(books);"
    },
    {
      "name": "PRAGMA index_list(books)",
      "category": "Meta/PRAGMA",
      "description": "Index list for books.",
      "sql": "PRAGMA index_list(books);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM books",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of books.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM books;"
    },
    {
      "name": "PRAGMA table_info(authors)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for authors.",
      "sql": "PRAGMA table_info(authors);"
    },
    {
      "name": "PRAGMA index_list(authors)",
      "category": "Meta/PRAGMA",
      "description": "Index list for authors.",
      "sql": "PRAGMA index_list(authors);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM authors",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of authors.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM authors;"
    },
    {
      "name": "PRAGMA table_info(loans)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for loans.",
      "sql": "PRAGMA table_info(loans);"
    },
    {
      "name": "PRAGMA index_list(loans)",
      "category": "Meta/PRAGMA",
      "description": "Index list for loans.",
      "sql": "PRAGMA index_list(loans);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM loans",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of loans.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM loans;"
    },
    {
      "name": "PRAGMA table_info(members)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for members.",
      "sql": "PRAGMA table_info(members);"
    },
    {
      "name": "PRAGMA index_list(members)",
      "category": "Meta/PRAGMA",
      "description": "Index list for members.",
      "sql": "PRAGMA index_list(members);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM members",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of members.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM members;"
    },
    {
      "name": "PRAGMA table_info(devices)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for devices.",
      "sql": "PRAGMA table_info(devices);"
    },
    {
      "name": "PRAGMA index_list(devices)",
      "category": "Meta/PRAGMA",
      "description": "Index list for devices.",
      "sql": "PRAGMA index_list(devices);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM devices",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of devices.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM devices;"
    },
    {
      "name": "PRAGMA table_info(sensors)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for sensors.",
      "sql": "PRAGMA table_info(sensors);"
    },
    {
      "name": "PRAGMA index_list(sensors)",
      "category": "Meta/PRAGMA",
      "description": "Index list for sensors.",
      "sql": "PRAGMA index_list(sensors);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM sensors",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of sensors.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM sensors;"
    },
    {
      "name": "PRAGMA table_info(readings)",
      "category": "Meta/PRAGMA",
      "description": "Schema info for readings.",
      "sql": "PRAGMA table_info(readings);"
    },
    {
      "name": "PRAGMA index_list(readings)",
      "category": "Meta/PRAGMA",
      "description": "Index list for readings.",
      "sql": "PRAGMA index_list(readings);"
    },
    {
      "name": "EXPLAIN QUERY PLAN SELECT * FROM readings",
      "category": "Meta/Explain",
      "description": "Explain plan for simple scan of readings.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM readings;"
    },
    {
      "name": "SUM OVER people.age",
      "category": "DQL/Windows/Aggregates",
      "description": "Running sum over age.",
      "sql": "SELECT id, age, SUM(age) OVER (ORDER BY id) AS run_sum FROM people;"
    },
    {
      "name": "AVG OVER people.age PARTITION BY parity",
      "category": "DQL/Windows/Aggregates",
      "description": "Partitioned avg using CASE parity.",
      "sql": "SELECT id, age, AVG(age) OVER (PARTITION BY (id%2)) AS avg_by_parity FROM people;"
    },
    {
      "name": "SUM OVER products.price",
      "category": "DQL/Windows/Aggregates",
      "description": "Running sum over price.",
      "sql": "SELECT product_id, price, SUM(price) OVER (ORDER BY product_id) AS run_sum FROM products;"
    },
    {
      "name": "AVG OVER products.price PARTITION BY parity",
      "category": "DQL/Windows/Aggregates",
      "description": "Partitioned avg using CASE parity.",
      "sql": "SELECT product_id, price, AVG(price) OVER (PARTITION BY (product_id%2)) AS avg_by_parity FROM products;"
    },
    {
      "name": "SUM OVER order_items.qty",
      "category": "DQL/Windows/Aggregates",
      "description": "Running sum over qty.",
      "sql": "SELECT rowid, qty, SUM(qty) OVER (ORDER BY rowid) AS run_sum FROM order_items;"
    },
    {
      "name": "AVG OVER order_items.qty PARTITION BY parity",
      "category": "DQL/Windows/Aggregates",
      "description": "Partitioned avg using CASE parity.",
      "sql": "SELECT rowid, qty, AVG(qty) OVER (PARTITION BY (rowid%2)) AS avg_by_parity FROM order_items;"
    },
    {
      "name": "SUM OVER employees.salary",
      "category": "DQL/Windows/Aggregates",
      "description": "Running sum over salary.",
      "sql": "SELECT emp_id, salary, SUM(salary) OVER (ORDER BY emp_id) AS run_sum FROM employees;"
    },
    {
      "name": "AVG OVER employees.salary PARTITION BY parity",
      "category": "DQL/Windows/Aggregates",
      "description": "Partitioned avg using CASE parity.",
      "sql": "SELECT emp_id, salary, AVG(salary) OVER (PARTITION BY (emp_id%2)) AS avg_by_parity FROM employees;"
    },
    {
      "name": "SUM OVER books.price",
      "category": "DQL/Windows/Aggregates",
      "description": "Running sum over price.",
      "sql": "SELECT book_id, price, SUM(price) OVER (ORDER BY book_id) AS run_sum FROM books;"
    },
    {
      "name": "AVG OVER books.price PARTITION BY parity",
      "category": "DQL/Windows/Aggregates",
      "description": "Partitioned avg using CASE parity.",
      "sql": "SELECT book_id, price, AVG(price) OVER (PARTITION BY (book_id%2)) AS avg_by_parity FROM books;"
    },
    {
      "name": "SUM OVER readings.value",
      "category": "DQL/Windows/Aggregates",
      "description": "Running sum over value.",
      "sql": "SELECT reading_id, value, SUM(value) OVER (ORDER BY reading_id) AS run_sum FROM readings;"
    },
    {
      "name": "AVG OVER readings.value PARTITION BY parity",
      "category": "DQL/Windows/Aggregates",
      "description": "Partitioned avg using CASE parity.",
      "sql": "SELECT reading_id, value, AVG(value) OVER (PARTITION BY (reading_id%2)) AS avg_by_parity FROM readings;"
    },
    {
      "name": "3-way join order_items→orders→customers",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join chain.",
      "sql": "SELECT * FROM order_items x JOIN orders y ON x.order_id=y.order_id JOIN customers z ON y.customer_id=z.customer_id;"
    },
    {
      "name": "3-way aggregate order_items→orders→customers",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join with aggregation.",
      "sql": "SELECT z.customer_id AS key, COUNT(*) AS cnt\nFROM order_items x JOIN orders y ON x.order_id=y.order_id JOIN customers z ON y.customer_id=z.customer_id\nGROUP BY z.customer_id;"
    },
    {
      "name": "3-way join order_items→products→orders",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join chain.",
      "sql": "SELECT * FROM order_items x JOIN products y ON x.product_id=y.product_id JOIN orders z ON y.order_id=z.order_id;"
    },
    {
      "name": "3-way aggregate order_items→products→orders",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join with aggregation.",
      "sql": "SELECT z.order_id AS key, COUNT(*) AS cnt\nFROM order_items x JOIN products y ON x.product_id=y.product_id JOIN orders z ON y.order_id=z.order_id\nGROUP BY z.order_id;"
    },
    {
      "name": "3-way join post_tags→posts→comments",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join chain.",
      "sql": "SELECT * FROM post_tags x JOIN posts y ON x.post_id=y.post_id JOIN comments z ON y.post_id=z.post_id;"
    },
    {
      "name": "3-way aggregate post_tags→posts→comments",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join with aggregation.",
      "sql": "SELECT z.post_id AS key, COUNT(*) AS cnt\nFROM post_tags x JOIN posts y ON x.post_id=y.post_id JOIN comments z ON y.post_id=z.post_id\nGROUP BY z.post_id;"
    },
    {
      "name": "3-way join loans→books→authors",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join chain.",
      "sql": "SELECT * FROM loans x JOIN books y ON x.book_id=y.book_id JOIN authors z ON y.author_id=z.author_id;"
    },
    {
      "name": "3-way aggregate loans→books→authors",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join with aggregation.",
      "sql": "SELECT z.author_id AS key, COUNT(*) AS cnt\nFROM loans x JOIN books y ON x.book_id=y.book_id JOIN authors z ON y.author_id=z.author_id\nGROUP BY z.author_id;"
    },
    {
      "name": "3-way join readings→sensors→devices",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join chain.",
      "sql": "SELECT * FROM readings x JOIN sensors y ON x.sensor_id=y.sensor_id JOIN devices z ON y.device_id=z.device_id;"
    },
    {
      "name": "3-way aggregate readings→sensors→devices",
      "category": "DQL/Joins/Multi",
      "description": "Three-table join with aggregation.",
      "sql": "SELECT z.device_id AS key, COUNT(*) AS cnt\nFROM readings x JOIN sensors y ON x.sensor_id=y.sensor_id JOIN devices z ON y.device_id=z.device_id\nGROUP BY z.device_id;"
    },
    {
      "name": "Recent orders last 1 days",
      "category": "DQL/CTE",
      "description": "CTE for orders in last 1 days.",
      "sql": "WITH recent AS (SELECT * FROM orders WHERE created_at >= date('now','-1 days')) SELECT * FROM recent;"
    },
    {
      "name": "Recent orders last 7 days",
      "category": "DQL/CTE",
      "description": "CTE for orders in last 7 days.",
      "sql": "WITH recent AS (SELECT * FROM orders WHERE created_at >= date('now','-7 days')) SELECT * FROM recent;"
    },
    {
      "name": "Recent orders last 30 days",
      "category": "DQL/CTE",
      "description": "CTE for orders in last 30 days.",
      "sql": "WITH recent AS (SELECT * FROM orders WHERE created_at >= date('now','-30 days')) SELECT * FROM recent;"
    },
    {
      "name": "Recent orders last 90 days",
      "category": "DQL/CTE",
      "description": "CTE for orders in last 90 days.",
      "sql": "WITH recent AS (SELECT * FROM orders WHERE created_at >= date('now','-90 days')) SELECT * FROM recent;"
    },
    {
      "name": "Correlated subquery exists in people",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM people outer_t WHERE EXISTS (SELECT 1 FROM people inner_t WHERE (inner_t.id%2) = (outer_t.id%2) AND inner_t.id<>outer_t.id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in customers",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM customers outer_t WHERE EXISTS (SELECT 1 FROM customers inner_t WHERE (inner_t.customer_id%2) = (outer_t.customer_id%2) AND inner_t.customer_id<>outer_t.customer_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in products",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM products outer_t WHERE EXISTS (SELECT 1 FROM products inner_t WHERE (inner_t.product_id%2) = (outer_t.product_id%2) AND inner_t.product_id<>outer_t.product_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in orders",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM orders outer_t WHERE EXISTS (SELECT 1 FROM orders inner_t WHERE (inner_t.order_id%2) = (outer_t.order_id%2) AND inner_t.order_id<>outer_t.order_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in order_items",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM order_items outer_t WHERE EXISTS (SELECT 1 FROM order_items inner_t WHERE (inner_t.rowid%2) = (outer_t.rowid%2) AND inner_t.rowid<>outer_t.rowid LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in employees",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM employees outer_t WHERE EXISTS (SELECT 1 FROM employees inner_t WHERE (inner_t.emp_id%2) = (outer_t.emp_id%2) AND inner_t.emp_id<>outer_t.emp_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in departments",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM departments outer_t WHERE EXISTS (SELECT 1 FROM departments inner_t WHERE (inner_t.dept_id%2) = (outer_t.dept_id%2) AND inner_t.dept_id<>outer_t.dept_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in posts",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM posts outer_t WHERE EXISTS (SELECT 1 FROM posts inner_t WHERE (inner_t.post_id%2) = (outer_t.post_id%2) AND inner_t.post_id<>outer_t.post_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in comments",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM comments outer_t WHERE EXISTS (SELECT 1 FROM comments inner_t WHERE (inner_t.comment_id%2) = (outer_t.comment_id%2) AND inner_t.comment_id<>outer_t.comment_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in tags",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM tags outer_t WHERE EXISTS (SELECT 1 FROM tags inner_t WHERE (inner_t.tag_id%2) = (outer_t.tag_id%2) AND inner_t.tag_id<>outer_t.tag_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in post_tags",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM post_tags outer_t WHERE EXISTS (SELECT 1 FROM post_tags inner_t WHERE (inner_t.rowid%2) = (outer_t.rowid%2) AND inner_t.rowid<>outer_t.rowid LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in books",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM books outer_t WHERE EXISTS (SELECT 1 FROM books inner_t WHERE (inner_t.book_id%2) = (outer_t.book_id%2) AND inner_t.book_id<>outer_t.book_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in authors",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM authors outer_t WHERE EXISTS (SELECT 1 FROM authors inner_t WHERE (inner_t.author_id%2) = (outer_t.author_id%2) AND inner_t.author_id<>outer_t.author_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in loans",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM loans outer_t WHERE EXISTS (SELECT 1 FROM loans inner_t WHERE (inner_t.loan_id%2) = (outer_t.loan_id%2) AND inner_t.loan_id<>outer_t.loan_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in members",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM members outer_t WHERE EXISTS (SELECT 1 FROM members inner_t WHERE (inner_t.member_id%2) = (outer_t.member_id%2) AND inner_t.member_id<>outer_t.member_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in devices",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM devices outer_t WHERE EXISTS (SELECT 1 FROM devices inner_t WHERE (inner_t.device_id%2) = (outer_t.device_id%2) AND inner_t.device_id<>outer_t.device_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in sensors",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM sensors outer_t WHERE EXISTS (SELECT 1 FROM sensors inner_t WHERE (inner_t.sensor_id%2) = (outer_t.sensor_id%2) AND inner_t.sensor_id<>outer_t.sensor_id LIMIT 1);"
    },
    {
      "name": "Correlated subquery exists in readings",
      "category": "DQL/Subqueries/Correlated",
      "description": "Self-correlated EXISTS using pk parity.",
      "sql": "SELECT * FROM readings outer_t WHERE EXISTS (SELECT 1 FROM readings inner_t WHERE (inner_t.reading_id%2) = (outer_t.reading_id%2) AND inner_t.reading_id<>outer_t.reading_id LIMIT 1);"
    },
    {
      "name": "INSERT INTO people ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO people SELECT * FROM people WHERE id < 0;"
    },
    {
      "name": "DELETE FROM people where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM people WHERE id IN (SELECT id FROM people WHERE id<0);"
    },
    {
      "name": "INSERT INTO customers ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO customers SELECT * FROM customers WHERE customer_id < 0;"
    },
    {
      "name": "DELETE FROM customers where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM customers WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_id<0);"
    },
    {
      "name": "INSERT INTO products ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO products SELECT * FROM products WHERE product_id < 0;"
    },
    {
      "name": "DELETE FROM products where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM products WHERE product_id IN (SELECT product_id FROM products WHERE product_id<0);"
    },
    {
      "name": "INSERT INTO orders ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO orders SELECT * FROM orders WHERE order_id < 0;"
    },
    {
      "name": "DELETE FROM orders where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM orders WHERE order_id IN (SELECT order_id FROM orders WHERE order_id<0);"
    },
    {
      "name": "INSERT INTO order_items ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO order_items SELECT * FROM order_items WHERE rowid < 0;"
    },
    {
      "name": "DELETE FROM order_items where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM order_items WHERE rowid IN (SELECT rowid FROM order_items WHERE rowid<0);"
    },
    {
      "name": "INSERT INTO employees ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO employees SELECT * FROM employees WHERE emp_id < 0;"
    },
    {
      "name": "DELETE FROM employees where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM employees WHERE emp_id IN (SELECT emp_id FROM employees WHERE emp_id<0);"
    },
    {
      "name": "INSERT INTO departments ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO departments SELECT * FROM departments WHERE dept_id < 0;"
    },
    {
      "name": "DELETE FROM departments where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM departments WHERE dept_id IN (SELECT dept_id FROM departments WHERE dept_id<0);"
    },
    {
      "name": "INSERT INTO posts ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO posts SELECT * FROM posts WHERE post_id < 0;"
    },
    {
      "name": "DELETE FROM posts where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM posts WHERE post_id IN (SELECT post_id FROM posts WHERE post_id<0);"
    },
    {
      "name": "INSERT INTO comments ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO comments SELECT * FROM comments WHERE comment_id < 0;"
    },
    {
      "name": "DELETE FROM comments where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM comments WHERE comment_id IN (SELECT comment_id FROM comments WHERE comment_id<0);"
    },
    {
      "name": "INSERT INTO tags ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO tags SELECT * FROM tags WHERE tag_id < 0;"
    },
    {
      "name": "DELETE FROM tags where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM tags WHERE tag_id IN (SELECT tag_id FROM tags WHERE tag_id<0);"
    },
    {
      "name": "INSERT INTO post_tags ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO post_tags SELECT * FROM post_tags WHERE rowid < 0;"
    },
    {
      "name": "DELETE FROM post_tags where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM post_tags WHERE rowid IN (SELECT rowid FROM post_tags WHERE rowid<0);"
    },
    {
      "name": "INSERT INTO books ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO books SELECT * FROM books WHERE book_id < 0;"
    },
    {
      "name": "DELETE FROM books where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM books WHERE book_id IN (SELECT book_id FROM books WHERE book_id<0);"
    },
    {
      "name": "INSERT INTO authors ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO authors SELECT * FROM authors WHERE author_id < 0;"
    },
    {
      "name": "DELETE FROM authors where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM authors WHERE author_id IN (SELECT author_id FROM authors WHERE author_id<0);"
    },
    {
      "name": "INSERT INTO loans ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO loans SELECT * FROM loans WHERE loan_id < 0;"
    },
    {
      "name": "DELETE FROM loans where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM loans WHERE loan_id IN (SELECT loan_id FROM loans WHERE loan_id<0);"
    },
    {
      "name": "INSERT INTO members ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO members SELECT * FROM members WHERE member_id < 0;"
    },
    {
      "name": "DELETE FROM members where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM members WHERE member_id IN (SELECT member_id FROM members WHERE member_id<0);"
    },
    {
      "name": "INSERT INTO devices ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO devices SELECT * FROM devices WHERE device_id < 0;"
    },
    {
      "name": "DELETE FROM devices where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM devices WHERE device_id IN (SELECT device_id FROM devices WHERE device_id<0);"
    },
    {
      "name": "INSERT INTO sensors ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO sensors SELECT * FROM sensors WHERE sensor_id < 0;"
    },
    {
      "name": "DELETE FROM sensors where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM sensors WHERE sensor_id IN (SELECT sensor_id FROM sensors WHERE sensor_id<0);"
    },
    {
      "name": "INSERT INTO readings ... SELECT",
      "category": "DML/Insert/Select",
      "description": "Insert rows from another table (demo shape).",
      "sql": "-- Adjust column list to match your schema\nINSERT INTO readings SELECT * FROM readings WHERE reading_id < 0;"
    },
    {
      "name": "DELETE FROM readings where pk IN subquery",
      "category": "DML/Delete/Subquery",
      "description": "Delete using IN (subquery).",
      "sql": "DELETE FROM readings WHERE reading_id IN (SELECT reading_id FROM readings WHERE reading_id<0);"
    },
    {
      "name": "Computed label for people",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (id%3)=0 THEN 'Low' WHEN (id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM people;"
    },
    {
      "name": "Computed label for customers",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (customer_id%3)=0 THEN 'Low' WHEN (customer_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM customers;"
    },
    {
      "name": "Computed label for products",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (product_id%3)=0 THEN 'Low' WHEN (product_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM products;"
    },
    {
      "name": "Computed label for orders",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (order_id%3)=0 THEN 'Low' WHEN (order_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM orders;"
    },
    {
      "name": "Computed label for order_items",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (rowid%3)=0 THEN 'Low' WHEN (rowid%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM order_items;"
    },
    {
      "name": "Computed label for employees",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (emp_id%3)=0 THEN 'Low' WHEN (emp_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM employees;"
    },
    {
      "name": "Computed label for departments",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (dept_id%3)=0 THEN 'Low' WHEN (dept_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM departments;"
    },
    {
      "name": "Computed label for posts",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (post_id%3)=0 THEN 'Low' WHEN (post_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM posts;"
    },
    {
      "name": "Computed label for comments",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (comment_id%3)=0 THEN 'Low' WHEN (comment_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM comments;"
    },
    {
      "name": "Computed label for tags",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (tag_id%3)=0 THEN 'Low' WHEN (tag_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM tags;"
    },
    {
      "name": "Computed label for post_tags",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (rowid%3)=0 THEN 'Low' WHEN (rowid%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM post_tags;"
    },
    {
      "name": "Computed label for books",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (book_id%3)=0 THEN 'Low' WHEN (book_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM books;"
    },
    {
      "name": "Computed label for authors",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (author_id%3)=0 THEN 'Low' WHEN (author_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM authors;"
    },
    {
      "name": "Computed label for loans",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (loan_id%3)=0 THEN 'Low' WHEN (loan_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM loans;"
    },
    {
      "name": "Computed label for members",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (member_id%3)=0 THEN 'Low' WHEN (member_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM members;"
    },
    {
      "name": "Computed label for devices",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (device_id%3)=0 THEN 'Low' WHEN (device_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM devices;"
    },
    {
      "name": "Computed label for sensors",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (sensor_id%3)=0 THEN 'Low' WHEN (sensor_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM sensors;"
    },
    {
      "name": "Computed label for readings",
      "category": "DQL/Expressions/CASE",
      "description": "Case mapping to Low/High based on pk modulo.",
      "sql": "SELECT *, CASE WHEN (reading_id%3)=0 THEN 'Low' WHEN (reading_id%3)=1 THEN 'Mid' ELSE 'High' END AS label FROM readings;"
    },
    {
      "name": "Emulate grouping sets on people.name",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'name' AS grp, name AS key, COUNT(*) AS cnt FROM people GROUP BY name\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM people;"
    },
    {
      "name": "Emulate grouping sets on customers.name",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'name' AS grp, name AS key, COUNT(*) AS cnt FROM customers GROUP BY name\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM customers;"
    },
    {
      "name": "Emulate grouping sets on products.name",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'name' AS grp, name AS key, COUNT(*) AS cnt FROM products GROUP BY name\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM products;"
    },
    {
      "name": "Emulate grouping sets on employees.first_name",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'first_name' AS grp, first_name AS key, COUNT(*) AS cnt FROM employees GROUP BY first_name\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM employees;"
    },
    {
      "name": "Emulate grouping sets on departments.dept_name",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'dept_name' AS grp, dept_name AS key, COUNT(*) AS cnt FROM departments GROUP BY dept_name\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM departments;"
    },
    {
      "name": "Emulate grouping sets on posts.title",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'title' AS grp, title AS key, COUNT(*) AS cnt FROM posts GROUP BY title\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM posts;"
    },
    {
      "name": "Emulate grouping sets on comments.author",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'author' AS grp, author AS key, COUNT(*) AS cnt FROM comments GROUP BY author\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM comments;"
    },
    {
      "name": "Emulate grouping sets on tags.name",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'name' AS grp, name AS key, COUNT(*) AS cnt FROM tags GROUP BY name\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM tags;"
    },
    {
      "name": "Emulate grouping sets on books.title",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'title' AS grp, title AS key, COUNT(*) AS cnt FROM books GROUP BY title\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM books;"
    },
    {
      "name": "Emulate grouping sets on authors.name",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'name' AS grp, name AS key, COUNT(*) AS cnt FROM authors GROUP BY name\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM authors;"
    },
    {
      "name": "Emulate grouping sets on members.name",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'name' AS grp, name AS key, COUNT(*) AS cnt FROM members GROUP BY name\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM members;"
    },
    {
      "name": "Emulate grouping sets on devices.name",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'name' AS grp, name AS key, COUNT(*) AS cnt FROM devices GROUP BY name\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM devices;"
    },
    {
      "name": "Emulate grouping sets on sensors.kind",
      "category": "DQL/Aggregation/EmulatedGroupingSets",
      "description": "Emulate subtotal + grand total using UNION ALL.",
      "sql": "SELECT 'kind' AS grp, kind AS key, COUNT(*) AS cnt FROM sensors GROUP BY kind\nUNION ALL\nSELECT 'ALL' AS grp, NULL AS key, COUNT(*) AS cnt FROM sensors;"
    },
    {
      "name": "people LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM people LIMIT 10 OFFSET 0;"
    },
    {
      "name": "people LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM people LIMIT 10 OFFSET 10;"
    },
    {
      "name": "people LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM people LIMIT 10 OFFSET 100;"
    },
    {
      "name": "people LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM people LIMIT 25 OFFSET 0;"
    },
    {
      "name": "people LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM people LIMIT 25 OFFSET 10;"
    },
    {
      "name": "people LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM people LIMIT 25 OFFSET 100;"
    },
    {
      "name": "people LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM people LIMIT 50 OFFSET 0;"
    },
    {
      "name": "people LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM people LIMIT 50 OFFSET 10;"
    },
    {
      "name": "people LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM people LIMIT 50 OFFSET 100;"
    },
    {
      "name": "customers LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM customers LIMIT 10 OFFSET 0;"
    },
    {
      "name": "customers LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM customers LIMIT 10 OFFSET 10;"
    },
    {
      "name": "customers LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM customers LIMIT 10 OFFSET 100;"
    },
    {
      "name": "customers LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM customers LIMIT 25 OFFSET 0;"
    },
    {
      "name": "customers LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM customers LIMIT 25 OFFSET 10;"
    },
    {
      "name": "customers LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM customers LIMIT 25 OFFSET 100;"
    },
    {
      "name": "customers LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM customers LIMIT 50 OFFSET 0;"
    },
    {
      "name": "customers LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM customers LIMIT 50 OFFSET 10;"
    },
    {
      "name": "customers LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM customers LIMIT 50 OFFSET 100;"
    },
    {
      "name": "products LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM products LIMIT 10 OFFSET 0;"
    },
    {
      "name": "products LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM products LIMIT 10 OFFSET 10;"
    },
    {
      "name": "products LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM products LIMIT 10 OFFSET 100;"
    },
    {
      "name": "products LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM products LIMIT 25 OFFSET 0;"
    },
    {
      "name": "products LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM products LIMIT 25 OFFSET 10;"
    },
    {
      "name": "products LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM products LIMIT 25 OFFSET 100;"
    },
    {
      "name": "products LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM products LIMIT 50 OFFSET 0;"
    },
    {
      "name": "products LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM products LIMIT 50 OFFSET 10;"
    },
    {
      "name": "products LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM products LIMIT 50 OFFSET 100;"
    },
    {
      "name": "orders LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM orders LIMIT 10 OFFSET 0;"
    },
    {
      "name": "orders LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM orders LIMIT 10 OFFSET 10;"
    },
    {
      "name": "orders LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM orders LIMIT 10 OFFSET 100;"
    },
    {
      "name": "orders LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM orders LIMIT 25 OFFSET 0;"
    },
    {
      "name": "orders LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM orders LIMIT 25 OFFSET 10;"
    },
    {
      "name": "orders LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM orders LIMIT 25 OFFSET 100;"
    },
    {
      "name": "orders LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM orders LIMIT 50 OFFSET 0;"
    },
    {
      "name": "orders LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM orders LIMIT 50 OFFSET 10;"
    },
    {
      "name": "orders LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM orders LIMIT 50 OFFSET 100;"
    },
    {
      "name": "order_items LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM order_items LIMIT 10 OFFSET 0;"
    },
    {
      "name": "order_items LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM order_items LIMIT 10 OFFSET 10;"
    },
    {
      "name": "order_items LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM order_items LIMIT 10 OFFSET 100;"
    },
    {
      "name": "order_items LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM order_items LIMIT 25 OFFSET 0;"
    },
    {
      "name": "order_items LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM order_items LIMIT 25 OFFSET 10;"
    },
    {
      "name": "order_items LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM order_items LIMIT 25 OFFSET 100;"
    },
    {
      "name": "order_items LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM order_items LIMIT 50 OFFSET 0;"
    },
    {
      "name": "order_items LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM order_items LIMIT 50 OFFSET 10;"
    },
    {
      "name": "order_items LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM order_items LIMIT 50 OFFSET 100;"
    },
    {
      "name": "employees LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM employees LIMIT 10 OFFSET 0;"
    },
    {
      "name": "employees LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM employees LIMIT 10 OFFSET 10;"
    },
    {
      "name": "employees LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM employees LIMIT 10 OFFSET 100;"
    },
    {
      "name": "employees LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM employees LIMIT 25 OFFSET 0;"
    },
    {
      "name": "employees LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM employees LIMIT 25 OFFSET 10;"
    },
    {
      "name": "employees LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM employees LIMIT 25 OFFSET 100;"
    },
    {
      "name": "employees LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM employees LIMIT 50 OFFSET 0;"
    },
    {
      "name": "employees LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM employees LIMIT 50 OFFSET 10;"
    },
    {
      "name": "employees LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM employees LIMIT 50 OFFSET 100;"
    },
    {
      "name": "departments LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM departments LIMIT 10 OFFSET 0;"
    },
    {
      "name": "departments LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM departments LIMIT 10 OFFSET 10;"
    },
    {
      "name": "departments LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM departments LIMIT 10 OFFSET 100;"
    },
    {
      "name": "departments LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM departments LIMIT 25 OFFSET 0;"
    },
    {
      "name": "departments LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM departments LIMIT 25 OFFSET 10;"
    },
    {
      "name": "departments LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM departments LIMIT 25 OFFSET 100;"
    },
    {
      "name": "departments LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM departments LIMIT 50 OFFSET 0;"
    },
    {
      "name": "departments LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM departments LIMIT 50 OFFSET 10;"
    },
    {
      "name": "departments LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM departments LIMIT 50 OFFSET 100;"
    },
    {
      "name": "posts LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM posts LIMIT 10 OFFSET 0;"
    },
    {
      "name": "posts LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM posts LIMIT 10 OFFSET 10;"
    },
    {
      "name": "posts LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM posts LIMIT 10 OFFSET 100;"
    },
    {
      "name": "posts LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM posts LIMIT 25 OFFSET 0;"
    },
    {
      "name": "posts LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM posts LIMIT 25 OFFSET 10;"
    },
    {
      "name": "posts LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM posts LIMIT 25 OFFSET 100;"
    },
    {
      "name": "posts LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM posts LIMIT 50 OFFSET 0;"
    },
    {
      "name": "posts LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM posts LIMIT 50 OFFSET 10;"
    },
    {
      "name": "posts LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM posts LIMIT 50 OFFSET 100;"
    },
    {
      "name": "comments LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM comments LIMIT 10 OFFSET 0;"
    },
    {
      "name": "comments LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM comments LIMIT 10 OFFSET 10;"
    },
    {
      "name": "comments LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM comments LIMIT 10 OFFSET 100;"
    },
    {
      "name": "comments LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM comments LIMIT 25 OFFSET 0;"
    },
    {
      "name": "comments LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM comments LIMIT 25 OFFSET 10;"
    },
    {
      "name": "comments LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM comments LIMIT 25 OFFSET 100;"
    },
    {
      "name": "comments LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM comments LIMIT 50 OFFSET 0;"
    },
    {
      "name": "comments LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM comments LIMIT 50 OFFSET 10;"
    },
    {
      "name": "comments LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM comments LIMIT 50 OFFSET 100;"
    },
    {
      "name": "tags LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM tags LIMIT 10 OFFSET 0;"
    },
    {
      "name": "tags LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM tags LIMIT 10 OFFSET 10;"
    },
    {
      "name": "tags LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM tags LIMIT 10 OFFSET 100;"
    },
    {
      "name": "tags LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM tags LIMIT 25 OFFSET 0;"
    },
    {
      "name": "tags LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM tags LIMIT 25 OFFSET 10;"
    },
    {
      "name": "tags LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM tags LIMIT 25 OFFSET 100;"
    },
    {
      "name": "tags LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM tags LIMIT 50 OFFSET 0;"
    },
    {
      "name": "tags LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM tags LIMIT 50 OFFSET 10;"
    },
    {
      "name": "tags LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM tags LIMIT 50 OFFSET 100;"
    },
    {
      "name": "post_tags LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM post_tags LIMIT 10 OFFSET 0;"
    },
    {
      "name": "post_tags LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM post_tags LIMIT 10 OFFSET 10;"
    },
    {
      "name": "post_tags LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM post_tags LIMIT 10 OFFSET 100;"
    },
    {
      "name": "post_tags LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM post_tags LIMIT 25 OFFSET 0;"
    },
    {
      "name": "post_tags LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM post_tags LIMIT 25 OFFSET 10;"
    },
    {
      "name": "post_tags LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM post_tags LIMIT 25 OFFSET 100;"
    },
    {
      "name": "post_tags LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM post_tags LIMIT 50 OFFSET 0;"
    },
    {
      "name": "post_tags LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM post_tags LIMIT 50 OFFSET 10;"
    },
    {
      "name": "post_tags LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM post_tags LIMIT 50 OFFSET 100;"
    },
    {
      "name": "books LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM books LIMIT 10 OFFSET 0;"
    },
    {
      "name": "books LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM books LIMIT 10 OFFSET 10;"
    },
    {
      "name": "books LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM books LIMIT 10 OFFSET 100;"
    },
    {
      "name": "books LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM books LIMIT 25 OFFSET 0;"
    },
    {
      "name": "books LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM books LIMIT 25 OFFSET 10;"
    },
    {
      "name": "books LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM books LIMIT 25 OFFSET 100;"
    },
    {
      "name": "books LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM books LIMIT 50 OFFSET 0;"
    },
    {
      "name": "books LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM books LIMIT 50 OFFSET 10;"
    },
    {
      "name": "books LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM books LIMIT 50 OFFSET 100;"
    },
    {
      "name": "authors LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM authors LIMIT 10 OFFSET 0;"
    },
    {
      "name": "authors LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM authors LIMIT 10 OFFSET 10;"
    },
    {
      "name": "authors LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM authors LIMIT 10 OFFSET 100;"
    },
    {
      "name": "authors LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM authors LIMIT 25 OFFSET 0;"
    },
    {
      "name": "authors LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM authors LIMIT 25 OFFSET 10;"
    },
    {
      "name": "authors LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM authors LIMIT 25 OFFSET 100;"
    },
    {
      "name": "authors LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM authors LIMIT 50 OFFSET 0;"
    },
    {
      "name": "authors LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM authors LIMIT 50 OFFSET 10;"
    },
    {
      "name": "authors LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM authors LIMIT 50 OFFSET 100;"
    },
    {
      "name": "loans LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM loans LIMIT 10 OFFSET 0;"
    },
    {
      "name": "loans LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM loans LIMIT 10 OFFSET 10;"
    },
    {
      "name": "loans LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM loans LIMIT 10 OFFSET 100;"
    },
    {
      "name": "loans LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM loans LIMIT 25 OFFSET 0;"
    },
    {
      "name": "loans LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM loans LIMIT 25 OFFSET 10;"
    },
    {
      "name": "loans LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM loans LIMIT 25 OFFSET 100;"
    },
    {
      "name": "loans LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM loans LIMIT 50 OFFSET 0;"
    },
    {
      "name": "loans LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM loans LIMIT 50 OFFSET 10;"
    },
    {
      "name": "loans LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM loans LIMIT 50 OFFSET 100;"
    },
    {
      "name": "members LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM members LIMIT 10 OFFSET 0;"
    },
    {
      "name": "members LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM members LIMIT 10 OFFSET 10;"
    },
    {
      "name": "members LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM members LIMIT 10 OFFSET 100;"
    },
    {
      "name": "members LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM members LIMIT 25 OFFSET 0;"
    },
    {
      "name": "members LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM members LIMIT 25 OFFSET 10;"
    },
    {
      "name": "members LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM members LIMIT 25 OFFSET 100;"
    },
    {
      "name": "members LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM members LIMIT 50 OFFSET 0;"
    },
    {
      "name": "members LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM members LIMIT 50 OFFSET 10;"
    },
    {
      "name": "members LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM members LIMIT 50 OFFSET 100;"
    },
    {
      "name": "devices LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM devices LIMIT 10 OFFSET 0;"
    },
    {
      "name": "devices LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM devices LIMIT 10 OFFSET 10;"
    },
    {
      "name": "devices LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM devices LIMIT 10 OFFSET 100;"
    },
    {
      "name": "devices LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM devices LIMIT 25 OFFSET 0;"
    },
    {
      "name": "devices LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM devices LIMIT 25 OFFSET 10;"
    },
    {
      "name": "devices LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM devices LIMIT 25 OFFSET 100;"
    },
    {
      "name": "devices LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM devices LIMIT 50 OFFSET 0;"
    },
    {
      "name": "devices LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM devices LIMIT 50 OFFSET 10;"
    },
    {
      "name": "devices LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM devices LIMIT 50 OFFSET 100;"
    },
    {
      "name": "sensors LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM sensors LIMIT 10 OFFSET 0;"
    },
    {
      "name": "sensors LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM sensors LIMIT 10 OFFSET 10;"
    },
    {
      "name": "sensors LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM sensors LIMIT 10 OFFSET 100;"
    },
    {
      "name": "sensors LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM sensors LIMIT 25 OFFSET 0;"
    },
    {
      "name": "sensors LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM sensors LIMIT 25 OFFSET 10;"
    },
    {
      "name": "sensors LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM sensors LIMIT 25 OFFSET 100;"
    },
    {
      "name": "sensors LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM sensors LIMIT 50 OFFSET 0;"
    },
    {
      "name": "sensors LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM sensors LIMIT 50 OFFSET 10;"
    },
    {
      "name": "sensors LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM sensors LIMIT 50 OFFSET 100;"
    },
    {
      "name": "readings LIMIT 10 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM readings LIMIT 10 OFFSET 0;"
    },
    {
      "name": "readings LIMIT 10 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM readings LIMIT 10 OFFSET 10;"
    },
    {
      "name": "readings LIMIT 10 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM readings LIMIT 10 OFFSET 100;"
    },
    {
      "name": "readings LIMIT 25 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM readings LIMIT 25 OFFSET 0;"
    },
    {
      "name": "readings LIMIT 25 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM readings LIMIT 25 OFFSET 10;"
    },
    {
      "name": "readings LIMIT 25 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM readings LIMIT 25 OFFSET 100;"
    },
    {
      "name": "readings LIMIT 50 OFFSET 0",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM readings LIMIT 50 OFFSET 0;"
    },
    {
      "name": "readings LIMIT 50 OFFSET 10",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM readings LIMIT 50 OFFSET 10;"
    },
    {
      "name": "readings LIMIT 50 OFFSET 100",
      "category": "DQL/Select/Paging",
      "description": "Paging example.",
      "sql": "SELECT * FROM readings LIMIT 50 OFFSET 100;"
    },
    {
      "name": "people GLOB pattern on name (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM people WHERE name GLOB 'a*';"
    },
    {
      "name": "people GLOB pattern on name (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM people WHERE name GLOB '*ing';"
    },
    {
      "name": "people GLOB pattern on name ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM people WHERE name GLOB '[A-Z]*';"
    },
    {
      "name": "customers GLOB pattern on name (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM customers WHERE name GLOB 'a*';"
    },
    {
      "name": "customers GLOB pattern on name (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM customers WHERE name GLOB '*ing';"
    },
    {
      "name": "customers GLOB pattern on name ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM customers WHERE name GLOB '[A-Z]*';"
    },
    {
      "name": "products GLOB pattern on name (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM products WHERE name GLOB 'a*';"
    },
    {
      "name": "products GLOB pattern on name (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM products WHERE name GLOB '*ing';"
    },
    {
      "name": "products GLOB pattern on name ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM products WHERE name GLOB '[A-Z]*';"
    },
    {
      "name": "employees GLOB pattern on first_name (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM employees WHERE first_name GLOB 'a*';"
    },
    {
      "name": "employees GLOB pattern on first_name (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM employees WHERE first_name GLOB '*ing';"
    },
    {
      "name": "employees GLOB pattern on first_name ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM employees WHERE first_name GLOB '[A-Z]*';"
    },
    {
      "name": "departments GLOB pattern on dept_name (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM departments WHERE dept_name GLOB 'a*';"
    },
    {
      "name": "departments GLOB pattern on dept_name (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM departments WHERE dept_name GLOB '*ing';"
    },
    {
      "name": "departments GLOB pattern on dept_name ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM departments WHERE dept_name GLOB '[A-Z]*';"
    },
    {
      "name": "posts GLOB pattern on title (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM posts WHERE title GLOB 'a*';"
    },
    {
      "name": "posts GLOB pattern on title (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM posts WHERE title GLOB '*ing';"
    },
    {
      "name": "posts GLOB pattern on title ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM posts WHERE title GLOB '[A-Z]*';"
    },
    {
      "name": "comments GLOB pattern on author (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM comments WHERE author GLOB 'a*';"
    },
    {
      "name": "comments GLOB pattern on author (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM comments WHERE author GLOB '*ing';"
    },
    {
      "name": "comments GLOB pattern on author ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM comments WHERE author GLOB '[A-Z]*';"
    },
    {
      "name": "tags GLOB pattern on name (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM tags WHERE name GLOB 'a*';"
    },
    {
      "name": "tags GLOB pattern on name (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM tags WHERE name GLOB '*ing';"
    },
    {
      "name": "tags GLOB pattern on name ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM tags WHERE name GLOB '[A-Z]*';"
    },
    {
      "name": "books GLOB pattern on title (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM books WHERE title GLOB 'a*';"
    },
    {
      "name": "books GLOB pattern on title (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM books WHERE title GLOB '*ing';"
    },
    {
      "name": "books GLOB pattern on title ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM books WHERE title GLOB '[A-Z]*';"
    },
    {
      "name": "authors GLOB pattern on name (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM authors WHERE name GLOB 'a*';"
    },
    {
      "name": "authors GLOB pattern on name (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM authors WHERE name GLOB '*ing';"
    },
    {
      "name": "authors GLOB pattern on name ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM authors WHERE name GLOB '[A-Z]*';"
    },
    {
      "name": "members GLOB pattern on name (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM members WHERE name GLOB 'a*';"
    },
    {
      "name": "members GLOB pattern on name (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM members WHERE name GLOB '*ing';"
    },
    {
      "name": "members GLOB pattern on name ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM members WHERE name GLOB '[A-Z]*';"
    },
    {
      "name": "devices GLOB pattern on name (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM devices WHERE name GLOB 'a*';"
    },
    {
      "name": "devices GLOB pattern on name (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM devices WHERE name GLOB '*ing';"
    },
    {
      "name": "devices GLOB pattern on name ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM devices WHERE name GLOB '[A-Z]*';"
    },
    {
      "name": "sensors GLOB pattern on kind (a*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM sensors WHERE kind GLOB 'a*';"
    },
    {
      "name": "sensors GLOB pattern on kind (*ing)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM sensors WHERE kind GLOB '*ing';"
    },
    {
      "name": "sensors GLOB pattern on kind ([A-Z]*)",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB pattern matching.",
      "sql": "SELECT * FROM sensors WHERE kind GLOB '[A-Z]*';"
    },
    {
      "name": "JSON1 placeholder on people",
      "category": "DQL/JSON",
      "description": "Example JSON1 usage (requires JSON1 extension).",
      "sql": "-- SELECT json_extract(col, '$.path') FROM people; -- requires JSON1"
    },
    {
      "name": "JSON1 placeholder on products",
      "category": "DQL/JSON",
      "description": "Example JSON1 usage (requires JSON1 extension).",
      "sql": "-- SELECT json_extract(col, '$.path') FROM products; -- requires JSON1"
    },
    {
      "name": "JSON1 placeholder on orders",
      "category": "DQL/JSON",
      "description": "Example JSON1 usage (requires JSON1 extension).",
      "sql": "-- SELECT json_extract(col, '$.path') FROM orders; -- requires JSON1"
    },
    {
      "name": "Keyset paging on people",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM people WHERE id > ? ORDER BY id LIMIT 50;"
    },
    {
      "name": "Keyset paging on customers",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM customers WHERE customer_id > ? ORDER BY customer_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on products",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM products WHERE product_id > ? ORDER BY product_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on orders",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM orders WHERE order_id > ? ORDER BY order_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on order_items",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM order_items WHERE rowid > ? ORDER BY rowid LIMIT 50;"
    },
    {
      "name": "Keyset paging on employees",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM employees WHERE emp_id > ? ORDER BY emp_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on departments",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM departments WHERE dept_id > ? ORDER BY dept_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on posts",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM posts WHERE post_id > ? ORDER BY post_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on comments",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM comments WHERE comment_id > ? ORDER BY comment_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on tags",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM tags WHERE tag_id > ? ORDER BY tag_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on post_tags",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM post_tags WHERE rowid > ? ORDER BY rowid LIMIT 50;"
    },
    {
      "name": "Keyset paging on books",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM books WHERE book_id > ? ORDER BY book_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on authors",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM authors WHERE author_id > ? ORDER BY author_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on loans",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM loans WHERE loan_id > ? ORDER BY loan_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on members",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM members WHERE member_id > ? ORDER BY member_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on devices",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM devices WHERE device_id > ? ORDER BY device_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on sensors",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM sensors WHERE sensor_id > ? ORDER BY sensor_id LIMIT 50;"
    },
    {
      "name": "Keyset paging on readings",
      "category": "DQL/Select/Paging/Keyset",
      "description": "Efficient paging using pk > ?.",
      "sql": "SELECT * FROM readings WHERE reading_id > ? ORDER BY reading_id LIMIT 50;"
    },
    {
      "name": "Group people by name having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT name, COUNT(*) AS cnt FROM people GROUP BY name HAVING COUNT(*)>1;"
    },
    {
      "name": "Group customers by name having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT name, COUNT(*) AS cnt FROM customers GROUP BY name HAVING COUNT(*)>1;"
    },
    {
      "name": "Group products by name having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT name, COUNT(*) AS cnt FROM products GROUP BY name HAVING COUNT(*)>1;"
    },
    {
      "name": "Group employees by first_name having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT first_name, COUNT(*) AS cnt FROM employees GROUP BY first_name HAVING COUNT(*)>1;"
    },
    {
      "name": "Group departments by dept_name having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT dept_name, COUNT(*) AS cnt FROM departments GROUP BY dept_name HAVING COUNT(*)>1;"
    },
    {
      "name": "Group posts by title having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT title, COUNT(*) AS cnt FROM posts GROUP BY title HAVING COUNT(*)>1;"
    },
    {
      "name": "Group comments by author having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT author, COUNT(*) AS cnt FROM comments GROUP BY author HAVING COUNT(*)>1;"
    },
    {
      "name": "Group tags by name having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT name, COUNT(*) AS cnt FROM tags GROUP BY name HAVING COUNT(*)>1;"
    },
    {
      "name": "Group books by title having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT title, COUNT(*) AS cnt FROM books GROUP BY title HAVING COUNT(*)>1;"
    },
    {
      "name": "Group authors by name having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT name, COUNT(*) AS cnt FROM authors GROUP BY name HAVING COUNT(*)>1;"
    },
    {
      "name": "Group members by name having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT name, COUNT(*) AS cnt FROM members GROUP BY name HAVING COUNT(*)>1;"
    },
    {
      "name": "Group devices by name having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT name, COUNT(*) AS cnt FROM devices GROUP BY name HAVING COUNT(*)>1;"
    },
    {
      "name": "Group sensors by kind having count>1",
      "category": "DQL/Aggregation/HAVING",
      "description": "HAVING filter example.",
      "sql": "SELECT kind, COUNT(*) AS cnt FROM sensors GROUP BY kind HAVING COUNT(*)>1;"
    },
    {
      "name": "Trigger BEFORE INSERT set people.created_at",
      "category": "DDL/Trigger",
      "description": "Set timestamp on insert if NULL.",
      "sql": "CREATE TRIGGER IF NOT EXISTS trg_people_bi_ts BEFORE INSERT ON people\nFOR EACH ROW WHEN NEW.created_at IS NULL BEGIN\n  SET NEW.created_at = datetime('now');\nEND;"
    },
    {
      "name": "Trigger BEFORE INSERT set customers.created_at",
      "category": "DDL/Trigger",
      "description": "Set timestamp on insert if NULL.",
      "sql": "CREATE TRIGGER IF NOT EXISTS trg_customers_bi_ts BEFORE INSERT ON customers\nFOR EACH ROW WHEN NEW.created_at IS NULL BEGIN\n  SET NEW.created_at = datetime('now');\nEND;"
    },
    {
      "name": "Trigger BEFORE INSERT set orders.created_at",
      "category": "DDL/Trigger",
      "description": "Set timestamp on insert if NULL.",
      "sql": "CREATE TRIGGER IF NOT EXISTS trg_orders_bi_ts BEFORE INSERT ON orders\nFOR EACH ROW WHEN NEW.created_at IS NULL BEGIN\n  SET NEW.created_at = datetime('now');\nEND;"
    },
    {
      "name": "Trigger BEFORE INSERT set employees.hired_at",
      "category": "DDL/Trigger",
      "description": "Set timestamp on insert if NULL.",
      "sql": "CREATE TRIGGER IF NOT EXISTS trg_employees_bi_ts BEFORE INSERT ON employees\nFOR EACH ROW WHEN NEW.hired_at IS NULL BEGIN\n  SET NEW.hired_at = datetime('now');\nEND;"
    },
    {
      "name": "Trigger BEFORE INSERT set posts.published_at",
      "category": "DDL/Trigger",
      "description": "Set timestamp on insert if NULL.",
      "sql": "CREATE TRIGGER IF NOT EXISTS trg_posts_bi_ts BEFORE INSERT ON posts\nFOR EACH ROW WHEN NEW.published_at IS NULL BEGIN\n  SET NEW.published_at = datetime('now');\nEND;"
    },
    {
      "name": "Trigger BEFORE INSERT set comments.created_at",
      "category": "DDL/Trigger",
      "description": "Set timestamp on insert if NULL.",
      "sql": "CREATE TRIGGER IF NOT EXISTS trg_comments_bi_ts BEFORE INSERT ON comments\nFOR EACH ROW WHEN NEW.created_at IS NULL BEGIN\n  SET NEW.created_at = datetime('now');\nEND;"
    },
    {
      "name": "Trigger BEFORE INSERT set loans.loaned_at",
      "category": "DDL/Trigger",
      "description": "Set timestamp on insert if NULL.",
      "sql": "CREATE TRIGGER IF NOT EXISTS trg_loans_bi_ts BEFORE INSERT ON loans\nFOR EACH ROW WHEN NEW.loaned_at IS NULL BEGIN\n  SET NEW.loaned_at = datetime('now');\nEND;"
    },
    {
      "name": "Trigger BEFORE INSERT set members.joined_at",
      "category": "DDL/Trigger",
      "description": "Set timestamp on insert if NULL.",
      "sql": "CREATE TRIGGER IF NOT EXISTS trg_members_bi_ts BEFORE INSERT ON members\nFOR EACH ROW WHEN NEW.joined_at IS NULL BEGIN\n  SET NEW.joined_at = datetime('now');\nEND;"
    },
    {
      "name": "Trigger BEFORE INSERT set readings.measured_at",
      "category": "DDL/Trigger",
      "description": "Set timestamp on insert if NULL.",
      "sql": "CREATE TRIGGER IF NOT EXISTS trg_readings_bi_ts BEFORE INSERT ON readings\nFOR EACH ROW WHEN NEW.measured_at IS NULL BEGIN\n  SET NEW.measured_at = datetime('now');\nEND;"
    },
    {
      "name": "Trigger sample (SQLite syntax note)",
      "category": "DDL/Trigger",
      "description": "SQLite trigger body uses assignments via 'SET' not supported; use 'UPDATE ... SET' or direct NEW.col = expr; shown here as comment.",
      "sql": "-- SQLite trigger example:\nCREATE TRIGGER IF NOT EXISTS trg_people_bi_ts BEFORE INSERT ON people\nBEGIN\n  -- SET NEW.created_at = datetime('now'); -- In SQLite, use: SELECT CASE WHEN NEW.created_at IS NULL THEN datetime('now') END;\nEND;"
    },
    {
      "name": "Trigger sample (SQLite syntax note)",
      "category": "DDL/Trigger",
      "description": "SQLite trigger body uses assignments via 'SET' not supported; use 'UPDATE ... SET' or direct NEW.col = expr; shown here as comment.",
      "sql": "-- SQLite trigger example:\nCREATE TRIGGER IF NOT EXISTS trg_customers_bi_ts BEFORE INSERT ON customers\nBEGIN\n  -- SET NEW.created_at = datetime('now'); -- In SQLite, use: SELECT CASE WHEN NEW.created_at IS NULL THEN datetime('now') END;\nEND;"
    },
    {
      "name": "Trigger sample (SQLite syntax note)",
      "category": "DDL/Trigger",
      "description": "SQLite trigger body uses assignments via 'SET' not supported; use 'UPDATE ... SET' or direct NEW.col = expr; shown here as comment.",
      "sql": "-- SQLite trigger example:\nCREATE TRIGGER IF NOT EXISTS trg_orders_bi_ts BEFORE INSERT ON orders\nBEGIN\n  -- SET NEW.created_at = datetime('now'); -- In SQLite, use: SELECT CASE WHEN NEW.created_at IS NULL THEN datetime('now') END;\nEND;"
    },
    {
      "name": "Trigger sample (SQLite syntax note)",
      "category": "DDL/Trigger",
      "description": "SQLite trigger body uses assignments via 'SET' not supported; use 'UPDATE ... SET' or direct NEW.col = expr; shown here as comment.",
      "sql": "-- SQLite trigger example:\nCREATE TRIGGER IF NOT EXISTS trg_employees_bi_ts BEFORE INSERT ON employees\nBEGIN\n  -- SET NEW.hired_at = datetime('now'); -- In SQLite, use: SELECT CASE WHEN NEW.hired_at IS NULL THEN datetime('now') END;\nEND;"
    },
    {
      "name": "Trigger sample (SQLite syntax note)",
      "category": "DDL/Trigger",
      "description": "SQLite trigger body uses assignments via 'SET' not supported; use 'UPDATE ... SET' or direct NEW.col = expr; shown here as comment.",
      "sql": "-- SQLite trigger example:\nCREATE TRIGGER IF NOT EXISTS trg_posts_bi_ts BEFORE INSERT ON posts\nBEGIN\n  -- SET NEW.published_at = datetime('now'); -- In SQLite, use: SELECT CASE WHEN NEW.published_at IS NULL THEN datetime('now') END;\nEND;"
    },
    {
      "name": "Trigger sample (SQLite syntax note)",
      "category": "DDL/Trigger",
      "description": "SQLite trigger body uses assignments via 'SET' not supported; use 'UPDATE ... SET' or direct NEW.col = expr; shown here as comment.",
      "sql": "-- SQLite trigger example:\nCREATE TRIGGER IF NOT EXISTS trg_comments_bi_ts BEFORE INSERT ON comments\nBEGIN\n  -- SET NEW.created_at = datetime('now'); -- In SQLite, use: SELECT CASE WHEN NEW.created_at IS NULL THEN datetime('now') END;\nEND;"
    },
    {
      "name": "Trigger sample (SQLite syntax note)",
      "category": "DDL/Trigger",
      "description": "SQLite trigger body uses assignments via 'SET' not supported; use 'UPDATE ... SET' or direct NEW.col = expr; shown here as comment.",
      "sql": "-- SQLite trigger example:\nCREATE TRIGGER IF NOT EXISTS trg_loans_bi_ts BEFORE INSERT ON loans\nBEGIN\n  -- SET NEW.loaned_at = datetime('now'); -- In SQLite, use: SELECT CASE WHEN NEW.loaned_at IS NULL THEN datetime('now') END;\nEND;"
    },
    {
      "name": "Trigger sample (SQLite syntax note)",
      "category": "DDL/Trigger",
      "description": "SQLite trigger body uses assignments via 'SET' not supported; use 'UPDATE ... SET' or direct NEW.col = expr; shown here as comment.",
      "sql": "-- SQLite trigger example:\nCREATE TRIGGER IF NOT EXISTS trg_members_bi_ts BEFORE INSERT ON members\nBEGIN\n  -- SET NEW.joined_at = datetime('now'); -- In SQLite, use: SELECT CASE WHEN NEW.joined_at IS NULL THEN datetime('now') END;\nEND;"
    },
    {
      "name": "Trigger sample (SQLite syntax note)",
      "category": "DDL/Trigger",
      "description": "SQLite trigger body uses assignments via 'SET' not supported; use 'UPDATE ... SET' or direct NEW.col = expr; shown here as comment.",
      "sql": "-- SQLite trigger example:\nCREATE TRIGGER IF NOT EXISTS trg_readings_bi_ts BEFORE INSERT ON readings\nBEGIN\n  -- SET NEW.measured_at = datetime('now'); -- In SQLite, use: SELECT CASE WHEN NEW.measured_at IS NULL THEN datetime('now') END;\nEND;"
    },
    {
      "name": "ATTACH another database file",
      "category": "Meta/Database",
      "description": "Attach another DB as 'aux'.",
      "sql": "ATTACH DATABASE 'other.db' AS aux;"
    },
    {
      "name": "DETACH attached database",
      "category": "Meta/Database",
      "description": "Detach 'aux'.",
      "sql": "DETACH DATABASE aux;"
    },
    {
      "name": "VACUUM",
      "category": "Meta/Maintenance",
      "description": "Rebuild the database file, repack free pages.",
      "sql": "VACUUM;"
    },
    {
      "name": "ANALYZE",
      "category": "Meta/Maintenance",
      "description": "Collect statistics for the query planner.",
      "sql": "ANALYZE;"
    },
    {
      "name": "orders↔customers inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM orders l JOIN customers r ON l.customer_id=r.customer_id LIMIT 5;"
    },
    {
      "name": "orders↔customers left join filter r.customer_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM orders l LEFT JOIN customers r ON l.customer_id=r.customer_id WHERE r.customer_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "orders↔customers inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM orders l JOIN customers r ON l.customer_id=r.customer_id LIMIT 10;"
    },
    {
      "name": "orders↔customers left join filter r.customer_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM orders l LEFT JOIN customers r ON l.customer_id=r.customer_id WHERE r.customer_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "orders↔customers inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM orders l JOIN customers r ON l.customer_id=r.customer_id LIMIT 20;"
    },
    {
      "name": "orders↔customers left join filter r.customer_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM orders l LEFT JOIN customers r ON l.customer_id=r.customer_id WHERE r.customer_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "order_items↔orders inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM order_items l JOIN orders r ON l.order_id=r.order_id LIMIT 5;"
    },
    {
      "name": "order_items↔orders left join filter r.order_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM order_items l LEFT JOIN orders r ON l.order_id=r.order_id WHERE r.order_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "order_items↔orders inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM order_items l JOIN orders r ON l.order_id=r.order_id LIMIT 10;"
    },
    {
      "name": "order_items↔orders left join filter r.order_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM order_items l LEFT JOIN orders r ON l.order_id=r.order_id WHERE r.order_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "order_items↔orders inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM order_items l JOIN orders r ON l.order_id=r.order_id LIMIT 20;"
    },
    {
      "name": "order_items↔orders left join filter r.order_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM order_items l LEFT JOIN orders r ON l.order_id=r.order_id WHERE r.order_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "order_items↔products inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM order_items l JOIN products r ON l.product_id=r.product_id LIMIT 5;"
    },
    {
      "name": "order_items↔products left join filter r.product_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM order_items l LEFT JOIN products r ON l.product_id=r.product_id WHERE r.product_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "order_items↔products inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM order_items l JOIN products r ON l.product_id=r.product_id LIMIT 10;"
    },
    {
      "name": "order_items↔products left join filter r.product_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM order_items l LEFT JOIN products r ON l.product_id=r.product_id WHERE r.product_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "order_items↔products inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM order_items l JOIN products r ON l.product_id=r.product_id LIMIT 20;"
    },
    {
      "name": "order_items↔products left join filter r.product_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM order_items l LEFT JOIN products r ON l.product_id=r.product_id WHERE r.product_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "employees↔departments inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM employees l JOIN departments r ON l.dept_id=r.dept_id LIMIT 5;"
    },
    {
      "name": "employees↔departments left join filter r.dept_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM employees l LEFT JOIN departments r ON l.dept_id=r.dept_id WHERE r.dept_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "employees↔departments inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM employees l JOIN departments r ON l.dept_id=r.dept_id LIMIT 10;"
    },
    {
      "name": "employees↔departments left join filter r.dept_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM employees l LEFT JOIN departments r ON l.dept_id=r.dept_id WHERE r.dept_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "employees↔departments inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM employees l JOIN departments r ON l.dept_id=r.dept_id LIMIT 20;"
    },
    {
      "name": "employees↔departments left join filter r.dept_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM employees l LEFT JOIN departments r ON l.dept_id=r.dept_id WHERE r.dept_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "posts↔comments inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM posts l JOIN comments r ON l.post_id=r.post_id LIMIT 5;"
    },
    {
      "name": "posts↔comments left join filter r.post_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM posts l LEFT JOIN comments r ON l.post_id=r.post_id WHERE r.post_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "posts↔comments inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM posts l JOIN comments r ON l.post_id=r.post_id LIMIT 10;"
    },
    {
      "name": "posts↔comments left join filter r.post_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM posts l LEFT JOIN comments r ON l.post_id=r.post_id WHERE r.post_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "posts↔comments inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM posts l JOIN comments r ON l.post_id=r.post_id LIMIT 20;"
    },
    {
      "name": "posts↔comments left join filter r.post_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM posts l LEFT JOIN comments r ON l.post_id=r.post_id WHERE r.post_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "books↔authors inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM books l JOIN authors r ON l.author_id=r.author_id LIMIT 5;"
    },
    {
      "name": "books↔authors left join filter r.author_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM books l LEFT JOIN authors r ON l.author_id=r.author_id WHERE r.author_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "books↔authors inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM books l JOIN authors r ON l.author_id=r.author_id LIMIT 10;"
    },
    {
      "name": "books↔authors left join filter r.author_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM books l LEFT JOIN authors r ON l.author_id=r.author_id WHERE r.author_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "books↔authors inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM books l JOIN authors r ON l.author_id=r.author_id LIMIT 20;"
    },
    {
      "name": "books↔authors left join filter r.author_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM books l LEFT JOIN authors r ON l.author_id=r.author_id WHERE r.author_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "loans↔books inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM loans l JOIN books r ON l.book_id=r.book_id LIMIT 5;"
    },
    {
      "name": "loans↔books left join filter r.book_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM loans l LEFT JOIN books r ON l.book_id=r.book_id WHERE r.book_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "loans↔books inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM loans l JOIN books r ON l.book_id=r.book_id LIMIT 10;"
    },
    {
      "name": "loans↔books left join filter r.book_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM loans l LEFT JOIN books r ON l.book_id=r.book_id WHERE r.book_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "loans↔books inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM loans l JOIN books r ON l.book_id=r.book_id LIMIT 20;"
    },
    {
      "name": "loans↔books left join filter r.book_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM loans l LEFT JOIN books r ON l.book_id=r.book_id WHERE r.book_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "loans↔members inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM loans l JOIN members r ON l.member_id=r.member_id LIMIT 5;"
    },
    {
      "name": "loans↔members left join filter r.member_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM loans l LEFT JOIN members r ON l.member_id=r.member_id WHERE r.member_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "loans↔members inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM loans l JOIN members r ON l.member_id=r.member_id LIMIT 10;"
    },
    {
      "name": "loans↔members left join filter r.member_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM loans l LEFT JOIN members r ON l.member_id=r.member_id WHERE r.member_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "loans↔members inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM loans l JOIN members r ON l.member_id=r.member_id LIMIT 20;"
    },
    {
      "name": "loans↔members left join filter r.member_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM loans l LEFT JOIN members r ON l.member_id=r.member_id WHERE r.member_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "sensors↔devices inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM sensors l JOIN devices r ON l.device_id=r.device_id LIMIT 5;"
    },
    {
      "name": "sensors↔devices left join filter r.device_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM sensors l LEFT JOIN devices r ON l.device_id=r.device_id WHERE r.device_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "sensors↔devices inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM sensors l JOIN devices r ON l.device_id=r.device_id LIMIT 10;"
    },
    {
      "name": "sensors↔devices left join filter r.device_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM sensors l LEFT JOIN devices r ON l.device_id=r.device_id WHERE r.device_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "sensors↔devices inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM sensors l JOIN devices r ON l.device_id=r.device_id LIMIT 20;"
    },
    {
      "name": "sensors↔devices left join filter r.device_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM sensors l LEFT JOIN devices r ON l.device_id=r.device_id WHERE r.device_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "readings↔sensors inner join + limit 5",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM readings l JOIN sensors r ON l.sensor_id=r.sensor_id LIMIT 5;"
    },
    {
      "name": "readings↔sensors left join filter r.sensor_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM readings l LEFT JOIN sensors r ON l.sensor_id=r.sensor_id WHERE r.sensor_id IS NOT NULL LIMIT 5;"
    },
    {
      "name": "readings↔sensors inner join + limit 10",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM readings l JOIN sensors r ON l.sensor_id=r.sensor_id LIMIT 10;"
    },
    {
      "name": "readings↔sensors left join filter r.sensor_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM readings l LEFT JOIN sensors r ON l.sensor_id=r.sensor_id WHERE r.sensor_id IS NOT NULL LIMIT 10;"
    },
    {
      "name": "readings↔sensors inner join + limit 20",
      "category": "DQL/Joins/Inner",
      "description": "Join plus LIMIT.",
      "sql": "SELECT l.*, r.* FROM readings l JOIN sensors r ON l.sensor_id=r.sensor_id LIMIT 20;"
    },
    {
      "name": "readings↔sensors left join filter r.sensor_id not null",
      "category": "DQL/Joins/Left/Filters",
      "description": "Left join filtered by non-null right key.",
      "sql": "SELECT l.*, r.* FROM readings l LEFT JOIN sensors r ON l.sensor_id=r.sensor_id WHERE r.sensor_id IS NOT NULL LIMIT 20;"
    },
    {
      "name": "Distinct pair on people",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT name, city FROM people;"
    },
    {
      "name": "Distinct pair on customers",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT name, email FROM customers;"
    },
    {
      "name": "Distinct pair on products",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT name, category FROM products;"
    },
    {
      "name": "Distinct pair on orders",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT rowid, rowid FROM orders;"
    },
    {
      "name": "Distinct pair on order_items",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT rowid, rowid FROM order_items;"
    },
    {
      "name": "Distinct pair on employees",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT first_name, last_name FROM employees;"
    },
    {
      "name": "Distinct pair on departments",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT dept_name FROM departments;"
    },
    {
      "name": "Distinct pair on posts",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT title, body FROM posts;"
    },
    {
      "name": "Distinct pair on comments",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT author, body FROM comments;"
    },
    {
      "name": "Distinct pair on tags",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT name FROM tags;"
    },
    {
      "name": "Distinct pair on post_tags",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT rowid, rowid FROM post_tags;"
    },
    {
      "name": "Distinct pair on books",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT title FROM books;"
    },
    {
      "name": "Distinct pair on authors",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT name FROM authors;"
    },
    {
      "name": "Distinct pair on loans",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT rowid, rowid FROM loans;"
    },
    {
      "name": "Distinct pair on members",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT name, city FROM members;"
    },
    {
      "name": "Distinct pair on devices",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT name, location FROM devices;"
    },
    {
      "name": "Distinct pair on sensors",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT kind FROM sensors;"
    },
    {
      "name": "Distinct pair on readings",
      "category": "DQL/Distinct",
      "description": "DISTINCT on first two text-like columns.",
      "sql": "SELECT DISTINCT rowid, rowid FROM readings;"
    },
    {
      "name": "Recursive CTE numbers to 5",
      "category": "DQL/CTE/Recursive",
      "description": "Generate a numeric sequence.",
      "sql": "WITH RECURSIVE nums(n) AS (SELECT 1 UNION ALL SELECT n+1 FROM nums WHERE n<5) SELECT * FROM nums;"
    },
    {
      "name": "Recursive CTE numbers to 10",
      "category": "DQL/CTE/Recursive",
      "description": "Generate a numeric sequence.",
      "sql": "WITH RECURSIVE nums(n) AS (SELECT 1 UNION ALL SELECT n+1 FROM nums WHERE n<10) SELECT * FROM nums;"
    },
    {
      "name": "Recursive CTE numbers to 20",
      "category": "DQL/CTE/Recursive",
      "description": "Generate a numeric sequence.",
      "sql": "WITH RECURSIVE nums(n) AS (SELECT 1 UNION ALL SELECT n+1 FROM nums WHERE n<20) SELECT * FROM nums;"
    },
    {
      "name": "Recursive CTE numbers to 50",
      "category": "DQL/CTE/Recursive",
      "description": "Generate a numeric sequence.",
      "sql": "WITH RECURSIVE nums(n) AS (SELECT 1 UNION ALL SELECT n+1 FROM nums WHERE n<50) SELECT * FROM nums;"
    },
    {
      "name": "Recursive CTE numbers to 100",
      "category": "DQL/CTE/Recursive",
      "description": "Generate a numeric sequence.",
      "sql": "WITH RECURSIVE nums(n) AS (SELECT 1 UNION ALL SELECT n+1 FROM nums WHERE n<100) SELECT * FROM nums;"
    },
    {
      "name": "Dynamic ORDER BY for people",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM people ORDER BY CASE ? WHEN 'pk' THEN id END, CASE ? WHEN 'text' THEN name END;"
    },
    {
      "name": "Dynamic ORDER BY for customers",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM customers ORDER BY CASE ? WHEN 'pk' THEN customer_id END, CASE ? WHEN 'text' THEN name END;"
    },
    {
      "name": "Dynamic ORDER BY for products",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM products ORDER BY CASE ? WHEN 'pk' THEN product_id END, CASE ? WHEN 'text' THEN name END;"
    },
    {
      "name": "Dynamic ORDER BY for order_items",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM order_items ORDER BY CASE ? WHEN 'pk' THEN rowid END, CASE ? WHEN 'text' THEN rowid END;"
    },
    {
      "name": "Dynamic ORDER BY for employees",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM employees ORDER BY CASE ? WHEN 'pk' THEN emp_id END, CASE ? WHEN 'text' THEN first_name END;"
    },
    {
      "name": "Dynamic ORDER BY for departments",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM departments ORDER BY CASE ? WHEN 'pk' THEN dept_id END, CASE ? WHEN 'text' THEN dept_name END;"
    },
    {
      "name": "Dynamic ORDER BY for posts",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM posts ORDER BY CASE ? WHEN 'pk' THEN post_id END, CASE ? WHEN 'text' THEN title END;"
    },
    {
      "name": "Dynamic ORDER BY for comments",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM comments ORDER BY CASE ? WHEN 'pk' THEN comment_id END, CASE ? WHEN 'text' THEN author END;"
    },
    {
      "name": "Dynamic ORDER BY for tags",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM tags ORDER BY CASE ? WHEN 'pk' THEN tag_id END, CASE ? WHEN 'text' THEN name END;"
    },
    {
      "name": "Dynamic ORDER BY for books",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM books ORDER BY CASE ? WHEN 'pk' THEN book_id END, CASE ? WHEN 'text' THEN title END;"
    },
    {
      "name": "Dynamic ORDER BY for authors",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM authors ORDER BY CASE ? WHEN 'pk' THEN author_id END, CASE ? WHEN 'text' THEN name END;"
    },
    {
      "name": "Dynamic ORDER BY for members",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM members ORDER BY CASE ? WHEN 'pk' THEN member_id END, CASE ? WHEN 'text' THEN name END;"
    },
    {
      "name": "Dynamic ORDER BY for devices",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM devices ORDER BY CASE ? WHEN 'pk' THEN device_id END, CASE ? WHEN 'text' THEN name END;"
    },
    {
      "name": "Dynamic ORDER BY for sensors",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM sensors ORDER BY CASE ? WHEN 'pk' THEN sensor_id END, CASE ? WHEN 'text' THEN kind END;"
    },
    {
      "name": "Dynamic ORDER BY for readings",
      "category": "DQL/Expressions/CASE",
      "description": "Emulate dynamic ordering with CASE.",
      "sql": "SELECT * FROM readings ORDER BY CASE ? WHEN 'pk' THEN reading_id END, CASE ? WHEN 'text' THEN reading_id END;"
    },
    {
      "name": "Deduplicate people by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM people UNION ALL SELECT * FROM people) GROUP BY id;"
    },
    {
      "name": "Deduplicate customers by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM customers UNION ALL SELECT * FROM customers) GROUP BY customer_id;"
    },
    {
      "name": "Deduplicate products by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM products UNION ALL SELECT * FROM products) GROUP BY product_id;"
    },
    {
      "name": "Deduplicate orders by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM orders UNION ALL SELECT * FROM orders) GROUP BY order_id;"
    },
    {
      "name": "Deduplicate order_items by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM order_items UNION ALL SELECT * FROM order_items) GROUP BY rowid;"
    },
    {
      "name": "Deduplicate employees by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM employees UNION ALL SELECT * FROM employees) GROUP BY emp_id;"
    },
    {
      "name": "Deduplicate departments by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM departments UNION ALL SELECT * FROM departments) GROUP BY dept_id;"
    },
    {
      "name": "Deduplicate posts by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM posts UNION ALL SELECT * FROM posts) GROUP BY post_id;"
    },
    {
      "name": "Deduplicate comments by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM comments UNION ALL SELECT * FROM comments) GROUP BY comment_id;"
    },
    {
      "name": "Deduplicate tags by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM tags UNION ALL SELECT * FROM tags) GROUP BY tag_id;"
    },
    {
      "name": "Deduplicate post_tags by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM post_tags UNION ALL SELECT * FROM post_tags) GROUP BY rowid;"
    },
    {
      "name": "Deduplicate books by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM books UNION ALL SELECT * FROM books) GROUP BY book_id;"
    },
    {
      "name": "Deduplicate authors by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM authors UNION ALL SELECT * FROM authors) GROUP BY author_id;"
    },
    {
      "name": "Deduplicate loans by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM loans UNION ALL SELECT * FROM loans) GROUP BY loan_id;"
    },
    {
      "name": "Deduplicate members by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM members UNION ALL SELECT * FROM members) GROUP BY member_id;"
    },
    {
      "name": "Deduplicate devices by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM devices UNION ALL SELECT * FROM devices) GROUP BY device_id;"
    },
    {
      "name": "Deduplicate sensors by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM sensors UNION ALL SELECT * FROM sensors) GROUP BY sensor_id;"
    },
    {
      "name": "Deduplicate readings by pk",
      "category": "DQL/Sets/Dedup",
      "description": "Use subquery + GROUP BY to deduplicate.",
      "sql": "SELECT * FROM (SELECT * FROM readings UNION ALL SELECT * FROM readings) GROUP BY reading_id;"
    },
    {
      "name": "people UPPER/LOWER on name",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT name, UPPER(name) AS upper_name, LOWER(name) AS lower_name FROM people;"
    },
    {
      "name": "people TRIM/LENGTH on name",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT name, TRIM(name) AS trimmed, LENGTH(name) AS len FROM people;"
    },
    {
      "name": "people ORDER BY name COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM people ORDER BY name COLLATE NOCASE;"
    },
    {
      "name": "people LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM people WHERE name LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "people GLOB character class on name",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM people WHERE name GLOB '[A-Za-z]*';"
    },
    {
      "name": "people COALESCE/IFNULL name",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(name, '(none)') AS safe_name, COALESCE(name, 'x','y') AS co_name FROM people;"
    },
    {
      "name": "people numeric ROUND/ABS on age",
      "category": "DQL/Expressions/Numeric",
      "description": "ROUND and ABS.",
      "sql": "SELECT age, ROUND(age,2) AS r2, ABS(age) AS abs_v FROM people;"
    },
    {
      "name": "people arithmetic on age",
      "category": "DQL/Expressions/Numeric",
      "description": "Basic arithmetic expressions.",
      "sql": "SELECT age, age*2 AS doubled, age/3.0 AS third FROM people;"
    },
    {
      "name": "people printf formatting for age",
      "category": "DQL/Expressions/Format",
      "description": "Format numbers.",
      "sql": "SELECT printf('%.2f', age) AS fmt FROM people;"
    },
    {
      "name": "customers UPPER/LOWER on name",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT name, UPPER(name) AS upper_name, LOWER(name) AS lower_name FROM customers;"
    },
    {
      "name": "customers TRIM/LENGTH on name",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT name, TRIM(name) AS trimmed, LENGTH(name) AS len FROM customers;"
    },
    {
      "name": "customers ORDER BY name COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM customers ORDER BY name COLLATE NOCASE;"
    },
    {
      "name": "customers LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM customers WHERE name LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "customers GLOB character class on name",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM customers WHERE name GLOB '[A-Za-z]*';"
    },
    {
      "name": "customers COALESCE/IFNULL name",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(name, '(none)') AS safe_name, COALESCE(name, 'x','y') AS co_name FROM customers;"
    },
    {
      "name": "products UPPER/LOWER on name",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT name, UPPER(name) AS upper_name, LOWER(name) AS lower_name FROM products;"
    },
    {
      "name": "products TRIM/LENGTH on name",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT name, TRIM(name) AS trimmed, LENGTH(name) AS len FROM products;"
    },
    {
      "name": "products ORDER BY name COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM products ORDER BY name COLLATE NOCASE;"
    },
    {
      "name": "products LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM products WHERE name LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "products GLOB character class on name",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM products WHERE name GLOB '[A-Za-z]*';"
    },
    {
      "name": "products COALESCE/IFNULL name",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(name, '(none)') AS safe_name, COALESCE(name, 'x','y') AS co_name FROM products;"
    },
    {
      "name": "products numeric ROUND/ABS on price",
      "category": "DQL/Expressions/Numeric",
      "description": "ROUND and ABS.",
      "sql": "SELECT price, ROUND(price,2) AS r2, ABS(price) AS abs_v FROM products;"
    },
    {
      "name": "products arithmetic on price",
      "category": "DQL/Expressions/Numeric",
      "description": "Basic arithmetic expressions.",
      "sql": "SELECT price, price*2 AS doubled, price/3.0 AS third FROM products;"
    },
    {
      "name": "products printf formatting for price",
      "category": "DQL/Expressions/Format",
      "description": "Format numbers.",
      "sql": "SELECT printf('%.2f', price) AS fmt FROM products;"
    },
    {
      "name": "order_items numeric ROUND/ABS on qty",
      "category": "DQL/Expressions/Numeric",
      "description": "ROUND and ABS.",
      "sql": "SELECT qty, ROUND(qty,2) AS r2, ABS(qty) AS abs_v FROM order_items;"
    },
    {
      "name": "order_items arithmetic on qty",
      "category": "DQL/Expressions/Numeric",
      "description": "Basic arithmetic expressions.",
      "sql": "SELECT qty, qty*2 AS doubled, qty/3.0 AS third FROM order_items;"
    },
    {
      "name": "order_items printf formatting for qty",
      "category": "DQL/Expressions/Format",
      "description": "Format numbers.",
      "sql": "SELECT printf('%.2f', qty) AS fmt FROM order_items;"
    },
    {
      "name": "employees UPPER/LOWER on first_name",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT first_name, UPPER(first_name) AS upper_first_name, LOWER(first_name) AS lower_first_name FROM employees;"
    },
    {
      "name": "employees TRIM/LENGTH on first_name",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT first_name, TRIM(first_name) AS trimmed, LENGTH(first_name) AS len FROM employees;"
    },
    {
      "name": "employees ORDER BY first_name COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM employees ORDER BY first_name COLLATE NOCASE;"
    },
    {
      "name": "employees LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM employees WHERE first_name LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "employees GLOB character class on first_name",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM employees WHERE first_name GLOB '[A-Za-z]*';"
    },
    {
      "name": "employees COALESCE/IFNULL first_name",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(first_name, '(none)') AS safe_first_name, COALESCE(first_name, 'x','y') AS co_first_name FROM employees;"
    },
    {
      "name": "employees numeric ROUND/ABS on salary",
      "category": "DQL/Expressions/Numeric",
      "description": "ROUND and ABS.",
      "sql": "SELECT salary, ROUND(salary,2) AS r2, ABS(salary) AS abs_v FROM employees;"
    },
    {
      "name": "employees arithmetic on salary",
      "category": "DQL/Expressions/Numeric",
      "description": "Basic arithmetic expressions.",
      "sql": "SELECT salary, salary*2 AS doubled, salary/3.0 AS third FROM employees;"
    },
    {
      "name": "employees printf formatting for salary",
      "category": "DQL/Expressions/Format",
      "description": "Format numbers.",
      "sql": "SELECT printf('%.2f', salary) AS fmt FROM employees;"
    },
    {
      "name": "departments UPPER/LOWER on dept_name",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT dept_name, UPPER(dept_name) AS upper_dept_name, LOWER(dept_name) AS lower_dept_name FROM departments;"
    },
    {
      "name": "departments TRIM/LENGTH on dept_name",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT dept_name, TRIM(dept_name) AS trimmed, LENGTH(dept_name) AS len FROM departments;"
    },
    {
      "name": "departments ORDER BY dept_name COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM departments ORDER BY dept_name COLLATE NOCASE;"
    },
    {
      "name": "departments LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM departments WHERE dept_name LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "departments GLOB character class on dept_name",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM departments WHERE dept_name GLOB '[A-Za-z]*';"
    },
    {
      "name": "departments COALESCE/IFNULL dept_name",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(dept_name, '(none)') AS safe_dept_name, COALESCE(dept_name, 'x','y') AS co_dept_name FROM departments;"
    },
    {
      "name": "posts UPPER/LOWER on title",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT title, UPPER(title) AS upper_title, LOWER(title) AS lower_title FROM posts;"
    },
    {
      "name": "posts TRIM/LENGTH on title",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT title, TRIM(title) AS trimmed, LENGTH(title) AS len FROM posts;"
    },
    {
      "name": "posts ORDER BY title COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM posts ORDER BY title COLLATE NOCASE;"
    },
    {
      "name": "posts LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM posts WHERE title LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "posts GLOB character class on title",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM posts WHERE title GLOB '[A-Za-z]*';"
    },
    {
      "name": "posts COALESCE/IFNULL title",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(title, '(none)') AS safe_title, COALESCE(title, 'x','y') AS co_title FROM posts;"
    },
    {
      "name": "comments UPPER/LOWER on author",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT author, UPPER(author) AS upper_author, LOWER(author) AS lower_author FROM comments;"
    },
    {
      "name": "comments TRIM/LENGTH on author",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT author, TRIM(author) AS trimmed, LENGTH(author) AS len FROM comments;"
    },
    {
      "name": "comments ORDER BY author COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM comments ORDER BY author COLLATE NOCASE;"
    },
    {
      "name": "comments LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM comments WHERE author LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "comments GLOB character class on author",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM comments WHERE author GLOB '[A-Za-z]*';"
    },
    {
      "name": "comments COALESCE/IFNULL author",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(author, '(none)') AS safe_author, COALESCE(author, 'x','y') AS co_author FROM comments;"
    },
    {
      "name": "tags UPPER/LOWER on name",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT name, UPPER(name) AS upper_name, LOWER(name) AS lower_name FROM tags;"
    },
    {
      "name": "tags TRIM/LENGTH on name",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT name, TRIM(name) AS trimmed, LENGTH(name) AS len FROM tags;"
    },
    {
      "name": "tags ORDER BY name COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM tags ORDER BY name COLLATE NOCASE;"
    },
    {
      "name": "tags LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM tags WHERE name LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "tags GLOB character class on name",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM tags WHERE name GLOB '[A-Za-z]*';"
    },
    {
      "name": "tags COALESCE/IFNULL name",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(name, '(none)') AS safe_name, COALESCE(name, 'x','y') AS co_name FROM tags;"
    },
    {
      "name": "books UPPER/LOWER on title",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT title, UPPER(title) AS upper_title, LOWER(title) AS lower_title FROM books;"
    },
    {
      "name": "books TRIM/LENGTH on title",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT title, TRIM(title) AS trimmed, LENGTH(title) AS len FROM books;"
    },
    {
      "name": "books ORDER BY title COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM books ORDER BY title COLLATE NOCASE;"
    },
    {
      "name": "books LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM books WHERE title LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "books GLOB character class on title",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM books WHERE title GLOB '[A-Za-z]*';"
    },
    {
      "name": "books COALESCE/IFNULL title",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(title, '(none)') AS safe_title, COALESCE(title, 'x','y') AS co_title FROM books;"
    },
    {
      "name": "books numeric ROUND/ABS on price",
      "category": "DQL/Expressions/Numeric",
      "description": "ROUND and ABS.",
      "sql": "SELECT price, ROUND(price,2) AS r2, ABS(price) AS abs_v FROM books;"
    },
    {
      "name": "books arithmetic on price",
      "category": "DQL/Expressions/Numeric",
      "description": "Basic arithmetic expressions.",
      "sql": "SELECT price, price*2 AS doubled, price/3.0 AS third FROM books;"
    },
    {
      "name": "books printf formatting for price",
      "category": "DQL/Expressions/Format",
      "description": "Format numbers.",
      "sql": "SELECT printf('%.2f', price) AS fmt FROM books;"
    },
    {
      "name": "authors UPPER/LOWER on name",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT name, UPPER(name) AS upper_name, LOWER(name) AS lower_name FROM authors;"
    },
    {
      "name": "authors TRIM/LENGTH on name",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT name, TRIM(name) AS trimmed, LENGTH(name) AS len FROM authors;"
    },
    {
      "name": "authors ORDER BY name COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM authors ORDER BY name COLLATE NOCASE;"
    },
    {
      "name": "authors LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM authors WHERE name LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "authors GLOB character class on name",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM authors WHERE name GLOB '[A-Za-z]*';"
    },
    {
      "name": "authors COALESCE/IFNULL name",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(name, '(none)') AS safe_name, COALESCE(name, 'x','y') AS co_name FROM authors;"
    },
    {
      "name": "members UPPER/LOWER on name",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT name, UPPER(name) AS upper_name, LOWER(name) AS lower_name FROM members;"
    },
    {
      "name": "members TRIM/LENGTH on name",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT name, TRIM(name) AS trimmed, LENGTH(name) AS len FROM members;"
    },
    {
      "name": "members ORDER BY name COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM members ORDER BY name COLLATE NOCASE;"
    },
    {
      "name": "members LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM members WHERE name LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "members GLOB character class on name",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM members WHERE name GLOB '[A-Za-z]*';"
    },
    {
      "name": "members COALESCE/IFNULL name",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(name, '(none)') AS safe_name, COALESCE(name, 'x','y') AS co_name FROM members;"
    },
    {
      "name": "devices UPPER/LOWER on name",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT name, UPPER(name) AS upper_name, LOWER(name) AS lower_name FROM devices;"
    },
    {
      "name": "devices TRIM/LENGTH on name",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT name, TRIM(name) AS trimmed, LENGTH(name) AS len FROM devices;"
    },
    {
      "name": "devices ORDER BY name COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM devices ORDER BY name COLLATE NOCASE;"
    },
    {
      "name": "devices LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM devices WHERE name LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "devices GLOB character class on name",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM devices WHERE name GLOB '[A-Za-z]*';"
    },
    {
      "name": "devices COALESCE/IFNULL name",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(name, '(none)') AS safe_name, COALESCE(name, 'x','y') AS co_name FROM devices;"
    },
    {
      "name": "sensors UPPER/LOWER on kind",
      "category": "DQL/Expressions/Text",
      "description": "Use UPPER/LOWER.",
      "sql": "SELECT kind, UPPER(kind) AS upper_kind, LOWER(kind) AS lower_kind FROM sensors;"
    },
    {
      "name": "sensors TRIM/LENGTH on kind",
      "category": "DQL/Expressions/Text",
      "description": "Use TRIM and LENGTH.",
      "sql": "SELECT kind, TRIM(kind) AS trimmed, LENGTH(kind) AS len FROM sensors;"
    },
    {
      "name": "sensors ORDER BY kind COLLATE NOCASE",
      "category": "DQL/Select/Ordering",
      "description": "Case-insensitive ordering.",
      "sql": "SELECT * FROM sensors ORDER BY kind COLLATE NOCASE;"
    },
    {
      "name": "sensors LIKE with ESCAPE",
      "category": "DQL/Select/Filters",
      "description": "LIKE with ESCAPE character.",
      "sql": "SELECT * FROM sensors WHERE kind LIKE '%\\_%' ESCAPE '\\';"
    },
    {
      "name": "sensors GLOB character class on kind",
      "category": "DQL/Select/Filters/GLOB",
      "description": "GLOB with character class.",
      "sql": "SELECT * FROM sensors WHERE kind GLOB '[A-Za-z]*';"
    },
    {
      "name": "sensors COALESCE/IFNULL kind",
      "category": "DQL/Expressions/Nulls",
      "description": "Null-handling functions.",
      "sql": "SELECT IFNULL(kind, '(none)') AS safe_kind, COALESCE(kind, 'x','y') AS co_kind FROM sensors;"
    },
    {
      "name": "readings numeric ROUND/ABS on value",
      "category": "DQL/Expressions/Numeric",
      "description": "ROUND and ABS.",
      "sql": "SELECT value, ROUND(value,2) AS r2, ABS(value) AS abs_v FROM readings;"
    },
    {
      "name": "readings arithmetic on value",
      "category": "DQL/Expressions/Numeric",
      "description": "Basic arithmetic expressions.",
      "sql": "SELECT value, value*2 AS doubled, value/3.0 AS third FROM readings;"
    },
    {
      "name": "readings printf formatting for value",
      "category": "DQL/Expressions/Format",
      "description": "Format numbers.",
      "sql": "SELECT printf('%.2f', value) AS fmt FROM readings;"
    },
    {
      "name": "people date bucket by month",
      "category": "DQL/DateTime",
      "description": "Group by month via strftime.",
      "sql": "SELECT strftime('%Y-%m', created_at) AS ym, COUNT(*) FROM people GROUP BY ym;"
    },
    {
      "name": "people date difference example",
      "category": "DQL/DateTime",
      "description": "Compute days difference to now.",
      "sql": "SELECT created_at, julianday('now') - julianday(created_at) AS days_ago FROM people;"
    },
    {
      "name": "customers date bucket by month",
      "category": "DQL/DateTime",
      "description": "Group by month via strftime.",
      "sql": "SELECT strftime('%Y-%m', created_at) AS ym, COUNT(*) FROM customers GROUP BY ym;"
    },
    {
      "name": "customers date difference example",
      "category": "DQL/DateTime",
      "description": "Compute days difference to now.",
      "sql": "SELECT created_at, julianday('now') - julianday(created_at) AS days_ago FROM customers;"
    },
    {
      "name": "orders date bucket by month",
      "category": "DQL/DateTime",
      "description": "Group by month via strftime.",
      "sql": "SELECT strftime('%Y-%m', created_at) AS ym, COUNT(*) FROM orders GROUP BY ym;"
    },
    {
      "name": "orders date difference example",
      "category": "DQL/DateTime",
      "description": "Compute days difference to now.",
      "sql": "SELECT created_at, julianday('now') - julianday(created_at) AS days_ago FROM orders;"
    },
    {
      "name": "employees date bucket by month",
      "category": "DQL/DateTime",
      "description": "Group by month via strftime.",
      "sql": "SELECT strftime('%Y-%m', hired_at) AS ym, COUNT(*) FROM employees GROUP BY ym;"
    },
    {
      "name": "employees date difference example",
      "category": "DQL/DateTime",
      "description": "Compute days difference to now.",
      "sql": "SELECT hired_at, julianday('now') - julianday(hired_at) AS days_ago FROM employees;"
    },
    {
      "name": "posts date bucket by month",
      "category": "DQL/DateTime",
      "description": "Group by month via strftime.",
      "sql": "SELECT strftime('%Y-%m', published_at) AS ym, COUNT(*) FROM posts GROUP BY ym;"
    },
    {
      "name": "posts date difference example",
      "category": "DQL/DateTime",
      "description": "Compute days difference to now.",
      "sql": "SELECT published_at, julianday('now') - julianday(published_at) AS days_ago FROM posts;"
    },
    {
      "name": "comments date bucket by month",
      "category": "DQL/DateTime",
      "description": "Group by month via strftime.",
      "sql": "SELECT strftime('%Y-%m', created_at) AS ym, COUNT(*) FROM comments GROUP BY ym;"
    },
    {
      "name": "comments date difference example",
      "category": "DQL/DateTime",
      "description": "Compute days difference to now.",
      "sql": "SELECT created_at, julianday('now') - julianday(created_at) AS days_ago FROM comments;"
    },
    {
      "name": "loans date bucket by month",
      "category": "DQL/DateTime",
      "description": "Group by month via strftime.",
      "sql": "SELECT strftime('%Y-%m', loaned_at) AS ym, COUNT(*) FROM loans GROUP BY ym;"
    },
    {
      "name": "loans date difference example",
      "category": "DQL/DateTime",
      "description": "Compute days difference to now.",
      "sql": "SELECT loaned_at, julianday('now') - julianday(loaned_at) AS days_ago FROM loans;"
    },
    {
      "name": "members date bucket by month",
      "category": "DQL/DateTime",
      "description": "Group by month via strftime.",
      "sql": "SELECT strftime('%Y-%m', joined_at) AS ym, COUNT(*) FROM members GROUP BY ym;"
    },
    {
      "name": "members date difference example",
      "category": "DQL/DateTime",
      "description": "Compute days difference to now.",
      "sql": "SELECT joined_at, julianday('now') - julianday(joined_at) AS days_ago FROM members;"
    },
    {
      "name": "readings date bucket by month",
      "category": "DQL/DateTime",
      "description": "Group by month via strftime.",
      "sql": "SELECT strftime('%Y-%m', measured_at) AS ym, COUNT(*) FROM readings GROUP BY ym;"
    },
    {
      "name": "readings date difference example",
      "category": "DQL/DateTime",
      "description": "Compute days difference to now.",
      "sql": "SELECT measured_at, julianday('now') - julianday(measured_at) AS days_ago FROM readings;"
    },
    {
      "name": "INSERT OR REPLACE into people",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO people(id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into people",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO people(id) VALUES(?);"
    },
    {
      "name": "UPDATE people with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE people SET id=id WHERE CASE WHEN (id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE people with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM people WHERE EXISTS (SELECT 1 FROM people t2 WHERE t2.id<id);"
    },
    {
      "name": "INSERT OR REPLACE into customers",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO customers(customer_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into customers",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO customers(customer_id) VALUES(?);"
    },
    {
      "name": "UPDATE customers with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE customers SET customer_id=customer_id WHERE CASE WHEN (customer_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE customers with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM customers WHERE EXISTS (SELECT 1 FROM customers t2 WHERE t2.customer_id<customer_id);"
    },
    {
      "name": "INSERT OR REPLACE into products",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO products(product_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into products",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO products(product_id) VALUES(?);"
    },
    {
      "name": "UPDATE products with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE products SET product_id=product_id WHERE CASE WHEN (product_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE products with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM products WHERE EXISTS (SELECT 1 FROM products t2 WHERE t2.product_id<product_id);"
    },
    {
      "name": "INSERT OR REPLACE into orders",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO orders(order_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into orders",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO orders(order_id) VALUES(?);"
    },
    {
      "name": "UPDATE orders with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE orders SET order_id=order_id WHERE CASE WHEN (order_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE orders with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM orders WHERE EXISTS (SELECT 1 FROM orders t2 WHERE t2.order_id<order_id);"
    },
    {
      "name": "INSERT OR REPLACE into order_items",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO order_items(rowid) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into order_items",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO order_items(rowid) VALUES(?);"
    },
    {
      "name": "UPDATE order_items with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE order_items SET rowid=rowid WHERE CASE WHEN (rowid%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE order_items with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM order_items WHERE EXISTS (SELECT 1 FROM order_items t2 WHERE t2.rowid<rowid);"
    },
    {
      "name": "INSERT OR REPLACE into employees",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO employees(emp_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into employees",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO employees(emp_id) VALUES(?);"
    },
    {
      "name": "UPDATE employees with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE employees SET emp_id=emp_id WHERE CASE WHEN (emp_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE employees with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM employees WHERE EXISTS (SELECT 1 FROM employees t2 WHERE t2.emp_id<emp_id);"
    },
    {
      "name": "INSERT OR REPLACE into departments",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO departments(dept_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into departments",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO departments(dept_id) VALUES(?);"
    },
    {
      "name": "UPDATE departments with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE departments SET dept_id=dept_id WHERE CASE WHEN (dept_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE departments with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM departments WHERE EXISTS (SELECT 1 FROM departments t2 WHERE t2.dept_id<dept_id);"
    },
    {
      "name": "INSERT OR REPLACE into posts",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO posts(post_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into posts",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO posts(post_id) VALUES(?);"
    },
    {
      "name": "UPDATE posts with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE posts SET post_id=post_id WHERE CASE WHEN (post_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE posts with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM posts WHERE EXISTS (SELECT 1 FROM posts t2 WHERE t2.post_id<post_id);"
    },
    {
      "name": "INSERT OR REPLACE into comments",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO comments(comment_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into comments",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO comments(comment_id) VALUES(?);"
    },
    {
      "name": "UPDATE comments with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE comments SET comment_id=comment_id WHERE CASE WHEN (comment_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE comments with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM comments WHERE EXISTS (SELECT 1 FROM comments t2 WHERE t2.comment_id<comment_id);"
    },
    {
      "name": "INSERT OR REPLACE into tags",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO tags(tag_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into tags",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO tags(tag_id) VALUES(?);"
    },
    {
      "name": "UPDATE tags with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE tags SET tag_id=tag_id WHERE CASE WHEN (tag_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE tags with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM tags WHERE EXISTS (SELECT 1 FROM tags t2 WHERE t2.tag_id<tag_id);"
    },
    {
      "name": "INSERT OR REPLACE into post_tags",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO post_tags(rowid) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into post_tags",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO post_tags(rowid) VALUES(?);"
    },
    {
      "name": "UPDATE post_tags with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE post_tags SET rowid=rowid WHERE CASE WHEN (rowid%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE post_tags with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM post_tags WHERE EXISTS (SELECT 1 FROM post_tags t2 WHERE t2.rowid<rowid);"
    },
    {
      "name": "INSERT OR REPLACE into books",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO books(book_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into books",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO books(book_id) VALUES(?);"
    },
    {
      "name": "UPDATE books with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE books SET book_id=book_id WHERE CASE WHEN (book_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE books with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM books WHERE EXISTS (SELECT 1 FROM books t2 WHERE t2.book_id<book_id);"
    },
    {
      "name": "INSERT OR REPLACE into authors",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO authors(author_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into authors",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO authors(author_id) VALUES(?);"
    },
    {
      "name": "UPDATE authors with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE authors SET author_id=author_id WHERE CASE WHEN (author_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE authors with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM authors WHERE EXISTS (SELECT 1 FROM authors t2 WHERE t2.author_id<author_id);"
    },
    {
      "name": "INSERT OR REPLACE into loans",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO loans(loan_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into loans",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO loans(loan_id) VALUES(?);"
    },
    {
      "name": "UPDATE loans with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE loans SET loan_id=loan_id WHERE CASE WHEN (loan_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE loans with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM loans WHERE EXISTS (SELECT 1 FROM loans t2 WHERE t2.loan_id<loan_id);"
    },
    {
      "name": "INSERT OR REPLACE into members",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO members(member_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into members",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO members(member_id) VALUES(?);"
    },
    {
      "name": "UPDATE members with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE members SET member_id=member_id WHERE CASE WHEN (member_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE members with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM members WHERE EXISTS (SELECT 1 FROM members t2 WHERE t2.member_id<member_id);"
    },
    {
      "name": "INSERT OR REPLACE into devices",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO devices(device_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into devices",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO devices(device_id) VALUES(?);"
    },
    {
      "name": "UPDATE devices with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE devices SET device_id=device_id WHERE CASE WHEN (device_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE devices with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM devices WHERE EXISTS (SELECT 1 FROM devices t2 WHERE t2.device_id<device_id);"
    },
    {
      "name": "INSERT OR REPLACE into sensors",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO sensors(sensor_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into sensors",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO sensors(sensor_id) VALUES(?);"
    },
    {
      "name": "UPDATE sensors with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE sensors SET sensor_id=sensor_id WHERE CASE WHEN (sensor_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE sensors with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM sensors WHERE EXISTS (SELECT 1 FROM sensors t2 WHERE t2.sensor_id<sensor_id);"
    },
    {
      "name": "INSERT OR REPLACE into readings",
      "category": "DML/Insert",
      "description": "Replace on conflict by pk.",
      "sql": "-- adjust columns accordingly\nINSERT OR REPLACE INTO readings(reading_id) VALUES(?);"
    },
    {
      "name": "INSERT OR IGNORE into readings",
      "category": "DML/Insert",
      "description": "Ignore on conflict.",
      "sql": "-- adjust columns accordingly\nINSERT OR IGNORE INTO readings(reading_id) VALUES(?);"
    },
    {
      "name": "UPDATE readings with CASE on pk parity",
      "category": "DML/Update",
      "description": "CASE expression inside UPDATE.",
      "sql": "UPDATE readings SET reading_id=reading_id WHERE CASE WHEN (reading_id%2)=0 THEN 1 ELSE 1 END=1;"
    },
    {
      "name": "DELETE readings with EXISTS self-filter",
      "category": "DML/Delete",
      "description": "EXISTS clause in DELETE.",
      "sql": "DELETE FROM readings WHERE EXISTS (SELECT 1 FROM readings t2 WHERE t2.reading_id<reading_id);"
    },
    {
      "name": "people ORDER BY id, name",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM people ORDER BY id, name;"
    },
    {
      "name": "people ORDER BY id DESC, name ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM people ORDER BY id DESC, name ASC;"
    },
    {
      "name": "customers ORDER BY customer_id, name",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM customers ORDER BY customer_id, name;"
    },
    {
      "name": "customers ORDER BY customer_id DESC, name ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM customers ORDER BY customer_id DESC, name ASC;"
    },
    {
      "name": "products ORDER BY product_id, name",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM products ORDER BY product_id, name;"
    },
    {
      "name": "products ORDER BY product_id DESC, name ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM products ORDER BY product_id DESC, name ASC;"
    },
    {
      "name": "order_items ORDER BY rowid, qty",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM order_items ORDER BY rowid, qty;"
    },
    {
      "name": "order_items ORDER BY rowid DESC, qty ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM order_items ORDER BY rowid DESC, qty ASC;"
    },
    {
      "name": "employees ORDER BY emp_id, first_name",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM employees ORDER BY emp_id, first_name;"
    },
    {
      "name": "employees ORDER BY emp_id DESC, first_name ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM employees ORDER BY emp_id DESC, first_name ASC;"
    },
    {
      "name": "departments ORDER BY dept_id, dept_name",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM departments ORDER BY dept_id, dept_name;"
    },
    {
      "name": "departments ORDER BY dept_id DESC, dept_name ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM departments ORDER BY dept_id DESC, dept_name ASC;"
    },
    {
      "name": "posts ORDER BY post_id, title",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM posts ORDER BY post_id, title;"
    },
    {
      "name": "posts ORDER BY post_id DESC, title ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM posts ORDER BY post_id DESC, title ASC;"
    },
    {
      "name": "comments ORDER BY comment_id, author",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM comments ORDER BY comment_id, author;"
    },
    {
      "name": "comments ORDER BY comment_id DESC, author ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM comments ORDER BY comment_id DESC, author ASC;"
    },
    {
      "name": "tags ORDER BY tag_id, name",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM tags ORDER BY tag_id, name;"
    },
    {
      "name": "tags ORDER BY tag_id DESC, name ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM tags ORDER BY tag_id DESC, name ASC;"
    },
    {
      "name": "books ORDER BY book_id, title",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM books ORDER BY book_id, title;"
    },
    {
      "name": "books ORDER BY book_id DESC, title ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM books ORDER BY book_id DESC, title ASC;"
    },
    {
      "name": "authors ORDER BY author_id, name",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM authors ORDER BY author_id, name;"
    },
    {
      "name": "authors ORDER BY author_id DESC, name ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM authors ORDER BY author_id DESC, name ASC;"
    },
    {
      "name": "members ORDER BY member_id, name",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM members ORDER BY member_id, name;"
    },
    {
      "name": "members ORDER BY member_id DESC, name ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM members ORDER BY member_id DESC, name ASC;"
    },
    {
      "name": "devices ORDER BY device_id, name",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM devices ORDER BY device_id, name;"
    },
    {
      "name": "devices ORDER BY device_id DESC, name ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM devices ORDER BY device_id DESC, name ASC;"
    },
    {
      "name": "sensors ORDER BY sensor_id, kind",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id, kind;"
    },
    {
      "name": "sensors ORDER BY sensor_id DESC, kind ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM sensors ORDER BY sensor_id DESC, kind ASC;"
    },
    {
      "name": "readings ORDER BY reading_id, value",
      "category": "DQL/Select/Ordering",
      "description": "Multi-column ordering.",
      "sql": "SELECT * FROM readings ORDER BY reading_id, value;"
    },
    {
      "name": "readings ORDER BY reading_id DESC, value ASC",
      "category": "DQL/Select/Ordering",
      "description": "Mixed orders.",
      "sql": "SELECT * FROM readings ORDER BY reading_id DESC, value ASC;"
    },
    {
      "name": "customers with NO orders using NOT IN",
      "category": "DQL/Subqueries/NOT IN",
      "description": "Beware NULL semantics.",
      "sql": "SELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);"
    },
    {
      "name": "customers with NO orders using NOT EXISTS",
      "category": "DQL/Subqueries/NOT EXISTS",
      "description": "Preferred pattern.",
      "sql": "SELECT * FROM customers x WHERE NOT EXISTS (SELECT 1 FROM orders y WHERE y.customer_id=x.customer_id);"
    },
    {
      "name": "members with NO loans using NOT IN",
      "category": "DQL/Subqueries/NOT IN",
      "description": "Beware NULL semantics.",
      "sql": "SELECT * FROM members WHERE member_id NOT IN (SELECT member_id FROM loans);"
    },
    {
      "name": "members with NO loans using NOT EXISTS",
      "category": "DQL/Subqueries/NOT EXISTS",
      "description": "Preferred pattern.",
      "sql": "SELECT * FROM members x WHERE NOT EXISTS (SELECT 1 FROM loans y WHERE y.member_id=x.member_id);"
    },
    {
      "name": "authors with NO books using NOT IN",
      "category": "DQL/Subqueries/NOT IN",
      "description": "Beware NULL semantics.",
      "sql": "SELECT * FROM authors WHERE author_id NOT IN (SELECT author_id FROM books);"
    },
    {
      "name": "authors with NO books using NOT EXISTS",
      "category": "DQL/Subqueries/NOT EXISTS",
      "description": "Preferred pattern.",
      "sql": "SELECT * FROM authors x WHERE NOT EXISTS (SELECT 1 FROM books y WHERE y.author_id=x.author_id);"
    },
    {
      "name": "posts with NO comments using NOT IN",
      "category": "DQL/Subqueries/NOT IN",
      "description": "Beware NULL semantics.",
      "sql": "SELECT * FROM posts WHERE post_id NOT IN (SELECT post_id FROM comments);"
    },
    {
      "name": "posts with NO comments using NOT EXISTS",
      "category": "DQL/Subqueries/NOT EXISTS",
      "description": "Preferred pattern.",
      "sql": "SELECT * FROM posts x WHERE NOT EXISTS (SELECT 1 FROM comments y WHERE y.post_id=x.post_id);"
    },
    {
      "name": "Create TEMP table from people",
      "category": "DDL/Temp",
      "description": "Temporary table from a query.",
      "sql": "CREATE TEMP TABLE tmp_people AS SELECT * FROM people LIMIT 100;"
    },
    {
      "name": "Drop TEMP table tmp_people",
      "category": "DDL/Temp",
      "description": "Drop temp table.",
      "sql": "DROP TABLE IF EXISTS tmp_people;"
    },
    {
      "name": "Create TEMP table from orders",
      "category": "DDL/Temp",
      "description": "Temporary table from a query.",
      "sql": "CREATE TEMP TABLE tmp_orders AS SELECT * FROM orders LIMIT 100;"
    },
    {
      "name": "Drop TEMP table tmp_orders",
      "category": "DDL/Temp",
      "description": "Drop temp table.",
      "sql": "DROP TABLE IF EXISTS tmp_orders;"
    },
    {
      "name": "Create TEMP table from products",
      "category": "DDL/Temp",
      "description": "Temporary table from a query.",
      "sql": "CREATE TEMP TABLE tmp_products AS SELECT * FROM products LIMIT 100;"
    },
    {
      "name": "Drop TEMP table tmp_products",
      "category": "DDL/Temp",
      "description": "Drop temp table.",
      "sql": "DROP TABLE IF EXISTS tmp_products;"
    },
    {
      "name": "EXPLAIN join orders↔customers",
      "category": "Meta/Explain",
      "description": "Explain two-table join.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM orders JOIN customers ON orders.customer_id=customers.customer_id;"
    },
    {
      "name": "EXPLAIN join order_items↔products",
      "category": "Meta/Explain",
      "description": "Explain two-table join.",
      "sql": "EXPLAIN QUERY PLAN SELECT * FROM order_items JOIN products ON order_items.product_id=products.product_id;"
    },
    {
      "name": "people page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 5 OFFSET 0;"
    },
    {
      "name": "people page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 5 OFFSET 5;"
    },
    {
      "name": "people page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 5 OFFSET 10;"
    },
    {
      "name": "people page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 5 OFFSET 50;"
    },
    {
      "name": "people page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 10 OFFSET 0;"
    },
    {
      "name": "people page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 10 OFFSET 5;"
    },
    {
      "name": "people page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 10 OFFSET 10;"
    },
    {
      "name": "people page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 10 OFFSET 50;"
    },
    {
      "name": "people page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 25 OFFSET 0;"
    },
    {
      "name": "people page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 25 OFFSET 5;"
    },
    {
      "name": "people page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 25 OFFSET 10;"
    },
    {
      "name": "people page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 25 OFFSET 50;"
    },
    {
      "name": "people page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 50 OFFSET 0;"
    },
    {
      "name": "people page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 50 OFFSET 5;"
    },
    {
      "name": "people page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 50 OFFSET 10;"
    },
    {
      "name": "people page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 50 OFFSET 50;"
    },
    {
      "name": "people page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 100 OFFSET 0;"
    },
    {
      "name": "people page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 100 OFFSET 5;"
    },
    {
      "name": "people page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 100 OFFSET 10;"
    },
    {
      "name": "people page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM people LIMIT 100 OFFSET 50;"
    },
    {
      "name": "customers page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 5 OFFSET 0;"
    },
    {
      "name": "customers page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 5 OFFSET 5;"
    },
    {
      "name": "customers page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 5 OFFSET 10;"
    },
    {
      "name": "customers page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 5 OFFSET 50;"
    },
    {
      "name": "customers page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 10 OFFSET 0;"
    },
    {
      "name": "customers page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 10 OFFSET 5;"
    },
    {
      "name": "customers page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 10 OFFSET 10;"
    },
    {
      "name": "customers page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 10 OFFSET 50;"
    },
    {
      "name": "customers page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 25 OFFSET 0;"
    },
    {
      "name": "customers page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 25 OFFSET 5;"
    },
    {
      "name": "customers page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 25 OFFSET 10;"
    },
    {
      "name": "customers page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 25 OFFSET 50;"
    },
    {
      "name": "customers page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 50 OFFSET 0;"
    },
    {
      "name": "customers page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 50 OFFSET 5;"
    },
    {
      "name": "customers page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 50 OFFSET 10;"
    },
    {
      "name": "customers page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 50 OFFSET 50;"
    },
    {
      "name": "customers page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 100 OFFSET 0;"
    },
    {
      "name": "customers page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 100 OFFSET 5;"
    },
    {
      "name": "customers page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 100 OFFSET 10;"
    },
    {
      "name": "customers page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM customers LIMIT 100 OFFSET 50;"
    },
    {
      "name": "products page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 5 OFFSET 0;"
    },
    {
      "name": "products page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 5 OFFSET 5;"
    },
    {
      "name": "products page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 5 OFFSET 10;"
    },
    {
      "name": "products page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 5 OFFSET 50;"
    },
    {
      "name": "products page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 10 OFFSET 0;"
    },
    {
      "name": "products page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 10 OFFSET 5;"
    },
    {
      "name": "products page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 10 OFFSET 10;"
    },
    {
      "name": "products page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 10 OFFSET 50;"
    },
    {
      "name": "products page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 25 OFFSET 0;"
    },
    {
      "name": "products page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 25 OFFSET 5;"
    },
    {
      "name": "products page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 25 OFFSET 10;"
    },
    {
      "name": "products page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 25 OFFSET 50;"
    },
    {
      "name": "products page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 50 OFFSET 0;"
    },
    {
      "name": "products page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 50 OFFSET 5;"
    },
    {
      "name": "products page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 50 OFFSET 10;"
    },
    {
      "name": "products page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 50 OFFSET 50;"
    },
    {
      "name": "products page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 100 OFFSET 0;"
    },
    {
      "name": "products page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 100 OFFSET 5;"
    },
    {
      "name": "products page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 100 OFFSET 10;"
    },
    {
      "name": "products page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM products LIMIT 100 OFFSET 50;"
    },
    {
      "name": "orders page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 5 OFFSET 0;"
    },
    {
      "name": "orders page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 5 OFFSET 5;"
    },
    {
      "name": "orders page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 5 OFFSET 10;"
    },
    {
      "name": "orders page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 5 OFFSET 50;"
    },
    {
      "name": "orders page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 10 OFFSET 0;"
    },
    {
      "name": "orders page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 10 OFFSET 5;"
    },
    {
      "name": "orders page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 10 OFFSET 10;"
    },
    {
      "name": "orders page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 10 OFFSET 50;"
    },
    {
      "name": "orders page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 25 OFFSET 0;"
    },
    {
      "name": "orders page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 25 OFFSET 5;"
    },
    {
      "name": "orders page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 25 OFFSET 10;"
    },
    {
      "name": "orders page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 25 OFFSET 50;"
    },
    {
      "name": "orders page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 50 OFFSET 0;"
    },
    {
      "name": "orders page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 50 OFFSET 5;"
    },
    {
      "name": "orders page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 50 OFFSET 10;"
    },
    {
      "name": "orders page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 50 OFFSET 50;"
    },
    {
      "name": "orders page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 100 OFFSET 0;"
    },
    {
      "name": "orders page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 100 OFFSET 5;"
    },
    {
      "name": "orders page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 100 OFFSET 10;"
    },
    {
      "name": "orders page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM orders LIMIT 100 OFFSET 50;"
    },
    {
      "name": "order_items page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 5 OFFSET 0;"
    },
    {
      "name": "order_items page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 5 OFFSET 5;"
    },
    {
      "name": "order_items page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 5 OFFSET 10;"
    },
    {
      "name": "order_items page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 5 OFFSET 50;"
    },
    {
      "name": "order_items page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 10 OFFSET 0;"
    },
    {
      "name": "order_items page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 10 OFFSET 5;"
    },
    {
      "name": "order_items page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 10 OFFSET 10;"
    },
    {
      "name": "order_items page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 10 OFFSET 50;"
    },
    {
      "name": "order_items page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 25 OFFSET 0;"
    },
    {
      "name": "order_items page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 25 OFFSET 5;"
    },
    {
      "name": "order_items page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 25 OFFSET 10;"
    },
    {
      "name": "order_items page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 25 OFFSET 50;"
    },
    {
      "name": "order_items page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 50 OFFSET 0;"
    },
    {
      "name": "order_items page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 50 OFFSET 5;"
    },
    {
      "name": "order_items page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 50 OFFSET 10;"
    },
    {
      "name": "order_items page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 50 OFFSET 50;"
    },
    {
      "name": "order_items page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 100 OFFSET 0;"
    },
    {
      "name": "order_items page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 100 OFFSET 5;"
    },
    {
      "name": "order_items page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 100 OFFSET 10;"
    },
    {
      "name": "order_items page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM order_items LIMIT 100 OFFSET 50;"
    },
    {
      "name": "employees page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 5 OFFSET 0;"
    },
    {
      "name": "employees page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 5 OFFSET 5;"
    },
    {
      "name": "employees page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 5 OFFSET 10;"
    },
    {
      "name": "employees page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 5 OFFSET 50;"
    },
    {
      "name": "employees page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 10 OFFSET 0;"
    },
    {
      "name": "employees page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 10 OFFSET 5;"
    },
    {
      "name": "employees page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 10 OFFSET 10;"
    },
    {
      "name": "employees page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 10 OFFSET 50;"
    },
    {
      "name": "employees page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 25 OFFSET 0;"
    },
    {
      "name": "employees page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 25 OFFSET 5;"
    },
    {
      "name": "employees page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 25 OFFSET 10;"
    },
    {
      "name": "employees page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 25 OFFSET 50;"
    },
    {
      "name": "employees page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 50 OFFSET 0;"
    },
    {
      "name": "employees page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 50 OFFSET 5;"
    },
    {
      "name": "employees page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 50 OFFSET 10;"
    },
    {
      "name": "employees page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 50 OFFSET 50;"
    },
    {
      "name": "employees page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 100 OFFSET 0;"
    },
    {
      "name": "employees page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 100 OFFSET 5;"
    },
    {
      "name": "employees page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 100 OFFSET 10;"
    },
    {
      "name": "employees page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM employees LIMIT 100 OFFSET 50;"
    },
    {
      "name": "departments page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 5 OFFSET 0;"
    },
    {
      "name": "departments page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 5 OFFSET 5;"
    },
    {
      "name": "departments page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 5 OFFSET 10;"
    },
    {
      "name": "departments page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 5 OFFSET 50;"
    },
    {
      "name": "departments page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 10 OFFSET 0;"
    },
    {
      "name": "departments page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 10 OFFSET 5;"
    },
    {
      "name": "departments page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 10 OFFSET 10;"
    },
    {
      "name": "departments page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 10 OFFSET 50;"
    },
    {
      "name": "departments page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 25 OFFSET 0;"
    },
    {
      "name": "departments page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 25 OFFSET 5;"
    },
    {
      "name": "departments page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 25 OFFSET 10;"
    },
    {
      "name": "departments page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 25 OFFSET 50;"
    },
    {
      "name": "departments page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 50 OFFSET 0;"
    },
    {
      "name": "departments page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 50 OFFSET 5;"
    },
    {
      "name": "departments page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 50 OFFSET 10;"
    },
    {
      "name": "departments page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 50 OFFSET 50;"
    },
    {
      "name": "departments page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 100 OFFSET 0;"
    },
    {
      "name": "departments page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 100 OFFSET 5;"
    },
    {
      "name": "departments page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 100 OFFSET 10;"
    },
    {
      "name": "departments page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM departments LIMIT 100 OFFSET 50;"
    },
    {
      "name": "posts page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 5 OFFSET 0;"
    },
    {
      "name": "posts page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 5 OFFSET 5;"
    },
    {
      "name": "posts page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 5 OFFSET 10;"
    },
    {
      "name": "posts page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 5 OFFSET 50;"
    },
    {
      "name": "posts page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 10 OFFSET 0;"
    },
    {
      "name": "posts page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 10 OFFSET 5;"
    },
    {
      "name": "posts page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 10 OFFSET 10;"
    },
    {
      "name": "posts page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 10 OFFSET 50;"
    },
    {
      "name": "posts page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 25 OFFSET 0;"
    },
    {
      "name": "posts page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 25 OFFSET 5;"
    },
    {
      "name": "posts page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 25 OFFSET 10;"
    },
    {
      "name": "posts page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 25 OFFSET 50;"
    },
    {
      "name": "posts page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 50 OFFSET 0;"
    },
    {
      "name": "posts page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 50 OFFSET 5;"
    },
    {
      "name": "posts page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 50 OFFSET 10;"
    },
    {
      "name": "posts page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 50 OFFSET 50;"
    },
    {
      "name": "posts page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 100 OFFSET 0;"
    },
    {
      "name": "posts page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 100 OFFSET 5;"
    },
    {
      "name": "posts page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 100 OFFSET 10;"
    },
    {
      "name": "posts page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM posts LIMIT 100 OFFSET 50;"
    },
    {
      "name": "comments page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 5 OFFSET 0;"
    },
    {
      "name": "comments page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 5 OFFSET 5;"
    },
    {
      "name": "comments page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 5 OFFSET 10;"
    },
    {
      "name": "comments page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 5 OFFSET 50;"
    },
    {
      "name": "comments page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 10 OFFSET 0;"
    },
    {
      "name": "comments page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 10 OFFSET 5;"
    },
    {
      "name": "comments page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 10 OFFSET 10;"
    },
    {
      "name": "comments page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 10 OFFSET 50;"
    },
    {
      "name": "comments page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 25 OFFSET 0;"
    },
    {
      "name": "comments page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 25 OFFSET 5;"
    },
    {
      "name": "comments page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 25 OFFSET 10;"
    },
    {
      "name": "comments page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 25 OFFSET 50;"
    },
    {
      "name": "comments page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 50 OFFSET 0;"
    },
    {
      "name": "comments page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 50 OFFSET 5;"
    },
    {
      "name": "comments page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 50 OFFSET 10;"
    },
    {
      "name": "comments page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 50 OFFSET 50;"
    },
    {
      "name": "comments page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 100 OFFSET 0;"
    },
    {
      "name": "comments page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 100 OFFSET 5;"
    },
    {
      "name": "comments page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 100 OFFSET 10;"
    },
    {
      "name": "comments page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM comments LIMIT 100 OFFSET 50;"
    },
    {
      "name": "tags page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 5 OFFSET 0;"
    },
    {
      "name": "tags page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 5 OFFSET 5;"
    },
    {
      "name": "tags page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 5 OFFSET 10;"
    },
    {
      "name": "tags page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 5 OFFSET 50;"
    },
    {
      "name": "tags page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 10 OFFSET 0;"
    },
    {
      "name": "tags page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 10 OFFSET 5;"
    },
    {
      "name": "tags page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 10 OFFSET 10;"
    },
    {
      "name": "tags page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 10 OFFSET 50;"
    },
    {
      "name": "tags page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 25 OFFSET 0;"
    },
    {
      "name": "tags page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 25 OFFSET 5;"
    },
    {
      "name": "tags page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 25 OFFSET 10;"
    },
    {
      "name": "tags page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 25 OFFSET 50;"
    },
    {
      "name": "tags page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 50 OFFSET 0;"
    },
    {
      "name": "tags page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 50 OFFSET 5;"
    },
    {
      "name": "tags page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 50 OFFSET 10;"
    },
    {
      "name": "tags page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 50 OFFSET 50;"
    },
    {
      "name": "tags page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 100 OFFSET 0;"
    },
    {
      "name": "tags page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 100 OFFSET 5;"
    },
    {
      "name": "tags page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 100 OFFSET 10;"
    },
    {
      "name": "tags page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM tags LIMIT 100 OFFSET 50;"
    },
    {
      "name": "post_tags page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 5 OFFSET 0;"
    },
    {
      "name": "post_tags page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 5 OFFSET 5;"
    },
    {
      "name": "post_tags page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 5 OFFSET 10;"
    },
    {
      "name": "post_tags page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 5 OFFSET 50;"
    },
    {
      "name": "post_tags page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 10 OFFSET 0;"
    },
    {
      "name": "post_tags page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 10 OFFSET 5;"
    },
    {
      "name": "post_tags page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 10 OFFSET 10;"
    },
    {
      "name": "post_tags page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 10 OFFSET 50;"
    },
    {
      "name": "post_tags page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 25 OFFSET 0;"
    },
    {
      "name": "post_tags page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 25 OFFSET 5;"
    },
    {
      "name": "post_tags page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 25 OFFSET 10;"
    },
    {
      "name": "post_tags page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 25 OFFSET 50;"
    },
    {
      "name": "post_tags page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 50 OFFSET 0;"
    },
    {
      "name": "post_tags page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 50 OFFSET 5;"
    },
    {
      "name": "post_tags page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 50 OFFSET 10;"
    },
    {
      "name": "post_tags page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 50 OFFSET 50;"
    },
    {
      "name": "post_tags page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 100 OFFSET 0;"
    },
    {
      "name": "post_tags page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 100 OFFSET 5;"
    },
    {
      "name": "post_tags page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 100 OFFSET 10;"
    },
    {
      "name": "post_tags page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM post_tags LIMIT 100 OFFSET 50;"
    },
    {
      "name": "books page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 5 OFFSET 0;"
    },
    {
      "name": "books page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 5 OFFSET 5;"
    },
    {
      "name": "books page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 5 OFFSET 10;"
    },
    {
      "name": "books page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 5 OFFSET 50;"
    },
    {
      "name": "books page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 10 OFFSET 0;"
    },
    {
      "name": "books page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 10 OFFSET 5;"
    },
    {
      "name": "books page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 10 OFFSET 10;"
    },
    {
      "name": "books page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 10 OFFSET 50;"
    },
    {
      "name": "books page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 25 OFFSET 0;"
    },
    {
      "name": "books page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 25 OFFSET 5;"
    },
    {
      "name": "books page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 25 OFFSET 10;"
    },
    {
      "name": "books page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 25 OFFSET 50;"
    },
    {
      "name": "books page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 50 OFFSET 0;"
    },
    {
      "name": "books page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 50 OFFSET 5;"
    },
    {
      "name": "books page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 50 OFFSET 10;"
    },
    {
      "name": "books page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 50 OFFSET 50;"
    },
    {
      "name": "books page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 100 OFFSET 0;"
    },
    {
      "name": "books page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 100 OFFSET 5;"
    },
    {
      "name": "books page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 100 OFFSET 10;"
    },
    {
      "name": "books page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM books LIMIT 100 OFFSET 50;"
    },
    {
      "name": "authors page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 5 OFFSET 0;"
    },
    {
      "name": "authors page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 5 OFFSET 5;"
    },
    {
      "name": "authors page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 5 OFFSET 10;"
    },
    {
      "name": "authors page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 5 OFFSET 50;"
    },
    {
      "name": "authors page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 10 OFFSET 0;"
    },
    {
      "name": "authors page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 10 OFFSET 5;"
    },
    {
      "name": "authors page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 10 OFFSET 10;"
    },
    {
      "name": "authors page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 10 OFFSET 50;"
    },
    {
      "name": "authors page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 25 OFFSET 0;"
    },
    {
      "name": "authors page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 25 OFFSET 5;"
    },
    {
      "name": "authors page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 25 OFFSET 10;"
    },
    {
      "name": "authors page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 25 OFFSET 50;"
    },
    {
      "name": "authors page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 50 OFFSET 0;"
    },
    {
      "name": "authors page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 50 OFFSET 5;"
    },
    {
      "name": "authors page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 50 OFFSET 10;"
    },
    {
      "name": "authors page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 50 OFFSET 50;"
    },
    {
      "name": "authors page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 100 OFFSET 0;"
    },
    {
      "name": "authors page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 100 OFFSET 5;"
    },
    {
      "name": "authors page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 100 OFFSET 10;"
    },
    {
      "name": "authors page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM authors LIMIT 100 OFFSET 50;"
    },
    {
      "name": "loans page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 5 OFFSET 0;"
    },
    {
      "name": "loans page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 5 OFFSET 5;"
    },
    {
      "name": "loans page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 5 OFFSET 10;"
    },
    {
      "name": "loans page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 5 OFFSET 50;"
    },
    {
      "name": "loans page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 10 OFFSET 0;"
    },
    {
      "name": "loans page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 10 OFFSET 5;"
    },
    {
      "name": "loans page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 10 OFFSET 10;"
    },
    {
      "name": "loans page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 10 OFFSET 50;"
    },
    {
      "name": "loans page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 25 OFFSET 0;"
    },
    {
      "name": "loans page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 25 OFFSET 5;"
    },
    {
      "name": "loans page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 25 OFFSET 10;"
    },
    {
      "name": "loans page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 25 OFFSET 50;"
    },
    {
      "name": "loans page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 50 OFFSET 0;"
    },
    {
      "name": "loans page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 50 OFFSET 5;"
    },
    {
      "name": "loans page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 50 OFFSET 10;"
    },
    {
      "name": "loans page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 50 OFFSET 50;"
    },
    {
      "name": "loans page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 100 OFFSET 0;"
    },
    {
      "name": "loans page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 100 OFFSET 5;"
    },
    {
      "name": "loans page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 100 OFFSET 10;"
    },
    {
      "name": "loans page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM loans LIMIT 100 OFFSET 50;"
    },
    {
      "name": "members page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 5 OFFSET 0;"
    },
    {
      "name": "members page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 5 OFFSET 5;"
    },
    {
      "name": "members page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 5 OFFSET 10;"
    },
    {
      "name": "members page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 5 OFFSET 50;"
    },
    {
      "name": "members page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 10 OFFSET 0;"
    },
    {
      "name": "members page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 10 OFFSET 5;"
    },
    {
      "name": "members page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 10 OFFSET 10;"
    },
    {
      "name": "members page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 10 OFFSET 50;"
    },
    {
      "name": "members page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 25 OFFSET 0;"
    },
    {
      "name": "members page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 25 OFFSET 5;"
    },
    {
      "name": "members page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 25 OFFSET 10;"
    },
    {
      "name": "members page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 25 OFFSET 50;"
    },
    {
      "name": "members page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 50 OFFSET 0;"
    },
    {
      "name": "members page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 50 OFFSET 5;"
    },
    {
      "name": "members page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 50 OFFSET 10;"
    },
    {
      "name": "members page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 50 OFFSET 50;"
    },
    {
      "name": "members page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 100 OFFSET 0;"
    },
    {
      "name": "members page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 100 OFFSET 5;"
    },
    {
      "name": "members page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 100 OFFSET 10;"
    },
    {
      "name": "members page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM members LIMIT 100 OFFSET 50;"
    },
    {
      "name": "devices page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 5 OFFSET 0;"
    },
    {
      "name": "devices page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 5 OFFSET 5;"
    },
    {
      "name": "devices page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 5 OFFSET 10;"
    },
    {
      "name": "devices page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 5 OFFSET 50;"
    },
    {
      "name": "devices page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 10 OFFSET 0;"
    },
    {
      "name": "devices page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 10 OFFSET 5;"
    },
    {
      "name": "devices page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 10 OFFSET 10;"
    },
    {
      "name": "devices page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 10 OFFSET 50;"
    },
    {
      "name": "devices page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 25 OFFSET 0;"
    },
    {
      "name": "devices page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 25 OFFSET 5;"
    },
    {
      "name": "devices page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 25 OFFSET 10;"
    },
    {
      "name": "devices page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 25 OFFSET 50;"
    },
    {
      "name": "devices page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 50 OFFSET 0;"
    },
    {
      "name": "devices page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 50 OFFSET 5;"
    },
    {
      "name": "devices page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 50 OFFSET 10;"
    },
    {
      "name": "devices page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 50 OFFSET 50;"
    },
    {
      "name": "devices page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 100 OFFSET 0;"
    },
    {
      "name": "devices page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 100 OFFSET 5;"
    },
    {
      "name": "devices page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 100 OFFSET 10;"
    },
    {
      "name": "devices page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM devices LIMIT 100 OFFSET 50;"
    },
    {
      "name": "sensors page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 5 OFFSET 0;"
    },
    {
      "name": "sensors page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 5 OFFSET 5;"
    },
    {
      "name": "sensors page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 5 OFFSET 10;"
    },
    {
      "name": "sensors page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 5 OFFSET 50;"
    },
    {
      "name": "sensors page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 10 OFFSET 0;"
    },
    {
      "name": "sensors page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 10 OFFSET 5;"
    },
    {
      "name": "sensors page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 10 OFFSET 10;"
    },
    {
      "name": "sensors page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 10 OFFSET 50;"
    },
    {
      "name": "sensors page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 25 OFFSET 0;"
    },
    {
      "name": "sensors page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 25 OFFSET 5;"
    },
    {
      "name": "sensors page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 25 OFFSET 10;"
    },
    {
      "name": "sensors page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 25 OFFSET 50;"
    },
    {
      "name": "sensors page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 50 OFFSET 0;"
    },
    {
      "name": "sensors page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 50 OFFSET 5;"
    },
    {
      "name": "sensors page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 50 OFFSET 10;"
    },
    {
      "name": "sensors page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 50 OFFSET 50;"
    },
    {
      "name": "sensors page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 100 OFFSET 0;"
    },
    {
      "name": "sensors page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 100 OFFSET 5;"
    },
    {
      "name": "sensors page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 100 OFFSET 10;"
    },
    {
      "name": "sensors page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM sensors LIMIT 100 OFFSET 50;"
    },
    {
      "name": "readings page lim5 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 5 OFFSET 0;"
    },
    {
      "name": "readings page lim5 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 5 OFFSET 5;"
    },
    {
      "name": "readings page lim5 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 5 OFFSET 10;"
    },
    {
      "name": "readings page lim5 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 5 OFFSET 50;"
    },
    {
      "name": "readings page lim10 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 10 OFFSET 0;"
    },
    {
      "name": "readings page lim10 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 10 OFFSET 5;"
    },
    {
      "name": "readings page lim10 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 10 OFFSET 10;"
    },
    {
      "name": "readings page lim10 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 10 OFFSET 50;"
    },
    {
      "name": "readings page lim25 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 25 OFFSET 0;"
    },
    {
      "name": "readings page lim25 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 25 OFFSET 5;"
    },
    {
      "name": "readings page lim25 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 25 OFFSET 10;"
    },
    {
      "name": "readings page lim25 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 25 OFFSET 50;"
    },
    {
      "name": "readings page lim50 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 50 OFFSET 0;"
    },
    {
      "name": "readings page lim50 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 50 OFFSET 5;"
    },
    {
      "name": "readings page lim50 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 50 OFFSET 10;"
    },
    {
      "name": "readings page lim50 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 50 OFFSET 50;"
    },
    {
      "name": "readings page lim100 off0",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 100 OFFSET 0;"
    },
    {
      "name": "readings page lim100 off5",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 100 OFFSET 5;"
    },
    {
      "name": "readings page lim100 off10",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 100 OFFSET 10;"
    },
    {
      "name": "readings page lim100 off50",
      "category": "DQL/Select/Paging",
      "description": "Swept paging combos.",
      "sql": "SELECT * FROM readings LIMIT 100 OFFSET 50;"
    }
  ],
  "db_templates": [
    {
      "name": "Demo/Shop Template #001",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #1. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 1','alice1@example.com',date('now')),\n('Bob 1','bob1@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 1',49.9,'Peripherals'),\n('Mouse 1',25.0,'Peripherals'),\n('Monitor 1',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #002",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #2. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #003",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #3. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 3','alice3@example.com',date('now')),\n('Bob 3','bob3@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 3',49.9,'Peripherals'),\n('Mouse 3',25.0,'Peripherals'),\n('Monitor 3',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #004",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #4. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #005",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #5. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 5','alice5@example.com',date('now')),\n('Bob 5','bob5@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 5',49.9,'Peripherals'),\n('Mouse 5',25.0,'Peripherals'),\n('Monitor 5',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #006",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #6. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #007",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #7. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 7','alice7@example.com',date('now')),\n('Bob 7','bob7@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 7',49.9,'Peripherals'),\n('Mouse 7',25.0,'Peripherals'),\n('Monitor 7',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #008",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #8. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #009",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #9. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 9','alice9@example.com',date('now')),\n('Bob 9','bob9@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 9',49.9,'Peripherals'),\n('Mouse 9',25.0,'Peripherals'),\n('Monitor 9',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #010",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #10. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #011",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #11. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 11','alice11@example.com',date('now')),\n('Bob 11','bob11@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 11',49.9,'Peripherals'),\n('Mouse 11',25.0,'Peripherals'),\n('Monitor 11',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #012",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #12. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #013",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #13. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 13','alice13@example.com',date('now')),\n('Bob 13','bob13@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 13',49.9,'Peripherals'),\n('Mouse 13',25.0,'Peripherals'),\n('Monitor 13',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #014",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #14. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #015",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #15. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 15','alice15@example.com',date('now')),\n('Bob 15','bob15@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 15',49.9,'Peripherals'),\n('Mouse 15',25.0,'Peripherals'),\n('Monitor 15',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #016",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #16. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #017",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #17. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 17','alice17@example.com',date('now')),\n('Bob 17','bob17@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 17',49.9,'Peripherals'),\n('Mouse 17',25.0,'Peripherals'),\n('Monitor 17',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #018",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #18. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #019",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #19. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 19','alice19@example.com',date('now')),\n('Bob 19','bob19@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 19',49.9,'Peripherals'),\n('Mouse 19',25.0,'Peripherals'),\n('Monitor 19',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #020",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #20. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #021",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #21. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 21','alice21@example.com',date('now')),\n('Bob 21','bob21@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 21',49.9,'Peripherals'),\n('Mouse 21',25.0,'Peripherals'),\n('Monitor 21',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #022",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #22. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #023",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #23. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 23','alice23@example.com',date('now')),\n('Bob 23','bob23@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 23',49.9,'Peripherals'),\n('Mouse 23',25.0,'Peripherals'),\n('Monitor 23',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #024",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #24. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #025",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #25. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 25','alice25@example.com',date('now')),\n('Bob 25','bob25@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 25',49.9,'Peripherals'),\n('Mouse 25',25.0,'Peripherals'),\n('Monitor 25',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #026",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #26. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #027",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #27. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 27','alice27@example.com',date('now')),\n('Bob 27','bob27@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 27',49.9,'Peripherals'),\n('Mouse 27',25.0,'Peripherals'),\n('Monitor 27',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #028",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #28. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #029",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #29. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 29','alice29@example.com',date('now')),\n('Bob 29','bob29@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 29',49.9,'Peripherals'),\n('Mouse 29',25.0,'Peripherals'),\n('Monitor 29',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #030",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #30. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #031",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #31. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 31','alice31@example.com',date('now')),\n('Bob 31','bob31@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 31',49.9,'Peripherals'),\n('Mouse 31',25.0,'Peripherals'),\n('Monitor 31',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #032",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #32. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #033",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #33. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 33','alice33@example.com',date('now')),\n('Bob 33','bob33@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 33',49.9,'Peripherals'),\n('Mouse 33',25.0,'Peripherals'),\n('Monitor 33',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #034",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #34. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #035",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #35. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 35','alice35@example.com',date('now')),\n('Bob 35','bob35@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 35',49.9,'Peripherals'),\n('Mouse 35',25.0,'Peripherals'),\n('Monitor 35',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #036",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #36. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #037",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #37. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 37','alice37@example.com',date('now')),\n('Bob 37','bob37@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 37',49.9,'Peripherals'),\n('Mouse 37',25.0,'Peripherals'),\n('Monitor 37',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #038",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #38. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #039",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #39. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 39','alice39@example.com',date('now')),\n('Bob 39','bob39@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 39',49.9,'Peripherals'),\n('Mouse 39',25.0,'Peripherals'),\n('Monitor 39',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #040",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #40. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #041",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #41. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 41','alice41@example.com',date('now')),\n('Bob 41','bob41@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 41',49.9,'Peripherals'),\n('Mouse 41',25.0,'Peripherals'),\n('Monitor 41',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #042",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #42. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #043",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #43. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 43','alice43@example.com',date('now')),\n('Bob 43','bob43@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 43',49.9,'Peripherals'),\n('Mouse 43',25.0,'Peripherals'),\n('Monitor 43',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #044",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #44. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #045",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #45. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 45','alice45@example.com',date('now')),\n('Bob 45','bob45@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 45',49.9,'Peripherals'),\n('Mouse 45',25.0,'Peripherals'),\n('Monitor 45',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #046",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #46. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #047",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #47. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 47','alice47@example.com',date('now')),\n('Bob 47','bob47@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 47',49.9,'Peripherals'),\n('Mouse 47',25.0,'Peripherals'),\n('Monitor 47',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #048",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #48. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #049",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #49. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 49','alice49@example.com',date('now')),\n('Bob 49','bob49@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 49',49.9,'Peripherals'),\n('Mouse 49',25.0,'Peripherals'),\n('Monitor 49',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #050",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #50. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #051",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #51. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 51','alice51@example.com',date('now')),\n('Bob 51','bob51@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 51',49.9,'Peripherals'),\n('Mouse 51',25.0,'Peripherals'),\n('Monitor 51',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #052",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #52. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #053",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #53. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 53','alice53@example.com',date('now')),\n('Bob 53','bob53@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 53',49.9,'Peripherals'),\n('Mouse 53',25.0,'Peripherals'),\n('Monitor 53',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #054",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #54. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #055",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #55. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 55','alice55@example.com',date('now')),\n('Bob 55','bob55@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 55',49.9,'Peripherals'),\n('Mouse 55',25.0,'Peripherals'),\n('Monitor 55',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #056",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #56. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #057",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #57. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 57','alice57@example.com',date('now')),\n('Bob 57','bob57@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 57',49.9,'Peripherals'),\n('Mouse 57',25.0,'Peripherals'),\n('Monitor 57',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #058",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #58. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #059",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #59. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 59','alice59@example.com',date('now')),\n('Bob 59','bob59@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 59',49.9,'Peripherals'),\n('Mouse 59',25.0,'Peripherals'),\n('Monitor 59',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #060",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #60. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #061",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #61. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 61','alice61@example.com',date('now')),\n('Bob 61','bob61@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 61',49.9,'Peripherals'),\n('Mouse 61',25.0,'Peripherals'),\n('Monitor 61',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #062",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #62. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #063",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #63. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 63','alice63@example.com',date('now')),\n('Bob 63','bob63@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 63',49.9,'Peripherals'),\n('Mouse 63',25.0,'Peripherals'),\n('Monitor 63',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #064",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #64. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #065",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #65. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 65','alice65@example.com',date('now')),\n('Bob 65','bob65@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 65',49.9,'Peripherals'),\n('Mouse 65',25.0,'Peripherals'),\n('Monitor 65',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #066",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #66. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #067",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #67. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 67','alice67@example.com',date('now')),\n('Bob 67','bob67@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 67',49.9,'Peripherals'),\n('Mouse 67',25.0,'Peripherals'),\n('Monitor 67',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #068",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #68. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #069",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #69. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 69','alice69@example.com',date('now')),\n('Bob 69','bob69@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 69',49.9,'Peripherals'),\n('Mouse 69',25.0,'Peripherals'),\n('Monitor 69',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #070",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #70. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #071",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #71. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 71','alice71@example.com',date('now')),\n('Bob 71','bob71@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 71',49.9,'Peripherals'),\n('Mouse 71',25.0,'Peripherals'),\n('Monitor 71',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #072",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #72. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #073",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #73. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 73','alice73@example.com',date('now')),\n('Bob 73','bob73@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 73',49.9,'Peripherals'),\n('Mouse 73',25.0,'Peripherals'),\n('Monitor 73',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #074",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #74. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #075",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #75. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 75','alice75@example.com',date('now')),\n('Bob 75','bob75@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 75',49.9,'Peripherals'),\n('Mouse 75',25.0,'Peripherals'),\n('Monitor 75',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #076",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #76. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #077",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #77. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 77','alice77@example.com',date('now')),\n('Bob 77','bob77@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 77',49.9,'Peripherals'),\n('Mouse 77',25.0,'Peripherals'),\n('Monitor 77',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #078",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #78. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #079",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #79. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 79','alice79@example.com',date('now')),\n('Bob 79','bob79@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 79',49.9,'Peripherals'),\n('Mouse 79',25.0,'Peripherals'),\n('Monitor 79',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #080",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #80. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #081",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #81. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 81','alice81@example.com',date('now')),\n('Bob 81','bob81@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 81',49.9,'Peripherals'),\n('Mouse 81',25.0,'Peripherals'),\n('Monitor 81',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #082",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #82. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #083",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #83. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 83','alice83@example.com',date('now')),\n('Bob 83','bob83@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 83',49.9,'Peripherals'),\n('Mouse 83',25.0,'Peripherals'),\n('Monitor 83',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #084",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #84. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #085",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #85. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 85','alice85@example.com',date('now')),\n('Bob 85','bob85@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 85',49.9,'Peripherals'),\n('Mouse 85',25.0,'Peripherals'),\n('Monitor 85',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #086",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #86. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #087",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #87. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 87','alice87@example.com',date('now')),\n('Bob 87','bob87@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 87',49.9,'Peripherals'),\n('Mouse 87',25.0,'Peripherals'),\n('Monitor 87',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #088",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #88. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #089",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #89. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 89','alice89@example.com',date('now')),\n('Bob 89','bob89@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 89',49.9,'Peripherals'),\n('Mouse 89',25.0,'Peripherals'),\n('Monitor 89',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #090",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #90. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #091",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #91. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 91','alice91@example.com',date('now')),\n('Bob 91','bob91@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 91',49.9,'Peripherals'),\n('Mouse 91',25.0,'Peripherals'),\n('Monitor 91',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #092",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #92. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #093",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #93. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 93','alice93@example.com',date('now')),\n('Bob 93','bob93@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 93',49.9,'Peripherals'),\n('Mouse 93',25.0,'Peripherals'),\n('Monitor 93',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #094",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #94. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #095",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #95. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 95','alice95@example.com',date('now')),\n('Bob 95','bob95@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 95',49.9,'Peripherals'),\n('Mouse 95',25.0,'Peripherals'),\n('Monitor 95',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #096",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #96. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #097",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #97. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 97','alice97@example.com',date('now')),\n('Bob 97','bob97@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 97',49.9,'Peripherals'),\n('Mouse 97',25.0,'Peripherals'),\n('Monitor 97',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #098",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #98. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Demo/Shop Template #099",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #99. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": "INSERT INTO customers(name,email,created_at) VALUES\n('Alice 99','alice99@example.com',date('now')),\n('Bob 99','bob99@example.com',date('now'));\nINSERT INTO products(name,price,category) VALUES\n('Keyboard 99',49.9,'Peripherals'),\n('Mouse 99',25.0,'Peripherals'),\n('Monitor 99',199.0,'Displays');\nINSERT INTO orders(customer_id,created_at) VALUES (1,date('now')), (2,date('now'));\nINSERT INTO order_items(order_id,product_id,qty) VALUES (1,1,1),(1,2,2),(2,3,1);"
    },
    {
      "name": "Demo/Shop Template #100",
      "category": "Demo/Shop",
      "description": "Demo/Shop example schema #100. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS order_items;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS customers;\nCREATE TABLE customers(\n  customer_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT UNIQUE,\n  created_at TEXT\n);\nCREATE TABLE products(\n  product_id INTEGER PRIMARY KEY,\n  name TEXT NOT NULL,\n  price REAL NOT NULL,\n  category TEXT\n);\nCREATE TABLE orders(\n  order_id INTEGER PRIMARY KEY,\n  customer_id INTEGER NOT NULL,\n  created_at TEXT NOT NULL,\n  FOREIGN KEY(customer_id) REFERENCES customers(customer_id)\n);\nCREATE TABLE order_items(\n  order_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  qty INTEGER NOT NULL CHECK(qty>0),\n  PRIMARY KEY(order_id, product_id),\n  FOREIGN KEY(order_id) REFERENCES orders(order_id),\n  FOREIGN KEY(product_id) REFERENCES products(product_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #001",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #1. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 1','Post body 1',date('now')), (2,'World 1','Another body 1',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 1',date('now')),(1,'Ben','Great 1',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #002",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #2. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #003",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #3. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 3','Post body 3',date('now')), (2,'World 3','Another body 3',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 3',date('now')),(1,'Ben','Great 3',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #004",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #4. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #005",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #5. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 5','Post body 5',date('now')), (2,'World 5','Another body 5',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 5',date('now')),(1,'Ben','Great 5',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #006",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #6. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #007",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #7. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 7','Post body 7',date('now')), (2,'World 7','Another body 7',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 7',date('now')),(1,'Ben','Great 7',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #008",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #8. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #009",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #9. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 9','Post body 9',date('now')), (2,'World 9','Another body 9',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 9',date('now')),(1,'Ben','Great 9',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #010",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #10. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #011",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #11. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 11','Post body 11',date('now')), (2,'World 11','Another body 11',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 11',date('now')),(1,'Ben','Great 11',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #012",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #12. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #013",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #13. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 13','Post body 13',date('now')), (2,'World 13','Another body 13',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 13',date('now')),(1,'Ben','Great 13',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #014",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #14. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #015",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #15. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 15','Post body 15',date('now')), (2,'World 15','Another body 15',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 15',date('now')),(1,'Ben','Great 15',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #016",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #16. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #017",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #17. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 17','Post body 17',date('now')), (2,'World 17','Another body 17',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 17',date('now')),(1,'Ben','Great 17',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #018",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #18. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #019",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #19. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 19','Post body 19',date('now')), (2,'World 19','Another body 19',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 19',date('now')),(1,'Ben','Great 19',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #020",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #20. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #021",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #21. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 21','Post body 21',date('now')), (2,'World 21','Another body 21',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 21',date('now')),(1,'Ben','Great 21',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #022",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #22. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #023",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #23. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 23','Post body 23',date('now')), (2,'World 23','Another body 23',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 23',date('now')),(1,'Ben','Great 23',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #024",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #24. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #025",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #25. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 25','Post body 25',date('now')), (2,'World 25','Another body 25',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 25',date('now')),(1,'Ben','Great 25',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #026",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #26. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #027",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #27. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 27','Post body 27',date('now')), (2,'World 27','Another body 27',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 27',date('now')),(1,'Ben','Great 27',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #028",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #28. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #029",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #29. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 29','Post body 29',date('now')), (2,'World 29','Another body 29',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 29',date('now')),(1,'Ben','Great 29',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #030",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #30. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #031",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #31. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 31','Post body 31',date('now')), (2,'World 31','Another body 31',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 31',date('now')),(1,'Ben','Great 31',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #032",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #32. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #033",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #33. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 33','Post body 33',date('now')), (2,'World 33','Another body 33',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 33',date('now')),(1,'Ben','Great 33',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #034",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #34. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #035",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #35. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 35','Post body 35',date('now')), (2,'World 35','Another body 35',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 35',date('now')),(1,'Ben','Great 35',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #036",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #36. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #037",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #37. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 37','Post body 37',date('now')), (2,'World 37','Another body 37',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 37',date('now')),(1,'Ben','Great 37',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #038",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #38. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #039",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #39. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 39','Post body 39',date('now')), (2,'World 39','Another body 39',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 39',date('now')),(1,'Ben','Great 39',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #040",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #40. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #041",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #41. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 41','Post body 41',date('now')), (2,'World 41','Another body 41',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 41',date('now')),(1,'Ben','Great 41',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #042",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #42. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #043",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #43. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 43','Post body 43',date('now')), (2,'World 43','Another body 43',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 43',date('now')),(1,'Ben','Great 43',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #044",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #44. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #045",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #45. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 45','Post body 45',date('now')), (2,'World 45','Another body 45',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 45',date('now')),(1,'Ben','Great 45',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #046",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #46. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #047",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #47. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 47','Post body 47',date('now')), (2,'World 47','Another body 47',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 47',date('now')),(1,'Ben','Great 47',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #048",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #48. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #049",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #49. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 49','Post body 49',date('now')), (2,'World 49','Another body 49',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 49',date('now')),(1,'Ben','Great 49',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #050",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #50. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #051",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #51. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 51','Post body 51',date('now')), (2,'World 51','Another body 51',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 51',date('now')),(1,'Ben','Great 51',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #052",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #52. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #053",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #53. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 53','Post body 53',date('now')), (2,'World 53','Another body 53',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 53',date('now')),(1,'Ben','Great 53',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #054",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #54. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #055",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #55. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 55','Post body 55',date('now')), (2,'World 55','Another body 55',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 55',date('now')),(1,'Ben','Great 55',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #056",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #56. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #057",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #57. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 57','Post body 57',date('now')), (2,'World 57','Another body 57',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 57',date('now')),(1,'Ben','Great 57',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #058",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #58. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #059",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #59. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 59','Post body 59',date('now')), (2,'World 59','Another body 59',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 59',date('now')),(1,'Ben','Great 59',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #060",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #60. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #061",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #61. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 61','Post body 61',date('now')), (2,'World 61','Another body 61',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 61',date('now')),(1,'Ben','Great 61',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #062",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #62. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #063",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #63. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 63','Post body 63',date('now')), (2,'World 63','Another body 63',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 63',date('now')),(1,'Ben','Great 63',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #064",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #64. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #065",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #65. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 65','Post body 65',date('now')), (2,'World 65','Another body 65',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 65',date('now')),(1,'Ben','Great 65',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #066",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #66. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #067",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #67. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 67','Post body 67',date('now')), (2,'World 67','Another body 67',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 67',date('now')),(1,'Ben','Great 67',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #068",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #68. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #069",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #69. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 69','Post body 69',date('now')), (2,'World 69','Another body 69',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 69',date('now')),(1,'Ben','Great 69',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #070",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #70. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #071",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #71. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 71','Post body 71',date('now')), (2,'World 71','Another body 71',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 71',date('now')),(1,'Ben','Great 71',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #072",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #72. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #073",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #73. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 73','Post body 73',date('now')), (2,'World 73','Another body 73',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 73',date('now')),(1,'Ben','Great 73',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #074",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #74. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #075",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #75. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 75','Post body 75',date('now')), (2,'World 75','Another body 75',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 75',date('now')),(1,'Ben','Great 75',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #076",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #76. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #077",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #77. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 77','Post body 77',date('now')), (2,'World 77','Another body 77',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 77',date('now')),(1,'Ben','Great 77',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #078",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #78. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #079",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #79. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 79','Post body 79',date('now')), (2,'World 79','Another body 79',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 79',date('now')),(1,'Ben','Great 79',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #080",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #80. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #081",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #81. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 81','Post body 81',date('now')), (2,'World 81','Another body 81',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 81',date('now')),(1,'Ben','Great 81',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #082",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #82. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #083",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #83. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 83','Post body 83',date('now')), (2,'World 83','Another body 83',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 83',date('now')),(1,'Ben','Great 83',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #084",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #84. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #085",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #85. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 85','Post body 85',date('now')), (2,'World 85','Another body 85',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 85',date('now')),(1,'Ben','Great 85',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #086",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #86. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #087",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #87. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 87','Post body 87',date('now')), (2,'World 87','Another body 87',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 87',date('now')),(1,'Ben','Great 87',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #088",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #88. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #089",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #89. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 89','Post body 89',date('now')), (2,'World 89','Another body 89',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 89',date('now')),(1,'Ben','Great 89',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #090",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #90. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #091",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #91. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 91','Post body 91',date('now')), (2,'World 91','Another body 91',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 91',date('now')),(1,'Ben','Great 91',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #092",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #92. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #093",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #93. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 93','Post body 93',date('now')), (2,'World 93','Another body 93',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 93',date('now')),(1,'Ben','Great 93',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #094",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #94. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #095",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #95. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 95','Post body 95',date('now')), (2,'World 95','Another body 95',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 95',date('now')),(1,'Ben','Great 95',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #096",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #96. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #097",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #97. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 97','Post body 97',date('now')), (2,'World 97','Another body 97',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 97',date('now')),(1,'Ben','Great 97',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #098",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #98. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Blog/Content Template #099",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #99. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": "INSERT INTO posts(author_id,title,body,published_at) VALUES\n(1,'Hello 99','Post body 99',date('now')), (2,'World 99','Another body 99',date('now'));\nINSERT INTO comments(post_id,author,body,created_at) VALUES\n(1,'Ann','Nice! 99',date('now')),(1,'Ben','Great 99',date('now'));\nINSERT INTO tags(name) VALUES ('sqlite'),('python'),('tkinter');\nINSERT INTO post_tags(post_id,tag_id) VALUES (1,1),(1,2),(2,2);"
    },
    {
      "name": "Blog/Content Template #100",
      "category": "Blog/Content",
      "description": "Blog/Content example schema #100. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS post_tags;\nDROP TABLE IF EXISTS comments;\nDROP TABLE IF EXISTS tags;\nDROP TABLE IF EXISTS posts;\nCREATE TABLE posts(\n  post_id INTEGER PRIMARY KEY,\n  author_id INTEGER,\n  title TEXT,\n  body TEXT,\n  published_at TEXT\n);\nCREATE TABLE comments(\n  comment_id INTEGER PRIMARY KEY,\n  post_id INTEGER,\n  author TEXT,\n  body TEXT,\n  created_at TEXT,\n  FOREIGN KEY(post_id) REFERENCES posts(post_id)\n);\nCREATE TABLE tags(\n  tag_id INTEGER PRIMARY KEY,\n  name TEXT UNIQUE\n);\nCREATE TABLE post_tags(\n  post_id INTEGER,\n  tag_id INTEGER,\n  PRIMARY KEY(post_id, tag_id),\n  FOREIGN KEY(post_id) REFERENCES posts(post_id),\n  FOREIGN KEY(tag_id) REFERENCES tags(tag_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #001",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #1. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 1'), ('Author B 1');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 1',1,9.99), ('Book Y 1',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 1','CityA',date('now')),('Leo 1','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #002",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #2. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #003",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #3. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 3'), ('Author B 3');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 3',1,9.99), ('Book Y 3',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 3','CityA',date('now')),('Leo 3','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #004",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #4. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #005",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #5. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 5'), ('Author B 5');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 5',1,9.99), ('Book Y 5',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 5','CityA',date('now')),('Leo 5','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #006",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #6. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #007",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #7. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 7'), ('Author B 7');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 7',1,9.99), ('Book Y 7',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 7','CityA',date('now')),('Leo 7','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #008",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #8. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #009",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #9. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 9'), ('Author B 9');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 9',1,9.99), ('Book Y 9',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 9','CityA',date('now')),('Leo 9','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #010",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #10. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #011",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #11. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 11'), ('Author B 11');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 11',1,9.99), ('Book Y 11',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 11','CityA',date('now')),('Leo 11','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #012",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #12. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #013",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #13. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 13'), ('Author B 13');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 13',1,9.99), ('Book Y 13',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 13','CityA',date('now')),('Leo 13','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #014",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #14. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #015",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #15. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 15'), ('Author B 15');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 15',1,9.99), ('Book Y 15',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 15','CityA',date('now')),('Leo 15','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #016",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #16. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #017",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #17. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 17'), ('Author B 17');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 17',1,9.99), ('Book Y 17',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 17','CityA',date('now')),('Leo 17','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #018",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #18. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #019",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #19. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 19'), ('Author B 19');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 19',1,9.99), ('Book Y 19',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 19','CityA',date('now')),('Leo 19','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #020",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #20. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #021",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #21. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 21'), ('Author B 21');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 21',1,9.99), ('Book Y 21',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 21','CityA',date('now')),('Leo 21','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #022",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #22. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #023",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #23. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 23'), ('Author B 23');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 23',1,9.99), ('Book Y 23',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 23','CityA',date('now')),('Leo 23','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #024",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #24. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #025",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #25. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 25'), ('Author B 25');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 25',1,9.99), ('Book Y 25',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 25','CityA',date('now')),('Leo 25','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #026",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #26. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #027",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #27. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 27'), ('Author B 27');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 27',1,9.99), ('Book Y 27',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 27','CityA',date('now')),('Leo 27','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #028",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #28. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #029",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #29. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 29'), ('Author B 29');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 29',1,9.99), ('Book Y 29',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 29','CityA',date('now')),('Leo 29','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #030",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #30. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #031",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #31. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 31'), ('Author B 31');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 31',1,9.99), ('Book Y 31',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 31','CityA',date('now')),('Leo 31','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #032",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #32. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #033",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #33. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 33'), ('Author B 33');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 33',1,9.99), ('Book Y 33',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 33','CityA',date('now')),('Leo 33','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #034",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #34. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #035",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #35. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 35'), ('Author B 35');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 35',1,9.99), ('Book Y 35',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 35','CityA',date('now')),('Leo 35','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #036",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #36. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #037",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #37. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 37'), ('Author B 37');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 37',1,9.99), ('Book Y 37',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 37','CityA',date('now')),('Leo 37','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #038",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #38. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #039",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #39. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 39'), ('Author B 39');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 39',1,9.99), ('Book Y 39',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 39','CityA',date('now')),('Leo 39','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #040",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #40. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #041",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #41. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 41'), ('Author B 41');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 41',1,9.99), ('Book Y 41',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 41','CityA',date('now')),('Leo 41','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #042",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #42. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #043",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #43. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 43'), ('Author B 43');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 43',1,9.99), ('Book Y 43',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 43','CityA',date('now')),('Leo 43','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #044",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #44. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #045",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #45. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 45'), ('Author B 45');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 45',1,9.99), ('Book Y 45',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 45','CityA',date('now')),('Leo 45','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #046",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #46. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #047",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #47. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 47'), ('Author B 47');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 47',1,9.99), ('Book Y 47',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 47','CityA',date('now')),('Leo 47','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #048",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #48. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #049",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #49. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 49'), ('Author B 49');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 49',1,9.99), ('Book Y 49',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 49','CityA',date('now')),('Leo 49','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #050",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #50. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #051",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #51. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 51'), ('Author B 51');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 51',1,9.99), ('Book Y 51',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 51','CityA',date('now')),('Leo 51','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #052",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #52. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #053",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #53. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 53'), ('Author B 53');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 53',1,9.99), ('Book Y 53',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 53','CityA',date('now')),('Leo 53','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #054",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #54. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #055",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #55. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 55'), ('Author B 55');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 55',1,9.99), ('Book Y 55',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 55','CityA',date('now')),('Leo 55','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #056",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #56. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #057",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #57. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 57'), ('Author B 57');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 57',1,9.99), ('Book Y 57',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 57','CityA',date('now')),('Leo 57','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #058",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #58. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #059",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #59. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 59'), ('Author B 59');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 59',1,9.99), ('Book Y 59',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 59','CityA',date('now')),('Leo 59','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #060",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #60. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #061",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #61. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 61'), ('Author B 61');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 61',1,9.99), ('Book Y 61',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 61','CityA',date('now')),('Leo 61','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #062",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #62. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #063",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #63. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 63'), ('Author B 63');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 63',1,9.99), ('Book Y 63',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 63','CityA',date('now')),('Leo 63','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #064",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #64. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #065",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #65. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 65'), ('Author B 65');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 65',1,9.99), ('Book Y 65',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 65','CityA',date('now')),('Leo 65','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #066",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #66. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #067",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #67. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 67'), ('Author B 67');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 67',1,9.99), ('Book Y 67',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 67','CityA',date('now')),('Leo 67','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #068",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #68. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #069",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #69. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 69'), ('Author B 69');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 69',1,9.99), ('Book Y 69',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 69','CityA',date('now')),('Leo 69','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #070",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #70. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #071",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #71. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 71'), ('Author B 71');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 71',1,9.99), ('Book Y 71',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 71','CityA',date('now')),('Leo 71','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #072",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #72. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #073",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #73. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 73'), ('Author B 73');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 73',1,9.99), ('Book Y 73',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 73','CityA',date('now')),('Leo 73','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #074",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #74. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #075",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #75. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 75'), ('Author B 75');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 75',1,9.99), ('Book Y 75',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 75','CityA',date('now')),('Leo 75','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #076",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #76. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #077",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #77. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 77'), ('Author B 77');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 77',1,9.99), ('Book Y 77',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 77','CityA',date('now')),('Leo 77','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #078",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #78. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #079",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #79. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 79'), ('Author B 79');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 79',1,9.99), ('Book Y 79',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 79','CityA',date('now')),('Leo 79','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #080",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #80. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #081",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #81. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 81'), ('Author B 81');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 81',1,9.99), ('Book Y 81',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 81','CityA',date('now')),('Leo 81','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #082",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #82. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #083",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #83. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 83'), ('Author B 83');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 83',1,9.99), ('Book Y 83',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 83','CityA',date('now')),('Leo 83','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #084",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #84. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #085",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #85. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 85'), ('Author B 85');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 85',1,9.99), ('Book Y 85',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 85','CityA',date('now')),('Leo 85','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #086",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #86. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #087",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #87. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 87'), ('Author B 87');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 87',1,9.99), ('Book Y 87',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 87','CityA',date('now')),('Leo 87','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #088",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #88. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #089",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #89. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 89'), ('Author B 89');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 89',1,9.99), ('Book Y 89',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 89','CityA',date('now')),('Leo 89','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #090",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #90. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #091",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #91. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 91'), ('Author B 91');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 91',1,9.99), ('Book Y 91',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 91','CityA',date('now')),('Leo 91','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #092",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #92. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #093",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #93. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 93'), ('Author B 93');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 93',1,9.99), ('Book Y 93',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 93','CityA',date('now')),('Leo 93','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #094",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #94. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #095",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #95. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 95'), ('Author B 95');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 95',1,9.99), ('Book Y 95',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 95','CityA',date('now')),('Leo 95','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #096",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #96. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #097",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #97. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 97'), ('Author B 97');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 97',1,9.99), ('Book Y 97',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 97','CityA',date('now')),('Leo 97','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #098",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #98. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Learning/Library Template #099",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #99. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": "INSERT INTO authors(name) VALUES ('Author A 99'), ('Author B 99');\nINSERT INTO books(title,author_id,price) VALUES ('Book X 99',1,9.99), ('Book Y 99',2,14.99);\nINSERT INTO members(name,city,joined_at) VALUES ('Mia 99','CityA',date('now')),('Leo 99','CityB',date('now'));\nINSERT INTO loans(book_id,member_id,loaned_at,returned_at) VALUES (1,1,date('now'),NULL);"
    },
    {
      "name": "Learning/Library Template #100",
      "category": "Learning/Library",
      "description": "Learning/Library example schema #100. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS loans;\nDROP TABLE IF EXISTS books;\nDROP TABLE IF EXISTS members;\nDROP TABLE IF EXISTS authors;\nCREATE TABLE authors(\n  author_id INTEGER PRIMARY KEY,\n  name TEXT\n);\nCREATE TABLE books(\n  book_id INTEGER PRIMARY KEY,\n  title TEXT,\n  author_id INTEGER,\n  price REAL,\n  FOREIGN KEY(author_id) REFERENCES authors(author_id)\n);\nCREATE TABLE members(\n  member_id INTEGER PRIMARY KEY,\n  name TEXT,\n  city TEXT,\n  joined_at TEXT\n);\nCREATE TABLE loans(\n  loan_id INTEGER PRIMARY KEY,\n  book_id INTEGER,\n  member_id INTEGER,\n  loaned_at TEXT,\n  returned_at TEXT,\n  FOREIGN KEY(book_id) REFERENCES books(book_id),\n  FOREIGN KEY(member_id) REFERENCES members(member_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #001",
      "category": "HR",
      "description": "HR example schema #1. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 1'),('HR 1');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #002",
      "category": "HR",
      "description": "HR example schema #2. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #003",
      "category": "HR",
      "description": "HR example schema #3. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 3'),('HR 3');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #004",
      "category": "HR",
      "description": "HR example schema #4. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #005",
      "category": "HR",
      "description": "HR example schema #5. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 5'),('HR 5');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #006",
      "category": "HR",
      "description": "HR example schema #6. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #007",
      "category": "HR",
      "description": "HR example schema #7. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 7'),('HR 7');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #008",
      "category": "HR",
      "description": "HR example schema #8. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #009",
      "category": "HR",
      "description": "HR example schema #9. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 9'),('HR 9');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #010",
      "category": "HR",
      "description": "HR example schema #10. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #011",
      "category": "HR",
      "description": "HR example schema #11. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 11'),('HR 11');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #012",
      "category": "HR",
      "description": "HR example schema #12. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #013",
      "category": "HR",
      "description": "HR example schema #13. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 13'),('HR 13');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #014",
      "category": "HR",
      "description": "HR example schema #14. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #015",
      "category": "HR",
      "description": "HR example schema #15. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 15'),('HR 15');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #016",
      "category": "HR",
      "description": "HR example schema #16. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #017",
      "category": "HR",
      "description": "HR example schema #17. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 17'),('HR 17');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #018",
      "category": "HR",
      "description": "HR example schema #18. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #019",
      "category": "HR",
      "description": "HR example schema #19. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 19'),('HR 19');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #020",
      "category": "HR",
      "description": "HR example schema #20. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #021",
      "category": "HR",
      "description": "HR example schema #21. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 21'),('HR 21');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #022",
      "category": "HR",
      "description": "HR example schema #22. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #023",
      "category": "HR",
      "description": "HR example schema #23. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 23'),('HR 23');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #024",
      "category": "HR",
      "description": "HR example schema #24. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #025",
      "category": "HR",
      "description": "HR example schema #25. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 25'),('HR 25');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #026",
      "category": "HR",
      "description": "HR example schema #26. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #027",
      "category": "HR",
      "description": "HR example schema #27. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 27'),('HR 27');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #028",
      "category": "HR",
      "description": "HR example schema #28. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #029",
      "category": "HR",
      "description": "HR example schema #29. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 29'),('HR 29');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #030",
      "category": "HR",
      "description": "HR example schema #30. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #031",
      "category": "HR",
      "description": "HR example schema #31. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 31'),('HR 31');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #032",
      "category": "HR",
      "description": "HR example schema #32. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #033",
      "category": "HR",
      "description": "HR example schema #33. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 33'),('HR 33');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #034",
      "category": "HR",
      "description": "HR example schema #34. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #035",
      "category": "HR",
      "description": "HR example schema #35. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 35'),('HR 35');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #036",
      "category": "HR",
      "description": "HR example schema #36. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #037",
      "category": "HR",
      "description": "HR example schema #37. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 37'),('HR 37');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #038",
      "category": "HR",
      "description": "HR example schema #38. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #039",
      "category": "HR",
      "description": "HR example schema #39. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 39'),('HR 39');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #040",
      "category": "HR",
      "description": "HR example schema #40. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #041",
      "category": "HR",
      "description": "HR example schema #41. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 41'),('HR 41');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #042",
      "category": "HR",
      "description": "HR example schema #42. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #043",
      "category": "HR",
      "description": "HR example schema #43. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 43'),('HR 43');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #044",
      "category": "HR",
      "description": "HR example schema #44. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #045",
      "category": "HR",
      "description": "HR example schema #45. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 45'),('HR 45');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #046",
      "category": "HR",
      "description": "HR example schema #46. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #047",
      "category": "HR",
      "description": "HR example schema #47. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 47'),('HR 47');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #048",
      "category": "HR",
      "description": "HR example schema #48. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #049",
      "category": "HR",
      "description": "HR example schema #49. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 49'),('HR 49');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #050",
      "category": "HR",
      "description": "HR example schema #50. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #051",
      "category": "HR",
      "description": "HR example schema #51. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 51'),('HR 51');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #052",
      "category": "HR",
      "description": "HR example schema #52. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #053",
      "category": "HR",
      "description": "HR example schema #53. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 53'),('HR 53');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #054",
      "category": "HR",
      "description": "HR example schema #54. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #055",
      "category": "HR",
      "description": "HR example schema #55. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 55'),('HR 55');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #056",
      "category": "HR",
      "description": "HR example schema #56. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #057",
      "category": "HR",
      "description": "HR example schema #57. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 57'),('HR 57');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #058",
      "category": "HR",
      "description": "HR example schema #58. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #059",
      "category": "HR",
      "description": "HR example schema #59. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 59'),('HR 59');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #060",
      "category": "HR",
      "description": "HR example schema #60. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #061",
      "category": "HR",
      "description": "HR example schema #61. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 61'),('HR 61');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #062",
      "category": "HR",
      "description": "HR example schema #62. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #063",
      "category": "HR",
      "description": "HR example schema #63. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 63'),('HR 63');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #064",
      "category": "HR",
      "description": "HR example schema #64. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #065",
      "category": "HR",
      "description": "HR example schema #65. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 65'),('HR 65');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #066",
      "category": "HR",
      "description": "HR example schema #66. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #067",
      "category": "HR",
      "description": "HR example schema #67. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 67'),('HR 67');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #068",
      "category": "HR",
      "description": "HR example schema #68. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #069",
      "category": "HR",
      "description": "HR example schema #69. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 69'),('HR 69');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #070",
      "category": "HR",
      "description": "HR example schema #70. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #071",
      "category": "HR",
      "description": "HR example schema #71. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 71'),('HR 71');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #072",
      "category": "HR",
      "description": "HR example schema #72. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #073",
      "category": "HR",
      "description": "HR example schema #73. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 73'),('HR 73');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #074",
      "category": "HR",
      "description": "HR example schema #74. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #075",
      "category": "HR",
      "description": "HR example schema #75. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 75'),('HR 75');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #076",
      "category": "HR",
      "description": "HR example schema #76. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #077",
      "category": "HR",
      "description": "HR example schema #77. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 77'),('HR 77');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #078",
      "category": "HR",
      "description": "HR example schema #78. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #079",
      "category": "HR",
      "description": "HR example schema #79. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 79'),('HR 79');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #080",
      "category": "HR",
      "description": "HR example schema #80. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #081",
      "category": "HR",
      "description": "HR example schema #81. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 81'),('HR 81');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #082",
      "category": "HR",
      "description": "HR example schema #82. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #083",
      "category": "HR",
      "description": "HR example schema #83. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 83'),('HR 83');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #084",
      "category": "HR",
      "description": "HR example schema #84. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #085",
      "category": "HR",
      "description": "HR example schema #85. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 85'),('HR 85');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #086",
      "category": "HR",
      "description": "HR example schema #86. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #087",
      "category": "HR",
      "description": "HR example schema #87. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 87'),('HR 87');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #088",
      "category": "HR",
      "description": "HR example schema #88. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #089",
      "category": "HR",
      "description": "HR example schema #89. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 89'),('HR 89');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #090",
      "category": "HR",
      "description": "HR example schema #90. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #091",
      "category": "HR",
      "description": "HR example schema #91. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 91'),('HR 91');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #092",
      "category": "HR",
      "description": "HR example schema #92. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #093",
      "category": "HR",
      "description": "HR example schema #93. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 93'),('HR 93');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #094",
      "category": "HR",
      "description": "HR example schema #94. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #095",
      "category": "HR",
      "description": "HR example schema #95. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 95'),('HR 95');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #096",
      "category": "HR",
      "description": "HR example schema #96. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #097",
      "category": "HR",
      "description": "HR example schema #97. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 97'),('HR 97');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #098",
      "category": "HR",
      "description": "HR example schema #98. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "HR Template #099",
      "category": "HR",
      "description": "HR example schema #99. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": "INSERT INTO departments(dept_name) VALUES ('Engineering 99'),('HR 99');\nINSERT INTO employees(first_name,last_name,dept_id,salary,hired_at) VALUES\n('Ann','Lee',1,80000,date('now')),('Bob','Kim',2,60000,date('now'));"
    },
    {
      "name": "HR Template #100",
      "category": "HR",
      "description": "HR example schema #100. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS employees;\nDROP TABLE IF EXISTS departments;\nCREATE TABLE departments(\n  dept_id INTEGER PRIMARY KEY,\n  dept_name TEXT\n);\nCREATE TABLE employees(\n  emp_id INTEGER PRIMARY KEY,\n  first_name TEXT,\n  last_name TEXT,\n  dept_id INTEGER,\n  salary REAL,\n  hired_at TEXT,\n  FOREIGN KEY(dept_id) REFERENCES departments(dept_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #001",
      "category": "IoT",
      "description": "IoT example schema #1. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-1','Room A'),('Dev-2','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #002",
      "category": "IoT",
      "description": "IoT example schema #2. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #003",
      "category": "IoT",
      "description": "IoT example schema #3. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-3','Room A'),('Dev-4','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #004",
      "category": "IoT",
      "description": "IoT example schema #4. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #005",
      "category": "IoT",
      "description": "IoT example schema #5. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-5','Room A'),('Dev-6','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #006",
      "category": "IoT",
      "description": "IoT example schema #6. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #007",
      "category": "IoT",
      "description": "IoT example schema #7. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-7','Room A'),('Dev-8','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #008",
      "category": "IoT",
      "description": "IoT example schema #8. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #009",
      "category": "IoT",
      "description": "IoT example schema #9. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-9','Room A'),('Dev-10','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #010",
      "category": "IoT",
      "description": "IoT example schema #10. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #011",
      "category": "IoT",
      "description": "IoT example schema #11. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-11','Room A'),('Dev-12','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #012",
      "category": "IoT",
      "description": "IoT example schema #12. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #013",
      "category": "IoT",
      "description": "IoT example schema #13. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-13','Room A'),('Dev-14','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #014",
      "category": "IoT",
      "description": "IoT example schema #14. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #015",
      "category": "IoT",
      "description": "IoT example schema #15. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-15','Room A'),('Dev-16','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #016",
      "category": "IoT",
      "description": "IoT example schema #16. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #017",
      "category": "IoT",
      "description": "IoT example schema #17. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-17','Room A'),('Dev-18','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #018",
      "category": "IoT",
      "description": "IoT example schema #18. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #019",
      "category": "IoT",
      "description": "IoT example schema #19. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-19','Room A'),('Dev-20','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #020",
      "category": "IoT",
      "description": "IoT example schema #20. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #021",
      "category": "IoT",
      "description": "IoT example schema #21. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-21','Room A'),('Dev-22','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #022",
      "category": "IoT",
      "description": "IoT example schema #22. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #023",
      "category": "IoT",
      "description": "IoT example schema #23. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-23','Room A'),('Dev-24','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #024",
      "category": "IoT",
      "description": "IoT example schema #24. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #025",
      "category": "IoT",
      "description": "IoT example schema #25. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-25','Room A'),('Dev-26','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #026",
      "category": "IoT",
      "description": "IoT example schema #26. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #027",
      "category": "IoT",
      "description": "IoT example schema #27. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-27','Room A'),('Dev-28','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #028",
      "category": "IoT",
      "description": "IoT example schema #28. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #029",
      "category": "IoT",
      "description": "IoT example schema #29. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-29','Room A'),('Dev-30','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #030",
      "category": "IoT",
      "description": "IoT example schema #30. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #031",
      "category": "IoT",
      "description": "IoT example schema #31. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-31','Room A'),('Dev-32','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #032",
      "category": "IoT",
      "description": "IoT example schema #32. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #033",
      "category": "IoT",
      "description": "IoT example schema #33. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-33','Room A'),('Dev-34','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #034",
      "category": "IoT",
      "description": "IoT example schema #34. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #035",
      "category": "IoT",
      "description": "IoT example schema #35. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-35','Room A'),('Dev-36','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #036",
      "category": "IoT",
      "description": "IoT example schema #36. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #037",
      "category": "IoT",
      "description": "IoT example schema #37. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-37','Room A'),('Dev-38','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #038",
      "category": "IoT",
      "description": "IoT example schema #38. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #039",
      "category": "IoT",
      "description": "IoT example schema #39. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-39','Room A'),('Dev-40','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #040",
      "category": "IoT",
      "description": "IoT example schema #40. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #041",
      "category": "IoT",
      "description": "IoT example schema #41. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-41','Room A'),('Dev-42','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #042",
      "category": "IoT",
      "description": "IoT example schema #42. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #043",
      "category": "IoT",
      "description": "IoT example schema #43. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-43','Room A'),('Dev-44','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #044",
      "category": "IoT",
      "description": "IoT example schema #44. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #045",
      "category": "IoT",
      "description": "IoT example schema #45. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-45','Room A'),('Dev-46','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #046",
      "category": "IoT",
      "description": "IoT example schema #46. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #047",
      "category": "IoT",
      "description": "IoT example schema #47. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-47','Room A'),('Dev-48','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #048",
      "category": "IoT",
      "description": "IoT example schema #48. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #049",
      "category": "IoT",
      "description": "IoT example schema #49. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-49','Room A'),('Dev-50','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #050",
      "category": "IoT",
      "description": "IoT example schema #50. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #051",
      "category": "IoT",
      "description": "IoT example schema #51. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-51','Room A'),('Dev-52','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #052",
      "category": "IoT",
      "description": "IoT example schema #52. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #053",
      "category": "IoT",
      "description": "IoT example schema #53. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-53','Room A'),('Dev-54','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #054",
      "category": "IoT",
      "description": "IoT example schema #54. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #055",
      "category": "IoT",
      "description": "IoT example schema #55. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-55','Room A'),('Dev-56','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #056",
      "category": "IoT",
      "description": "IoT example schema #56. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #057",
      "category": "IoT",
      "description": "IoT example schema #57. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-57','Room A'),('Dev-58','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #058",
      "category": "IoT",
      "description": "IoT example schema #58. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #059",
      "category": "IoT",
      "description": "IoT example schema #59. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-59','Room A'),('Dev-60','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #060",
      "category": "IoT",
      "description": "IoT example schema #60. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #061",
      "category": "IoT",
      "description": "IoT example schema #61. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-61','Room A'),('Dev-62','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #062",
      "category": "IoT",
      "description": "IoT example schema #62. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #063",
      "category": "IoT",
      "description": "IoT example schema #63. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-63','Room A'),('Dev-64','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #064",
      "category": "IoT",
      "description": "IoT example schema #64. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #065",
      "category": "IoT",
      "description": "IoT example schema #65. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-65','Room A'),('Dev-66','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #066",
      "category": "IoT",
      "description": "IoT example schema #66. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #067",
      "category": "IoT",
      "description": "IoT example schema #67. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-67','Room A'),('Dev-68','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #068",
      "category": "IoT",
      "description": "IoT example schema #68. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #069",
      "category": "IoT",
      "description": "IoT example schema #69. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-69','Room A'),('Dev-70','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #070",
      "category": "IoT",
      "description": "IoT example schema #70. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #071",
      "category": "IoT",
      "description": "IoT example schema #71. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-71','Room A'),('Dev-72','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #072",
      "category": "IoT",
      "description": "IoT example schema #72. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #073",
      "category": "IoT",
      "description": "IoT example schema #73. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-73','Room A'),('Dev-74','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #074",
      "category": "IoT",
      "description": "IoT example schema #74. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #075",
      "category": "IoT",
      "description": "IoT example schema #75. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-75','Room A'),('Dev-76','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #076",
      "category": "IoT",
      "description": "IoT example schema #76. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #077",
      "category": "IoT",
      "description": "IoT example schema #77. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-77','Room A'),('Dev-78','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #078",
      "category": "IoT",
      "description": "IoT example schema #78. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #079",
      "category": "IoT",
      "description": "IoT example schema #79. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-79','Room A'),('Dev-80','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #080",
      "category": "IoT",
      "description": "IoT example schema #80. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #081",
      "category": "IoT",
      "description": "IoT example schema #81. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-81','Room A'),('Dev-82','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #082",
      "category": "IoT",
      "description": "IoT example schema #82. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #083",
      "category": "IoT",
      "description": "IoT example schema #83. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-83','Room A'),('Dev-84','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #084",
      "category": "IoT",
      "description": "IoT example schema #84. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #085",
      "category": "IoT",
      "description": "IoT example schema #85. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-85','Room A'),('Dev-86','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #086",
      "category": "IoT",
      "description": "IoT example schema #86. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #087",
      "category": "IoT",
      "description": "IoT example schema #87. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-87','Room A'),('Dev-88','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #088",
      "category": "IoT",
      "description": "IoT example schema #88. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #089",
      "category": "IoT",
      "description": "IoT example schema #89. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-89','Room A'),('Dev-90','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #090",
      "category": "IoT",
      "description": "IoT example schema #90. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #091",
      "category": "IoT",
      "description": "IoT example schema #91. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-91','Room A'),('Dev-92','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #092",
      "category": "IoT",
      "description": "IoT example schema #92. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #093",
      "category": "IoT",
      "description": "IoT example schema #93. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-93','Room A'),('Dev-94','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #094",
      "category": "IoT",
      "description": "IoT example schema #94. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #095",
      "category": "IoT",
      "description": "IoT example schema #95. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-95','Room A'),('Dev-96','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #096",
      "category": "IoT",
      "description": "IoT example schema #96. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #097",
      "category": "IoT",
      "description": "IoT example schema #97. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-97','Room A'),('Dev-98','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #098",
      "category": "IoT",
      "description": "IoT example schema #98. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "IoT Template #099",
      "category": "IoT",
      "description": "IoT example schema #99. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": "INSERT INTO devices(name,location) VALUES ('Dev-99','Room A'),('Dev-100','Room B');\nINSERT INTO sensors(device_id,kind) VALUES (1,'temp'),(1,'humidity'),(2,'temp');\nINSERT INTO readings(sensor_id,value,measured_at) VALUES (1,22.5,date('now')),(2,45.0,date('now')),(3,21.3,date('now'));"
    },
    {
      "name": "IoT Template #100",
      "category": "IoT",
      "description": "IoT example schema #100. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS readings;\nDROP TABLE IF EXISTS sensors;\nDROP TABLE IF EXISTS devices;\nCREATE TABLE devices(\n  device_id INTEGER PRIMARY KEY,\n  name TEXT,\n  location TEXT\n);\nCREATE TABLE sensors(\n  sensor_id INTEGER PRIMARY KEY,\n  device_id INTEGER,\n  kind TEXT,\n  FOREIGN KEY(device_id) REFERENCES devices(device_id)\n);\nCREATE TABLE readings(\n  reading_id INTEGER PRIMARY KEY,\n  sensor_id INTEGER,\n  value REAL,\n  measured_at TEXT,\n  FOREIGN KEY(sensor_id) REFERENCES sensors(sensor_id)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #001",
      "category": "Star Schema",
      "description": "Star Schema example schema #1. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-1','CatA',10.0),('Q-1','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-1','X'),('D-1','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #002",
      "category": "Star Schema",
      "description": "Star Schema example schema #2. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #003",
      "category": "Star Schema",
      "description": "Star Schema example schema #3. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-3','CatA',10.0),('Q-3','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-3','X'),('D-3','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #004",
      "category": "Star Schema",
      "description": "Star Schema example schema #4. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #005",
      "category": "Star Schema",
      "description": "Star Schema example schema #5. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-5','CatA',10.0),('Q-5','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-5','X'),('D-5','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #006",
      "category": "Star Schema",
      "description": "Star Schema example schema #6. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #007",
      "category": "Star Schema",
      "description": "Star Schema example schema #7. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-7','CatA',10.0),('Q-7','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-7','X'),('D-7','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #008",
      "category": "Star Schema",
      "description": "Star Schema example schema #8. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #009",
      "category": "Star Schema",
      "description": "Star Schema example schema #9. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-9','CatA',10.0),('Q-9','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-9','X'),('D-9','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #010",
      "category": "Star Schema",
      "description": "Star Schema example schema #10. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #011",
      "category": "Star Schema",
      "description": "Star Schema example schema #11. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-11','CatA',10.0),('Q-11','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-11','X'),('D-11','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #012",
      "category": "Star Schema",
      "description": "Star Schema example schema #12. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #013",
      "category": "Star Schema",
      "description": "Star Schema example schema #13. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-13','CatA',10.0),('Q-13','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-13','X'),('D-13','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #014",
      "category": "Star Schema",
      "description": "Star Schema example schema #14. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #015",
      "category": "Star Schema",
      "description": "Star Schema example schema #15. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-15','CatA',10.0),('Q-15','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-15','X'),('D-15','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #016",
      "category": "Star Schema",
      "description": "Star Schema example schema #16. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #017",
      "category": "Star Schema",
      "description": "Star Schema example schema #17. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-17','CatA',10.0),('Q-17','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-17','X'),('D-17','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #018",
      "category": "Star Schema",
      "description": "Star Schema example schema #18. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #019",
      "category": "Star Schema",
      "description": "Star Schema example schema #19. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-19','CatA',10.0),('Q-19','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-19','X'),('D-19','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #020",
      "category": "Star Schema",
      "description": "Star Schema example schema #20. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #021",
      "category": "Star Schema",
      "description": "Star Schema example schema #21. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-21','CatA',10.0),('Q-21','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-21','X'),('D-21','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #022",
      "category": "Star Schema",
      "description": "Star Schema example schema #22. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #023",
      "category": "Star Schema",
      "description": "Star Schema example schema #23. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-23','CatA',10.0),('Q-23','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-23','X'),('D-23','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #024",
      "category": "Star Schema",
      "description": "Star Schema example schema #24. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #025",
      "category": "Star Schema",
      "description": "Star Schema example schema #25. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-25','CatA',10.0),('Q-25','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-25','X'),('D-25','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #026",
      "category": "Star Schema",
      "description": "Star Schema example schema #26. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #027",
      "category": "Star Schema",
      "description": "Star Schema example schema #27. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-27','CatA',10.0),('Q-27','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-27','X'),('D-27','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #028",
      "category": "Star Schema",
      "description": "Star Schema example schema #28. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #029",
      "category": "Star Schema",
      "description": "Star Schema example schema #29. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-29','CatA',10.0),('Q-29','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-29','X'),('D-29','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #030",
      "category": "Star Schema",
      "description": "Star Schema example schema #30. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #031",
      "category": "Star Schema",
      "description": "Star Schema example schema #31. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-31','CatA',10.0),('Q-31','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-31','X'),('D-31','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #032",
      "category": "Star Schema",
      "description": "Star Schema example schema #32. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #033",
      "category": "Star Schema",
      "description": "Star Schema example schema #33. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-33','CatA',10.0),('Q-33','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-33','X'),('D-33','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #034",
      "category": "Star Schema",
      "description": "Star Schema example schema #34. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #035",
      "category": "Star Schema",
      "description": "Star Schema example schema #35. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-35','CatA',10.0),('Q-35','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-35','X'),('D-35','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #036",
      "category": "Star Schema",
      "description": "Star Schema example schema #36. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #037",
      "category": "Star Schema",
      "description": "Star Schema example schema #37. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-37','CatA',10.0),('Q-37','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-37','X'),('D-37','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #038",
      "category": "Star Schema",
      "description": "Star Schema example schema #38. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #039",
      "category": "Star Schema",
      "description": "Star Schema example schema #39. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-39','CatA',10.0),('Q-39','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-39','X'),('D-39','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #040",
      "category": "Star Schema",
      "description": "Star Schema example schema #40. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #041",
      "category": "Star Schema",
      "description": "Star Schema example schema #41. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-41','CatA',10.0),('Q-41','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-41','X'),('D-41','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #042",
      "category": "Star Schema",
      "description": "Star Schema example schema #42. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #043",
      "category": "Star Schema",
      "description": "Star Schema example schema #43. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-43','CatA',10.0),('Q-43','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-43','X'),('D-43','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #044",
      "category": "Star Schema",
      "description": "Star Schema example schema #44. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #045",
      "category": "Star Schema",
      "description": "Star Schema example schema #45. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-45','CatA',10.0),('Q-45','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-45','X'),('D-45','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #046",
      "category": "Star Schema",
      "description": "Star Schema example schema #46. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #047",
      "category": "Star Schema",
      "description": "Star Schema example schema #47. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-47','CatA',10.0),('Q-47','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-47','X'),('D-47','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #048",
      "category": "Star Schema",
      "description": "Star Schema example schema #48. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #049",
      "category": "Star Schema",
      "description": "Star Schema example schema #49. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-49','CatA',10.0),('Q-49','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-49','X'),('D-49','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #050",
      "category": "Star Schema",
      "description": "Star Schema example schema #50. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #051",
      "category": "Star Schema",
      "description": "Star Schema example schema #51. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-51','CatA',10.0),('Q-51','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-51','X'),('D-51','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #052",
      "category": "Star Schema",
      "description": "Star Schema example schema #52. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #053",
      "category": "Star Schema",
      "description": "Star Schema example schema #53. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-53','CatA',10.0),('Q-53','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-53','X'),('D-53','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #054",
      "category": "Star Schema",
      "description": "Star Schema example schema #54. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #055",
      "category": "Star Schema",
      "description": "Star Schema example schema #55. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-55','CatA',10.0),('Q-55','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-55','X'),('D-55','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #056",
      "category": "Star Schema",
      "description": "Star Schema example schema #56. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #057",
      "category": "Star Schema",
      "description": "Star Schema example schema #57. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-57','CatA',10.0),('Q-57','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-57','X'),('D-57','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #058",
      "category": "Star Schema",
      "description": "Star Schema example schema #58. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #059",
      "category": "Star Schema",
      "description": "Star Schema example schema #59. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-59','CatA',10.0),('Q-59','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-59','X'),('D-59','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #060",
      "category": "Star Schema",
      "description": "Star Schema example schema #60. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #061",
      "category": "Star Schema",
      "description": "Star Schema example schema #61. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-61','CatA',10.0),('Q-61','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-61','X'),('D-61','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #062",
      "category": "Star Schema",
      "description": "Star Schema example schema #62. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #063",
      "category": "Star Schema",
      "description": "Star Schema example schema #63. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-63','CatA',10.0),('Q-63','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-63','X'),('D-63','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #064",
      "category": "Star Schema",
      "description": "Star Schema example schema #64. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #065",
      "category": "Star Schema",
      "description": "Star Schema example schema #65. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-65','CatA',10.0),('Q-65','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-65','X'),('D-65','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #066",
      "category": "Star Schema",
      "description": "Star Schema example schema #66. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #067",
      "category": "Star Schema",
      "description": "Star Schema example schema #67. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-67','CatA',10.0),('Q-67','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-67','X'),('D-67','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #068",
      "category": "Star Schema",
      "description": "Star Schema example schema #68. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #069",
      "category": "Star Schema",
      "description": "Star Schema example schema #69. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-69','CatA',10.0),('Q-69','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-69','X'),('D-69','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #070",
      "category": "Star Schema",
      "description": "Star Schema example schema #70. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #071",
      "category": "Star Schema",
      "description": "Star Schema example schema #71. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-71','CatA',10.0),('Q-71','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-71','X'),('D-71','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #072",
      "category": "Star Schema",
      "description": "Star Schema example schema #72. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #073",
      "category": "Star Schema",
      "description": "Star Schema example schema #73. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-73','CatA',10.0),('Q-73','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-73','X'),('D-73','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #074",
      "category": "Star Schema",
      "description": "Star Schema example schema #74. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #075",
      "category": "Star Schema",
      "description": "Star Schema example schema #75. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-75','CatA',10.0),('Q-75','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-75','X'),('D-75','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #076",
      "category": "Star Schema",
      "description": "Star Schema example schema #76. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #077",
      "category": "Star Schema",
      "description": "Star Schema example schema #77. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-77','CatA',10.0),('Q-77','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-77','X'),('D-77','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #078",
      "category": "Star Schema",
      "description": "Star Schema example schema #78. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #079",
      "category": "Star Schema",
      "description": "Star Schema example schema #79. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-79','CatA',10.0),('Q-79','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-79','X'),('D-79','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #080",
      "category": "Star Schema",
      "description": "Star Schema example schema #80. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #081",
      "category": "Star Schema",
      "description": "Star Schema example schema #81. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-81','CatA',10.0),('Q-81','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-81','X'),('D-81','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #082",
      "category": "Star Schema",
      "description": "Star Schema example schema #82. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #083",
      "category": "Star Schema",
      "description": "Star Schema example schema #83. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-83','CatA',10.0),('Q-83','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-83','X'),('D-83','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #084",
      "category": "Star Schema",
      "description": "Star Schema example schema #84. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #085",
      "category": "Star Schema",
      "description": "Star Schema example schema #85. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-85','CatA',10.0),('Q-85','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-85','X'),('D-85','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #086",
      "category": "Star Schema",
      "description": "Star Schema example schema #86. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #087",
      "category": "Star Schema",
      "description": "Star Schema example schema #87. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-87','CatA',10.0),('Q-87','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-87','X'),('D-87','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #088",
      "category": "Star Schema",
      "description": "Star Schema example schema #88. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #089",
      "category": "Star Schema",
      "description": "Star Schema example schema #89. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-89','CatA',10.0),('Q-89','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-89','X'),('D-89','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #090",
      "category": "Star Schema",
      "description": "Star Schema example schema #90. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #091",
      "category": "Star Schema",
      "description": "Star Schema example schema #91. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-91','CatA',10.0),('Q-91','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-91','X'),('D-91','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #092",
      "category": "Star Schema",
      "description": "Star Schema example schema #92. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #093",
      "category": "Star Schema",
      "description": "Star Schema example schema #93. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-93','CatA',10.0),('Q-93','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-93','X'),('D-93','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #094",
      "category": "Star Schema",
      "description": "Star Schema example schema #94. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #095",
      "category": "Star Schema",
      "description": "Star Schema example schema #95. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-95','CatA',10.0),('Q-95','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-95','X'),('D-95','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #096",
      "category": "Star Schema",
      "description": "Star Schema example schema #96. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #097",
      "category": "Star Schema",
      "description": "Star Schema example schema #97. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-97','CatA',10.0),('Q-97','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-97','X'),('D-97','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #098",
      "category": "Star Schema",
      "description": "Star Schema example schema #98. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    },
    {
      "name": "Star Schema Template #099",
      "category": "Star Schema",
      "description": "Star Schema example schema #99. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": "INSERT INTO dim_date(date_key,day,month,year) VALUES ('2025-01-01',1,1,2025),('2025-01-02',2,1,2025);\nINSERT INTO dim_product(name,category,price) VALUES ('P-99','CatA',10.0),('Q-99','CatB',20.0);\nINSERT INTO dim_customer(name,city) VALUES ('C-99','X'),('D-99','Y');\nINSERT INTO fact_sales(date_key,product_key,customer_key,qty) VALUES ('2025-01-01',1,1,2),('2025-01-02',2,2,1);"
    },
    {
      "name": "Star Schema Template #100",
      "category": "Star Schema",
      "description": "Star Schema example schema #100. Includes minimal sample data.",
      "schema_sql": "DROP TABLE IF EXISTS fact_sales;\nDROP TABLE IF EXISTS dim_date;\nDROP TABLE IF EXISTS dim_product;\nDROP TABLE IF EXISTS dim_customer;\nCREATE TABLE dim_date(\n  date_key TEXT PRIMARY KEY,\n  day INTEGER, month INTEGER, year INTEGER\n);\nCREATE TABLE dim_product(\n  product_key INTEGER PRIMARY KEY,\n  name TEXT, category TEXT, price REAL\n);\nCREATE TABLE dim_customer(\n  customer_key INTEGER PRIMARY KEY,\n  name TEXT, city TEXT\n);\nCREATE TABLE fact_sales(\n  sale_id INTEGER PRIMARY KEY,\n  date_key TEXT,\n  product_key INTEGER,\n  customer_key INTEGER,\n  qty INTEGER,\n  FOREIGN KEY(date_key) REFERENCES dim_date(date_key),\n  FOREIGN KEY(product_key) REFERENCES dim_product(product_key),\n  FOREIGN KEY(customer_key) REFERENCES dim_customer(customer_key)\n);",
      "data_sql": ""
    }
  ]
}